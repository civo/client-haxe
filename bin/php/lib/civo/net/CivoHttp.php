<?php
/**
 * Generated by Haxe 4.0.2
 */

namespace civo\net;

use \haxe\io\_BytesData\Container;
use \php\_Boot\HxAnon;
use \tink\http\_Fetch\FetchResponse_Impl_;
use \tink\http\HeaderField;
use \tink\http\Fetch;
use \php\Boot;
use \tink\core\LinkObject;
use \tink\streams\Single;
use \tink\chunk\ByteChunk;
use \tink\core\_Lazy\LazyConst;
use \haxe\Json;
use \tink\http\_Header\HeaderValue_Impl_;
use \tink\_Url\Url_Impl_;
use \haxe\io\Bytes;

class CivoHttp {
	/**
	 * @param string $token
	 * @param string $path
	 * @param \Closure $handler
	 * @param mixed $params
	 * 
	 * @return LinkObject
	 */
	public static function delete ($token, $path, $handler, $params = null) {
		#src/civo/net/CivoHttp.hx:28: characters 5-57
		return CivoHttp::request("DELETE", $token, $path, $handler, $params);
	}

	/**
	 * @param string $token
	 * @param string $path
	 * @param \Closure $handler
	 * @param mixed $params
	 * 
	 * @return LinkObject
	 */
	public static function get ($token, $path, $handler, $params = null) {
		#src/civo/net/CivoHttp.hx:16: characters 5-54
		return CivoHttp::request("GET", $token, $path, $handler, $params);
	}

	/**
	 * @param string $token
	 * @param string $path
	 * @param \Closure $handler
	 * @param mixed $params
	 * 
	 * @return LinkObject
	 */
	public static function post ($token, $path, $handler, $params = null) {
		#src/civo/net/CivoHttp.hx:24: characters 5-55
		return CivoHttp::request("POST", $token, $path, $handler, $params);
	}

	/**
	 * @param string $token
	 * @param string $path
	 * @param \Closure $handler
	 * @param mixed $params
	 * 
	 * @return LinkObject
	 */
	public static function put ($token, $path, $handler, $params = null) {
		#src/civo/net/CivoHttp.hx:20: characters 5-54
		return CivoHttp::request("PUT", $token, $path, $handler, $params);
	}

	/**
	 * @param string $method
	 * @param string $token
	 * @param string $path
	 * @param \Closure $handler
	 * @param mixed $params
	 * 
	 * @return LinkObject
	 */
	public static function request ($method, $token, $path, $handler, $params = null) {
		#src/civo/net/CivoHttp.hx:32: characters 5-25
		$uri = CivoHttp::url($path);
		#src/civo/net/CivoHttp.hx:34: characters 5-66
		$body = ($params !== null ? Json::phpJsonEncode($params, null, null) : "");
		#src/civo/net/CivoHttp.hx:36: characters 26-38
		$this1 = mb_strtolower("Content-Type");
		#src/civo/net/CivoHttp.hx:36: characters 9-60
		$headers = new HeaderField($this1, "application/json");
		#src/civo/net/CivoHttp.hx:37: characters 26-40
		$this2 = mb_strtolower("Content-Length");
		#src/civo/net/CivoHttp.hx:37: characters 9-55
		$headers1 = new HeaderField($this2, HeaderValue_Impl_::ofInt(mb_strlen($body)));
		#src/civo/net/CivoHttp.hx:38: characters 26-39
		$this3 = mb_strtolower("Authorization");
		#src/civo/net/CivoHttp.hx:35: lines 35-39
		$headers2 = \Array_hx::wrap([
			$headers,
			$headers1,
			new HeaderField($this3, "Bearer " . ($token??'null')),
		]);
		#src/civo/net/CivoHttp.hx:41: lines 41-45
		$url = Url_Impl_::fromString($uri);
		#src/civo/net/CivoHttp.hx:44: characters 15-19
		$b = strlen($body);
		#src/civo/net/CivoHttp.hx:41: lines 41-54
		return FetchResponse_Impl_::all(Fetch::fetch($url, new HxAnon([
			"method" => $method,
			"headers" => $headers2,
			"body" => new Single(new LazyConst(ByteChunk::of(new Bytes($b, new Container($body))))),
		])))->handle(function ($o)  use (&$handler) {
			#src/civo/net/CivoHttp.hx:46: lines 46-53
			$__hx__switch = ($o->index);
			if ($__hx__switch === 0) {
				#src/civo/net/CivoHttp.hx:47: characters 24-27
				$res = $o->params[0];
				#src/civo/net/CivoHttp.hx:48: characters 13-115
				$body1 = (($res->body !== null) && ($res->body->toString() !== "") ? Json::phpJsonDecode($res->body->toString()) : null);
				#src/civo/net/CivoHttp.hx:49: characters 13-49
				$handler($res->header->statusCode, $body1);

			} else if ($__hx__switch === 1) {
				#src/civo/net/CivoHttp.hx:50: characters 24-27
				$res1 = $o->params[0];
				#src/civo/net/CivoHttp.hx:51: characters 13-111
				$body2 = (($res1->data !== null) && ($res1->data !== "") ? Json::phpJsonDecode($res1->data) : $res1->message);
				#src/civo/net/CivoHttp.hx:52: characters 13-36
				$handler($res1->code, $body2);

			}
		});
	}

	/**
	 * @param string $path
	 * 
	 * @return string
	 */
	public static function url ($path) {
		#src/civo/net/CivoHttp.hx:12: characters 5-44
		return "https://api.civo.com/v2" . ($path??'null');
	}
}

Boot::registerClass(CivoHttp::class, 'civo.net.CivoHttp');
