<?php
/**
 * Generated by Haxe 4.0.2
 */

namespace tink\chunk;

use \php\Boot;
use \tink\_Chunk\Chunk_Impl_;

class ChunkCursor {
	/**
	 * @var int
	 */
	public $curLength;
	/**
	 * @var int
	 */
	public $curOffset;
	/**
	 * @var ByteChunk
	 */
	public $curPart;
	/**
	 * @var int
	 */
	public $curPartIndex;
	/**
	 * @var int
	 */
	public $currentByte;
	/**
	 * @var int
	 */
	public $currentPos;
	/**
	 * @var int
	 */
	public $length;
	/**
	 * @var \Array_hx
	 */
	public $parts;

	/**
	 * @param \Array_hx $parts
	 * 
	 * @return ChunkCursor
	 */
	public static function create ($parts) {
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:19: characters 5-33
		$ret = new ChunkCursor();
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:20: characters 5-22
		$ret->parts = $parts;
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:21: characters 5-16
		$ret->reset();
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:22: characters 5-15
		return $ret;
	}

	/**
	 * @return void
	 */
	public function __construct () {
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:16: characters 47-49
		$this->currentByte = -1;
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:15: characters 46-47
		$this->currentPos = 0;
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:14: characters 42-43
		$this->length = 0;
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:12: characters 23-24
		$this->curLength = 0;
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:11: characters 23-24
		$this->curOffset = 0;
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:10: characters 26-27
		$this->curPartIndex = 0;
	}

	/**
	 *  Add a chunk to the end and reset `currentPos` to zero.
	 *  @param chunk - Chunk to be added
	 * 
	 * @param ChunkObject $chunk
	 * 
	 * @return void
	 */
	public function add ($chunk) {
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:81: characters 5-41
		$chunk->flatten($this->parts);
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:82: characters 5-12
		$this->reset();
	}

	/**
	 * @return void
	 */
	public function ffwd () {
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:274: characters 5-21
		$this->currentByte = -1;
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:275: characters 5-18
		$this->curLength = 0;
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:276: characters 5-18
		$this->curOffset = 0;
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:277: characters 5-19
		$this->curPart = null;
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:278: characters 5-32
		$this->curPartIndex = $this->parts->length;
	}

	/**
	 *  Like prune(), but returns the removed chunk
	 *  @return Removed chunk (chunk to the left of current position)
	 * 
	 * @return ChunkObject
	 */
	public function flush () {
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:65: characters 5-22
		$ret = $this->left();
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:66: characters 5-12
		$this->shift();
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:67: characters 5-15
		return $ret;
	}

	/**
	 *  Return the chunk to the left of current position, excluding current byte
	 * 
	 * @return ChunkObject
	 */
	public function left () {
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:123: characters 5-44
		if ($this->curPart === null) {
			#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:123: characters 26-44
			return Chunk_Impl_::$EMPTY;
		}
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:124: characters 16-62
		$_g = new \Array_hx();
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:124: characters 17-61
		$_g1 = 0;
		$_g2 = $this->curPartIndex;
		while ($_g1 < $_g2) {
			$i = $_g1++;
			#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:124: characters 45-61
			$_g->arr[$_g->length] = ($this->parts->arr[$i] ?? null);
			++$_g->length;

		}

		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:124: characters 5-63
		$left = $_g;
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:125: characters 5-43
		$x = $this->curPart->slice(0, $this->curOffset);
		$left->arr[$left->length] = $x;
		++$left->length;

		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:126: characters 5-28
		return Chunk_Impl_::join($left);
	}

	/**
	 *  Advance to next byte
	 *  @return `false` if there is no next byte
	 * 
	 * @return bool
	 */
	public function next () {
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:286: characters 5-43
		if ($this->currentPos === $this->length) {
			#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:286: characters 31-43
			return false;
		}
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:287: characters 5-17
		$this->currentPos++;
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:288: lines 288-291
		if ($this->currentPos === $this->length) {
			#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:289: characters 7-13
			$this->ffwd();
			#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:290: characters 7-19
			return false;
		}
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:292: lines 292-300
		if ($this->curOffset === ($this->curLength - 1)) {
			#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:293: characters 7-20
			$this->curOffset = 0;
			#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:294: characters 7-38
			$this->curPart = ($this->parts->arr[++$this->curPartIndex] ?? null);
			#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:295: characters 19-38
			$_this = $this->curPart;
			#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:295: characters 7-38
			$this->curLength = $_this->to - $_this->from;
			#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:296: characters 21-39
			$_this1 = $this->curPart;
			#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:296: characters 7-39
			$this->currentByte = ord($_this1->data->s[$_this1->from]);
		} else {
			#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:299: characters 21-49
			$_this2 = $this->curPart;
			#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:299: characters 7-49
			$this->currentByte = ord($_this2->data->s[$_this2->from + ++$this->curOffset]);
		}
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:301: characters 5-16
		return true;
	}

	/**
	 * @return void
	 */
	public function reset () {
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:45: characters 5-15
		$this->length = 0;
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:46: characters 5-19
		$this->currentPos = 0;
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:47: characters 5-21
		$this->currentByte = -1;
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:48: characters 5-18
		$this->curOffset = 0;
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:50: lines 50-51
		$_g = 0;
		$_g1 = $this->parts;
		while ($_g < $_g1->length) {
			#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:50: characters 10-11
			$p = ($_g1->arr[$_g] ?? null);
			#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:50: lines 50-51
			++$_g;
			#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:51: characters 7-30
			$this->length += $p->to - $p->from;
		}

		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:53: characters 5-48
		$this->curPart = ($this->parts->arr[$this->curPartIndex = 0] ?? null);
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:54: lines 54-57
		if ($this->curPart !== null) {
			#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:55: characters 24-48
			$_this = $this->curPart;
			#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:55: characters 7-48
			$this->curLength = $_this->to - $_this->from;
			#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:56: characters 26-49
			$_this1 = $this->curPart;
			#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:56: characters 7-49
			$this->currentByte = ord($_this1->data->s[$_this1->from]);
		}
	}

	/**
	 *  Return the chunk to the right of current position, including current byte
	 * 
	 * @return ChunkObject
	 */
	public function right () {
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:133: characters 5-44
		if ($this->curPart === null) {
			#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:133: characters 26-44
			return Chunk_Impl_::$EMPTY;
		}
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:134: characters 17-74
		$_g = new \Array_hx();
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:134: characters 18-73
		$_g1 = $this->curPartIndex;
		$_g2 = $this->parts->length;
		while ($_g1 < $_g2) {
			$i = $_g1++;
			#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:134: characters 57-73
			$_g->arr[$_g->length] = ($this->parts->arr[$i] ?? null);
			++$_g->length;

		}

		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:134: characters 5-75
		$right = $_g;
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:135: lines 135-137
		if ($right->length > 0) {
			#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:136: characters 7-53
			$right->offsetSet(0, $this->curPart->slice($this->curOffset, $this->curLength));
		}
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:138: characters 5-29
		return Chunk_Impl_::join($right);
	}

	/**
	 *  Remove data to the left of current position and optionally add a chunk at the end.
	 *  Reset `currentPos` to zero.
	 *  @param chunk - Optional chunk to be added to the end
	 * 
	 * @param ChunkObject $chunk
	 * 
	 * @return void
	 */
	public function shift ($chunk = null) {
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:92: characters 5-34
		$this->parts->splice(0, $this->curPartIndex);
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:94: characters 12-20
		$_g = ($this->parts->arr[0] ?? null);
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:95: lines 95-102
		if ($_g !== null) {
			#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:96: characters 12-17
			$chunk1 = $_g;
			#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:97: characters 16-52
			$_g1 = $chunk1->getSlice($this->curOffset, $this->curLength);
			#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:98: lines 98-101
			if ($_g1 === null) {
				#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:99: characters 13-26
				$_this = $this->parts;
				if ($_this->length > 0) {
					$_this->length--;
				}
				array_shift($_this->arr);
			} else {
				#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:100: characters 16-20
				$rest = $_g1;
				#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:101: characters 13-28
				$this->parts->offsetSet(0, $rest);
			}

		}

		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:105: lines 105-108
		if ($chunk !== null) {
			#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:106: characters 7-17
			$this->add($chunk);
		} else {
			#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/chunk/ChunkCursor.hx:108: characters 7-14
			$this->reset();
		}
	}
}

Boot::registerClass(ChunkCursor::class, 'tink.chunk.ChunkCursor');
