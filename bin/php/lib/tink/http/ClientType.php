<?php
/**
 * Generated by Haxe 4.0.2
 */

namespace tink\http;

use \php\Boot;
use \tink\http\containers\LocalContainer;
use \php\_Boot\HxEnum;

class ClientType extends HxEnum {
	/**
	 * @return ClientType
	 */
	static public function Curl () {
		static $inst = null;
		if (!$inst) $inst = new ClientType('Curl', 2, []);
		return $inst;
	}

	/**
	 * @param ClientObject $v
	 * 
	 * @return ClientType
	 */
	static public function Custom ($v) {
		return new ClientType('Custom', 4, [$v]);
	}

	/**
	 * @return ClientType
	 */
	static public function Default () {
		static $inst = null;
		if (!$inst) $inst = new ClientType('Default', 0, []);
		return $inst;
	}

	/**
	 * @param LocalContainer $container
	 * 
	 * @return ClientType
	 */
	static public function Local ($container) {
		return new ClientType('Local', 1, [$container]);
	}

	/**
	 * @return ClientType
	 */
	static public function Php () {
		static $inst = null;
		if (!$inst) $inst = new ClientType('Php', 5, []);
		return $inst;
	}

	/**
	 * @return ClientType
	 */
	static public function StdLib () {
		static $inst = null;
		if (!$inst) $inst = new ClientType('StdLib', 3, []);
		return $inst;
	}

	/**
	 * Returns array of (constructorIndex => constructorName)
	 *
	 * @return string[]
	 */
	static public function __hx__list () {
		return [
			2 => 'Curl',
			4 => 'Custom',
			0 => 'Default',
			1 => 'Local',
			5 => 'Php',
			3 => 'StdLib',
		];
	}

	/**
	 * Returns array of (constructorName => parametersCount)
	 *
	 * @return int[]
	 */
	static public function __hx__paramsCount () {
		return [
			'Curl' => 0,
			'Custom' => 1,
			'Default' => 0,
			'Local' => 1,
			'Php' => 0,
			'StdLib' => 0,
		];
	}
}

Boot::registerClass(ClientType::class, 'tink.http.ClientType');
