<?php
/**
 * Generated by Haxe 4.0.2
 */

namespace tink\http\clients;

use \haxe\io\_BytesData\Container;
use \php\net\SslSocket;
use \php\_Boot\HxAnon;
use \tink\http\HeaderField;
use \tink\core\_Lazy\LazyFunc;
use \tink\io\RealSourceTools;
use \php\Boot;
use \sys\net\Socket;
use \tink\io\std\InputSource;
use \tink\core\Noise;
use \tink\http\IncomingResponse;
use \tink\io\_Source\Source_Impl_;
use \tink\streams\Single;
use \tink\core\TypedError;
use \tink\io\_Worker\Worker_Impl_;
use \tink\chunk\ByteChunk;
use \tink\core\Outcome;
use \tink\io\WorkerObject;
use \tink\http\ResponseHeaderBase;
use \tink\core\_Lazy\LazyConst;
use \sys\net\Host;
use \tink\core\_Future\Future_Impl_;
use \tink\_Url\Url_Impl_;
use \tink\http\ClientObject;
use \tink\url\_Host\Host_Impl_;
use \tink\io\_Sink\SinkYielding_Impl_;
use \haxe\io\Bytes;
use \tink\http\OutgoingRequest;
use \tink\core\_Future\FutureObject;

class SocketClient implements ClientObject {
	/**
	 * @var bool
	 */
	public $secure;
	/**
	 * @var WorkerObject
	 */
	public $worker;

	/**
	 * @param WorkerObject $worker
	 * 
	 * @return void
	 */
	public function __construct ($worker = null) {
		#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:16: characters 16-21
		$this->secure = false;
		#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:19: characters 5-34
		$this->worker = Worker_Impl_::ensure($worker);
	}

	/**
	 * @param OutgoingRequest $req
	 * 
	 * @return FutureObject
	 */
	public function request ($req) {
		#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:22: lines 22-85
		$_gthis = $this;
		#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:24: lines 24-84
		return Future_Impl_::async(function ($cb)  use (&$req, &$_gthis) {
			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:26: lines 26-27
			$addHeaders = function ($headers)  use (&$req) {
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:27: characters 35-61
				$req1 = $req->header->concat($headers);
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:27: characters 9-72
				$req = new OutgoingRequest($req1, $req->body);
			};
			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:29: characters 14-24
			$req2 = $req->header;
			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:29: characters 33-43
			$this1 = mb_strtolower("connection");
			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:29: characters 14-45
			$_g = $req2->byName($this1);
			$__hx__switch = ($_g->index);
			if ($__hx__switch === 0) {
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:32: characters 22-23
				$_g1 = $_g->params[0];
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:30: characters 22-46
				if (mb_strtolower($_g1) !== "close") {
					#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:32: characters 22-23
					$v = $_g1;
					#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:33: characters 14-96
					$tmp = Outcome::Failure(new TypedError(null, "Only \"Connection: Close\" is supported. But specified as \"" . ($v??'null') . "\"", new HxAnon([
						"fileName" => "tink/http/clients/SocketClient.hx",
						"lineNumber" => 33,
						"className" => "tink.http.clients.SocketClient",
						"methodName" => "request",
					])));
					#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:33: characters 11-97
					$cb($tmp);
					#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:34: characters 11-17
					return;
				}
			} else if ($__hx__switch === 1) {
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:35: characters 22-23
				$_g2 = $_g->params[0];
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:36: characters 40-50
				$this2 = mb_strtolower("connection");
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:36: characters 11-63
				$addHeaders(\Array_hx::wrap([new HeaderField($this2, "close")]));
			}

			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:39: characters 14-24
			$req3 = $req->header;
			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:39: characters 33-37
			$this3 = mb_strtolower("host");
			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:39: characters 14-39
			$_g3 = $req3->byName($this3);
			$__hx__switch = ($_g3->index);
			if ($__hx__switch === 0) {
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:40: characters 22-23
				$_g4 = $_g3->params[0];
			} else if ($__hx__switch === 1) {
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:41: characters 22-23
				$_g5 = $_g3->params[0];
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:41: characters 55-59
				$this4 = mb_strtolower("host");
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:41: characters 26-89
				$addHeaders(\Array_hx::wrap([new HeaderField($this4, Host_Impl_::get_name($req->header->url->host))]));
			}

			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:44: lines 44-53
			$socket = ($_gthis->secure ? new SslSocket() : new Socket());
			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:55: lines 55-58
			$port = null;
			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:55: characters 25-49
			$_g6 = Host_Impl_::get_port($req->header->url->host);
			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:56: lines 56-57
			if ($_g6 === null) {
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:55: lines 55-58
				$port = ($_gthis->secure ? 443 : 80);
			} else {
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:57: characters 14-15
				$v1 = $_g6;
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:55: lines 55-58
				$port = $v1;
			}
			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:60: lines 60-83
			Worker_Impl_::work($_gthis->worker, new LazyFunc(function ()  use (&$port, &$req, &$socket) {
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:61: characters 41-65
				$tmp1 = Host_Impl_::get_name($req->header->url->host);
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:61: characters 9-73
				$socket->connect(new Host($tmp1), $port);
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:62: characters 9-21
				return Noise::Noise();
			}))->handle(function ($_)  use (&$req, &$_gthis, &$cb, &$socket) {
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:64: characters 9-99
				$sink = SinkYielding_Impl_::ofOutput("Request to " . (Url_Impl_::toString($req->header->url)??'null'), $socket->output, new HxAnon(["worker" => $_gthis->worker]));
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:65: characters 22-103
				$name = "Response from " . (Url_Impl_::toString($req->header->url)??'null');
				$input = $socket->input;
				$options = new HxAnon(["worker" => $_gthis->worker]);
				if ($options === null) {
					$options = new HxAnon();
				}
				$source = Worker_Impl_::ensure($options->worker);
				$_g7 = $options->chunkSize;
				$source1 = null;
				if ($_g7 === null) {
					$source1 = 65536;
				} else {
					$v2 = $_g7;
					$source1 = $v2;
				}
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:65: characters 9-104
				$source2 = new InputSource($name, $input, $source, Bytes::alloc($source1), 0);
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:67: characters 9-48
				$this5 = $req->body;
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:67: characters 26-47
				$s = $req->header->toString();
				$b = strlen($s);
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:67: lines 67-82
				Source_Impl_::pipeTo($this5->prepend(new Single(new LazyConst(ByteChunk::of(new Bytes($b, new Container($s)))))), $sink)->handle(function ($r)  use (&$source2, &$cb) {
					#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:68: lines 68-81
					$__hx__switch = ($r->index);
					if ($__hx__switch === 0) {
						#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:70: characters 28-51
						$this6 = ResponseHeaderBase::parser();
						#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:70: lines 70-77
						RealSourceTools::parse($source2, $this6)->handle(function ($o)  use (&$cb) {
							$__hx__switch = ($o->index);
							if ($__hx__switch === 0) {
								#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:71: characters 30-36
								$parsed = $o->params[0];
								#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:72: characters 26-53
								$_g71 = $parsed->a->getContentLength();
								$__hx__switch = ($_g71->index);
								if ($__hx__switch === 0) {
									#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:73: characters 34-37
									$len = $_g71->params[0];
									#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:73: characters 72-80
									$parsed1 = $parsed->a;
									#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:73: characters 43-103
									$tmp2 = Outcome::Success(new IncomingResponse($parsed1, Source_Impl_::limit($parsed->b, $len)));
									#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:73: characters 40-104
									$cb($tmp2);
								} else if ($__hx__switch === 1) {
									#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:74: characters 34-35
									$e = $_g71->params[0];
									#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:74: characters 41-139
									$tmp3 = Outcome::Failure(new TypedError(null, "Chunked encoding is not supported and the content-length header is required.", new HxAnon([
										"fileName" => "tink/http/clients/SocketClient.hx",
										"lineNumber" => 74,
										"className" => "tink.http.clients.SocketClient",
										"methodName" => "request",
									])));
									#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:74: characters 38-140
									$cb($tmp3);
								}

							} else if ($__hx__switch === 1) {
								#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:76: characters 30-31
								$e1 = $o->params[0];
								#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:76: characters 34-48
								$cb(Outcome::Failure($e1));
							}
						});
					} else if ($__hx__switch === 1) {
						#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:79: characters 28-29
						$_g10 = $r->params[1];
						$_g9 = $r->params[0];
						#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:79: characters 35-80
						$tmp4 = Outcome::Failure(new TypedError(null, "Sink ended unexpectedly", new HxAnon([
							"fileName" => "tink/http/clients/SocketClient.hx",
							"lineNumber" => 79,
							"className" => "tink.http.clients.SocketClient",
							"methodName" => "request",
						])));
						#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:79: characters 32-81
						$cb($tmp4);
					} else if ($__hx__switch === 2) {
						#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:80: characters 32-33
						$_g8 = $r->params[1];
						#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:80: characters 29-30
						$e2 = $r->params[0];
						#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/SocketClient.hx:80: characters 36-50
						$cb(Outcome::Failure($e2));

					}
				});
			});
		});
	}
}

Boot::registerClass(SocketClient::class, 'tink.http.clients.SocketClient');
