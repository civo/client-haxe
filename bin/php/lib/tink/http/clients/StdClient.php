<?php
/**
 * Generated by Haxe 4.0.2
 */

namespace tink\http\clients;

use \haxe\io\_BytesData\Container;
use \php\_Boot\HxAnon;
use \tink\http\HeaderField;
use \tink\core\_Lazy\LazyFunc;
use \php\Boot;
use \tink\http\IncomingResponse;
use \tink\core\_Callback\Callback_Impl_;
use \tink\streams\Single;
use \tink\core\TypedError;
use \tink\io\_Worker\Worker_Impl_;
use \tink\chunk\ByteChunk;
use \tink\core\Outcome;
use \tink\io\WorkerObject;
use \tink\http\ResponseHeaderBase;
use \tink\core\_Lazy\LazyConst;
use \sys\Http;
use \tink\core\_Future\Future_Impl_;
use \tink\_Url\Url_Impl_;
use \tink\http\ClientObject;
use \haxe\io\Bytes;
use \tink\http\OutgoingRequest;
use \php\_NativeIndexedArray\NativeIndexedArrayIterator;
use \tink\core\_Future\FutureObject;
use \tink\io\IdealSourceTools;
use \_Array\ArrayIterator;

class StdClient implements ClientObject {
	/**
	 * @var WorkerObject
	 */
	public $worker;

	/**
	 * @param WorkerObject $worker
	 * 
	 * @return void
	 */
	public function __construct ($worker = null) {
		#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:16: characters 5-34
		$this->worker = Worker_Impl_::ensure($worker);
	}

	/**
	 * @param OutgoingRequest $req
	 * 
	 * @return FutureObject
	 */
	public function request ($req) {
		#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:18: lines 18-70
		$_gthis = $this;
		#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:19: lines 19-70
		return Future_Impl_::async(function ($cb)  use (&$req, &$_gthis) {
			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:21: characters 7-45
			$r = new Http(Url_Impl_::toString($req->header->url));
			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:23: lines 23-56
			$send = function ($post)  use (&$r, &$_gthis, &$cb) {
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:24: characters 9-24
				$code = 200;
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:25: characters 9-43
				$r->onStatus = function ($c)  use (&$code) {
					#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:25: characters 35-43
					$code = $c;
				};
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:27: lines 27-36
				$headers = function ()  use (&$r) {
					#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:30: characters 22-39
					$_g = $r->responseHeaders;
					#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:31: lines 31-35
					if ($_g === null) {
						#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:31: characters 28-30
						return new \Array_hx();
					} else {
						#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:32: characters 22-23
						$v = $_g;
						#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:33: lines 33-35
						$_g1 = new \Array_hx();
						#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:33: characters 33-41
						$name = new NativeIndexedArrayIterator(array_values(array_map("strval", array_keys($v->data))));
						while ($name->hasNext()) {
							#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:33: lines 33-34
							$name1 = $name->next();
							#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:34: characters 37-41
							$this1 = mb_strtolower($name1);
							#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:34: characters 21-51
							$x = new HeaderField($this1, ($v->data[$name1] ?? null));
							$_g1->arr[$_g1->length] = $x;
							++$_g1->length;
						}

						#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:33: lines 33-35
						return $_g1;
					}
				};
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:41: lines 41-46
				$r->onError = function ($msg)  use (&$_gthis, &$cb, &$code) {
					#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:42: characters 11-38
					if ($code === 200) {
						#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:42: characters 28-38
						$code = 500;
					}
					#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:43: lines 43-45
					Worker_Impl_::work($_gthis->worker, new LazyConst(true))->handle(Callback_Impl_::fromNiladic(function ()  use (&$msg, &$cb, &$code) {
						#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:44: characters 16-45
						$send1 = Outcome::Failure(new TypedError($code, $msg, new HxAnon([
							"fileName" => "tink/http/clients/StdClient.hx",
							"lineNumber" => 44,
							"className" => "tink.http.clients.StdClient",
							"methodName" => "request",
						])));
						#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:44: characters 13-46
						$cb($send1);
					}));
				};
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:48: lines 48-53
				$r->onData = function ($data)  use (&$headers, &$_gthis, &$cb, &$code) {
					#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:50: lines 50-52
					Worker_Impl_::work($_gthis->worker, new LazyConst(true))->handle(Callback_Impl_::fromNiladic(function ()  use (&$headers, &$data, &$cb, &$code) {
						#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:51: characters 45-86
						$fields = $headers();
						$this2 = new ResponseHeaderBase($code, "OK", $fields, "HTTP/1.1");
						#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:51: characters 88-92
						$b = strlen($data);
						#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:51: characters 16-94
						$send2 = Outcome::Success(new IncomingResponse($this2, new Single(new LazyConst(ByteChunk::of(new Bytes($b, new Container($data)))))));
						#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:51: characters 13-95
						$cb($send2);
					}));
				};
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:55: characters 9-49
				Worker_Impl_::work($_gthis->worker, new LazyFunc(function ()  use (&$post, &$r) {
					#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:55: characters 33-48
					$r->request($post);
				}));
			};
			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:58: characters 17-27
			$h = new ArrayIterator($req->header->fields);
			while ($h->hasNext()) {
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:58: lines 58-59
				$h1 = $h->next();
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:59: characters 9-37
				$r->setHeader($h1->name, $h1->value);
			}

			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:61: characters 14-31
			$__hx__switch = ($req->header->method);
			if ($__hx__switch === "GET" || $__hx__switch === "HEAD" || $__hx__switch === "OPTIONS") {
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:63: characters 11-22
				$send(false);
			} else {
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:65: lines 65-68
				IdealSourceTools::all($req->body)->handle(function ($bytes)  use (&$r, &$send) {
					#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:66: characters 27-43
					$tmp = $bytes->toString();
					#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:66: characters 13-44
					$r->setPostData($tmp);
					#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/clients/StdClient.hx:67: characters 13-23
					$send(true);
				});
			}
		});
	}
}

Boot::registerClass(StdClient::class, 'tink.http.clients.StdClient');
