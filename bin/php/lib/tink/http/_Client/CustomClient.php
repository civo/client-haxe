<?php
/**
 * Generated by Haxe 4.0.2
 */

namespace tink\http\_Client;

use \tink\core\_Future\SyncFuture;
use \php\Boot;
use \tink\core\Outcome;
use \tink\core\_Lazy\LazyConst;
use \tink\http\ClientObject;
use \tink\core\_Promise\Promise_Impl_;
use \tink\http\OutgoingRequest;
use \tink\core\_Future\FutureObject;

class CustomClient implements ClientObject {
	/**
	 * @var \Array_hx
	 */
	public $postprocessors;
	/**
	 * @var \Array_hx
	 */
	public $preprocessors;
	/**
	 * @var ClientObject
	 */
	public $real;

	/**
	 * @param \Array_hx $a
	 * @param \Array_hx $b
	 * 
	 * @return \Array_hx
	 */
	public static function concat ($a, $b) {
		#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:72: lines 72-75
		if ($a === null) {
			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:73: characters 19-20
			$v = $b;
			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:73: characters 35-36
			return $v;
		} else if ($b === null) {
			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:73: characters 25-26
			$v1 = $a;
			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:73: characters 35-36
			return $v1;
		} else {
			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:74: characters 16-27
			return $a->concat($b);
		}
	}

	/**
	 * @param ClientObject $c
	 * @param \Array_hx $preprocessors
	 * @param \Array_hx $postprocessors
	 * 
	 * @return CustomClient
	 */
	public static function create ($c, $preprocessors, $postprocessors) {
		#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:78: characters 19-44
		$_g = (($c instanceof CustomClient) ? $c : null);
		#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:79: lines 79-80
		if ($_g === null) {
			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:79: characters 18-68
			return new CustomClient($preprocessors, $postprocessors, $c);
		} else {
			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:80: characters 12-13
			$v = $_g;
			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:80: characters 32-70
			$tmp = CustomClient::concat($preprocessors, $v->preprocessors);
			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:80: characters 72-112
			$tmp1 = CustomClient::concat($v->postprocessors, $postprocessors);
			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:80: characters 15-121
			return new CustomClient($tmp, $tmp1, $v->real);
		}
	}

	/**
	 * @param \Array_hx $preprocessors
	 * @param \Array_hx $postprocessors
	 * @param ClientObject $real
	 * 
	 * @return void
	 */
	public function __construct ($preprocessors, $postprocessors, $real) {
		#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:50: characters 5-39
		$this->preprocessors = $preprocessors;
		#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:51: characters 5-41
		$this->postprocessors = $postprocessors;
		#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:52: characters 5-21
		$this->real = $real;
	}

	/**
	 * @param mixed $value
	 * @param \Array_hx $transforms
	 * @param int $index
	 * 
	 * @return FutureObject
	 */
	public function pipe ($value, $transforms, $index = 0) {
		#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:57: lines 57-61
		if ($index === null) {
			$index = 0;
		}
		if (($transforms !== null) && ($index < $transforms->length)) {
			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:59: characters 17-26
			$f = Boot::getInstanceClosure($this, 'pipe');
			$transforms1 = $transforms;
			$index1 = $index + 1;
			$tmp = function ($value1)  use (&$f, &$transforms1, &$index1) {
				return $f($value1, $transforms1, $index1);
			};
			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:58: lines 58-59
			return Promise_Impl_::next(($transforms->arr[$index] ?? null)($value), $tmp);
		} else {
			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:61: characters 9-14
			return new SyncFuture(new LazyConst(Outcome::Success($value)));
		}
	}

	/**
	 * @param OutgoingRequest $req
	 * 
	 * @return FutureObject
	 */
	public function request ($req) {
		#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:63: lines 63-69
		$_gthis = $this;
		#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:64: lines 64-69
		return Promise_Impl_::next($this->pipe($req, $this->preprocessors), function ($req1)  use (&$_gthis) {
			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:67: characters 18-35
			$tmp = $_gthis->real->request($req1);
			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:68: characters 19-28
			$f = Boot::getInstanceClosure($_gthis, 'pipe');
			$transforms = null;
			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:68: characters 32-98
			if ($_gthis->postprocessors === null) {
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:68: characters 19-28
				$transforms = null;
			} else {
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:68: characters 64-98
				$_g = new \Array_hx();
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:68: characters 65-97
				$_g1 = 0;
				$_g2 = $_gthis->postprocessors;
				while ($_g1 < $_g2->length) {
					#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:68: characters 70-71
					$p = ($_g2->arr[$_g1] ?? null);
					#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:68: characters 65-97
					++$_g1;
					#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:68: characters 91-97
					$x = $p($req1);
					$_g->arr[$_g->length] = $x;
					++$_g->length;

				}

				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:68: characters 19-28
				$transforms = $_g;
			}
			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:67: lines 67-68
			return Promise_Impl_::next($tmp, function ($value)  use (&$f, &$transforms) {
				#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/Client.hx:68: characters 19-28
				return $f($value, $transforms);
			});
		});
	}
}

Boot::registerClass(CustomClient::class, 'tink.http._Client.CustomClient');
