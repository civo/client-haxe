<?php
/**
 * Generated by Haxe 4.0.2
 */

namespace tink\http\containers;

use \tink\http\IncomingRequest;
use \tink\http\Container;
use \tink\core\_Future\SyncFuture;
use \php\Boot;
use \tink\io\_Source\Source_Impl_;
use \tink\http\ResponseHeaderBase;
use \tink\core\_Lazy\LazyConst;
use \tink\http\_Response\OutgoingResponseData;
use \tink\core\_Future\FutureObject;
use \tink\http\HandlerObject;

class LocalContainer implements Container {
	/**
	 * @var HandlerObject
	 */
	public $handler;
	/**
	 * @var bool
	 */
	public $running;

	/**
	 * @return void
	 */
	public function __construct () {
	}

	/**
	 * @param IncomingRequest $req
	 * 
	 * @return FutureObject
	 */
	public function serve ($req) {
		#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/containers/LocalContainer.hx:30: lines 30-33
		if (!$this->running) {
			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/containers/LocalContainer.hx:31: characters 7-52
			$this1 = new ResponseHeaderBase(503, "Server stopped", new \Array_hx(), "HTTP/1.1");
			#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/containers/LocalContainer.hx:30: lines 30-33
			$this2 = new OutgoingResponseData($this1, Source_Impl_::$EMPTY);
			return new SyncFuture(new LazyConst($this2));
		}
		#/home/jahred/haxelib/tink_http/0,9,1/src/tink/http/containers/LocalContainer.hx:34: characters 5-32
		return $this->handler->process($req);
	}
}

Boot::registerClass(LocalContainer::class, 'tink.http.containers.LocalContainer');
