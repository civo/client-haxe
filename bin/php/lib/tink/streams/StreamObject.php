<?php
/**
 * Generated by Haxe 4.0.2
 */

namespace tink\streams;

use \php\Boot;
use \tink\core\_Future\FutureObject;

interface StreamObject {
	/**
	 * @param \Array_hx $into
	 * 
	 * @return void
	 */
	public function decompose ($into) ;

	/**
	 *  Iterate this stream.
	 *  The handler should return one of the following values (or a `Future` of it)
	 *  - Backoff: stop the iteration before the current item
	 *  - Finish: stop the iteration after the current item
	 *  - Resume: continue the iteration
	 *  - Clog(error): produce an error
	 *  @return A conclusion that indicates how the iteration was ended
	 *  - Depleted: there are no more data in the stream
	 *  - Failed(err): the stream produced an error
	 *  - Halted(rest): the iteration was halted by `Backoff` or `Finish`
	 *  - Clogged(err): the iteration was halted by `Clog(err)`
	 * 
	 * @param \Closure $handle
	 * 
	 * @return FutureObject
	 */
	public function forEach ($handle) ;

	/**
	 * @return bool
	 */
	public function get_depleted () ;

	/**
	 *  Prepend another stream before this
	 * 
	 * @param StreamObject $other
	 * 
	 * @return StreamObject
	 */
	public function prepend ($other) ;

	/**
	 *  Think Lambda.fold()
	 * 
	 * @param mixed $initial
	 * @param \Closure $reducer
	 * 
	 * @return FutureObject
	 */
	public function reduce ($initial, $reducer) ;

	/**
	 *  Create a new stream by performing an N-to-M mapping
	 * 
	 * @param object $f
	 * 
	 * @return StreamObject
	 */
	public function regroup ($f) ;
}

Boot::registerClass(StreamObject::class, 'tink.streams.StreamObject');
Boot::registerGetters('tink\\streams\\StreamObject', [
	'depleted' => true
]);
