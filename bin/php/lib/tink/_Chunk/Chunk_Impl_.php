<?php
/**
 * Generated by Haxe 4.0.2
 */

namespace tink\_Chunk;

use \tink\chunk\ChunkObject;
use \php\Boot;

final class Chunk_Impl_ {
	/**
	 * @var ChunkObject
	 */
	static public $EMPTY;

	/**
	 * @param ChunkObject $a
	 * @param ChunkObject $b
	 * 
	 * @return ChunkObject
	 */
	public static function catChunk ($a, $b) {
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/Chunk.hx:158: characters 5-23
		return Chunk_Impl_::concat($a, $b);
	}

	/**
	 * @param ChunkObject $this
	 * @param ChunkObject $that
	 * 
	 * @return ChunkObject
	 */
	public static function concat ($this1, $that) {
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/Chunk.hx:95: characters 28-39
		$_g = $that->getLength();
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/Chunk.hx:95: characters 20-26
		if ($this1->getLength() === 0) {
			#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/Chunk.hx:95: characters 28-39
			if ($_g === 0) {
				#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/Chunk.hx:96: characters 20-25
				return Chunk_Impl_::$EMPTY;
			} else {
				#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/Chunk.hx:97: characters 20-24
				return $that;
			}
		} else if ($_g === 0) {
			#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/Chunk.hx:98: characters 20-24
			return $this1;
		} else {
			#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/Chunk.hx:99: characters 15-44
			return new CompoundChunk($this1, $that);
		}
	}

	/**
	 * @param \Array_hx $chunks
	 * 
	 * @return ChunkObject
	 */
	public static function join ($chunks) {
		#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/Chunk.hx:129: lines 129-137
		if ($chunks === null) {
			#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/Chunk.hx:130: characters 23-28
			return Chunk_Impl_::$EMPTY;
		} else {
			#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/Chunk.hx:129: characters 19-25
			$__hx__switch = ($chunks->length);
			if ($__hx__switch === 0) {
				#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/Chunk.hx:130: characters 23-28
				return Chunk_Impl_::$EMPTY;
			} else if ($__hx__switch === 1) {
				#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/Chunk.hx:131: characters 13-14
				$v = ($chunks->arr[0] ?? null);
				#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/Chunk.hx:131: characters 17-18
				return $v;
			} else {
				#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/Chunk.hx:132: characters 12-13
				$v1 = $chunks;
				#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/Chunk.hx:133: characters 9-31
				$ret = Chunk_Impl_::catChunk(($v1->arr[0] ?? null), ($v1->arr[1] ?? null));
				#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/Chunk.hx:134: lines 134-135
				$_g = 2;
				$_g1 = $v1->length;
				while ($_g < $_g1) {
					$i = $_g++;
					#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/Chunk.hx:135: characters 11-27
					$ret = Chunk_Impl_::catChunk($ret, ($v1->arr[$i] ?? null));
				}

				#/home/jahred/haxelib/tink_chunk/0,3,0/src/tink/Chunk.hx:136: characters 9-12
				return $ret;
			}
		}
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$EMPTY = new EmptyChunk();
	}
}

Boot::registerClass(Chunk_Impl_::class, 'tink._Chunk.Chunk_Impl_');
Chunk_Impl_::__hx__init();
