// Generated by Haxe 4.0.2
#ifndef INCLUDED_tink_core_FutureTrigger
#define INCLUDED_tink_core_FutureTrigger

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_tink_core__Future_FutureObject
#include <tink/core/_Future/FutureObject.h>
#endif
HX_DECLARE_CLASS2(tink,core,FutureTrigger)
HX_DECLARE_CLASS2(tink,core,LinkObject)
HX_DECLARE_CLASS3(tink,core,_Callback,ListCell)
HX_DECLARE_CLASS3(tink,core,_Future,FutureObject)

namespace tink{
namespace core{


class HXCPP_CLASS_ATTRIBUTES FutureTrigger_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef FutureTrigger_obj OBJ_;
		FutureTrigger_obj();

	public:
		enum { _hx_ClassId = 0x5c33d4e4 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="tink.core.FutureTrigger")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"tink.core.FutureTrigger"); }
		static hx::ObjectPtr< FutureTrigger_obj > __new();
		static hx::ObjectPtr< FutureTrigger_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FutureTrigger_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::Dynamic eager_73f727cb();

		::Dynamic gather_73f727cb();
		::String __ToString() const { return HX_("FutureTrigger",15,13,89,d9); }

		static ::Dynamic gatherFuture(::Dynamic f);
		static ::Dynamic gatherFuture_dyn();

		 ::Dynamic result;
		::Array< ::Dynamic> list;
		virtual ::Dynamic handle( ::Dynamic callback);
		::Dynamic handle_dyn();

		virtual ::Dynamic map( ::Dynamic f);
		::Dynamic map_dyn();

		virtual ::Dynamic flatMap( ::Dynamic f);
		::Dynamic flatMap_dyn();

		 ::tink::core::FutureTrigger gather();
		::Dynamic gather_dyn();

		virtual  ::tink::core::FutureTrigger eager();
		::Dynamic eager_dyn();

		bool trigger( ::Dynamic result);
		::Dynamic trigger_dyn();

};

} // end namespace tink
} // end namespace core

#endif /* INCLUDED_tink_core_FutureTrigger */ 
