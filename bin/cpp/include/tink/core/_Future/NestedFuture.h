// Generated by Haxe 4.0.2
#ifndef INCLUDED_tink_core__Future_NestedFuture
#define INCLUDED_tink_core__Future_NestedFuture

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_tink_core__Future_FutureObject
#include <tink/core/_Future/FutureObject.h>
#endif
HX_DECLARE_CLASS2(tink,core,LinkObject)
HX_DECLARE_CLASS3(tink,core,_Future,FutureObject)
HX_DECLARE_CLASS3(tink,core,_Future,NestedFuture)

namespace tink{
namespace core{
namespace _Future{


class HXCPP_CLASS_ATTRIBUTES NestedFuture_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef NestedFuture_obj OBJ_;
		NestedFuture_obj();

	public:
		enum { _hx_ClassId = 0x6b8a73cb };

		void __construct(::Dynamic outer);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="tink.core._Future.NestedFuture")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"tink.core._Future.NestedFuture"); }
		static hx::ObjectPtr< NestedFuture_obj > __new(::Dynamic outer);
		static hx::ObjectPtr< NestedFuture_obj > __alloc(hx::Ctx *_hx_ctx,::Dynamic outer);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~NestedFuture_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("NestedFuture",ba,9a,17,4e); }

		::Dynamic outer;
		::Dynamic gathered;
		::Dynamic map( ::Dynamic f);
		::Dynamic map_dyn();

		::Dynamic flatMap( ::Dynamic f);
		::Dynamic flatMap_dyn();

		::Dynamic gather();
		::Dynamic gather_dyn();

		::Dynamic eager();
		::Dynamic eager_dyn();

		::Dynamic handle( ::Dynamic cb);
		::Dynamic handle_dyn();

};

} // end namespace tink
} // end namespace core
} // end namespace _Future

#endif /* INCLUDED_tink_core__Future_NestedFuture */ 
