// Generated by Haxe 4.0.2
#ifndef INCLUDED_civo_Kubernetes
#define INCLUDED_civo_Kubernetes

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(civo,Kubernetes)

namespace civo{


class HXCPP_CLASS_ATTRIBUTES Kubernetes_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Kubernetes_obj OBJ_;
		Kubernetes_obj();

	public:
		enum { _hx_ClassId = 0x6e3deac5 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="civo.Kubernetes")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"civo.Kubernetes"); }

		inline static hx::ObjectPtr< Kubernetes_obj > __new() {
			hx::ObjectPtr< Kubernetes_obj > __this = new Kubernetes_obj();
			__this->__construct();
			return __this;
		}

		inline static hx::ObjectPtr< Kubernetes_obj > __alloc(hx::Ctx *_hx_ctx) {
			Kubernetes_obj *__this = (Kubernetes_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Kubernetes_obj), false, "civo.Kubernetes"));
			*(void **)__this = Kubernetes_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Kubernetes_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Kubernetes",26,82,4b,39); }

		static void __boot();
		static ::String path;
		static ::String apps;
		static void create(::String token, ::Dynamic params, ::Dynamic handler);
		static ::Dynamic create_dyn();

		static void list(::String token, ::Dynamic handler);
		static ::Dynamic list_dyn();

		static void get(::String token,::String kubernetes_id, ::Dynamic handler);
		static ::Dynamic get_dyn();

		static void update(::String token,::String kubernetes_id, ::Dynamic params, ::Dynamic handler);
		static ::Dynamic update_dyn();

		static void applications(::String token, ::Dynamic handler);
		static ::Dynamic applications_dyn();

		static void _hx_delete(::String token,::String kubernetes_id, ::Dynamic handler);
		static ::Dynamic _hx_delete_dyn();

		static void recycle(::String token,::String kubernetes_id,::String hostname, ::Dynamic handler);
		static ::Dynamic recycle_dyn();

};

} // end namespace civo

#endif /* INCLUDED_civo_Kubernetes */ 
