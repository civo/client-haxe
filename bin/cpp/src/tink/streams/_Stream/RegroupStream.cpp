// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ds_Option
#include <haxe/ds/Option.h>
#endif
#ifndef INCLUDED_tink_core_TypedError
#include <tink/core/TypedError.h>
#endif
#ifndef INCLUDED_tink_core__Future_FutureObject
#include <tink/core/_Future/FutureObject.h>
#endif
#ifndef INCLUDED_tink_core__Lazy_LazyFunc
#include <tink/core/_Lazy/LazyFunc.h>
#endif
#ifndef INCLUDED_tink_core__Lazy_LazyObject
#include <tink/core/_Lazy/LazyObject.h>
#endif
#ifndef INCLUDED_tink_streams_Conclusion
#include <tink/streams/Conclusion.h>
#endif
#ifndef INCLUDED_tink_streams_Empty
#include <tink/streams/Empty.h>
#endif
#ifndef INCLUDED_tink_streams_Handled
#include <tink/streams/Handled.h>
#endif
#ifndef INCLUDED_tink_streams_RegroupResult
#include <tink/streams/RegroupResult.h>
#endif
#ifndef INCLUDED_tink_streams_RegroupStatus
#include <tink/streams/RegroupStatus.h>
#endif
#ifndef INCLUDED_tink_streams_StreamBase
#include <tink/streams/StreamBase.h>
#endif
#ifndef INCLUDED_tink_streams_StreamObject
#include <tink/streams/StreamObject.h>
#endif
#ifndef INCLUDED_tink_streams__Stream_CloggedStream
#include <tink/streams/_Stream/CloggedStream.h>
#endif
#ifndef INCLUDED_tink_streams__Stream_CompoundStream
#include <tink/streams/_Stream/CompoundStream.h>
#endif
#ifndef INCLUDED_tink_streams__Stream_Handler_Impl_
#include <tink/streams/_Stream/Handler_Impl_.h>
#endif
#ifndef INCLUDED_tink_streams__Stream_RegroupStream
#include <tink/streams/_Stream/RegroupStream.h>
#endif
#ifndef INCLUDED_tink_streams__Stream_Stream_Impl_
#include <tink/streams/_Stream/Stream_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_466eda33af4d343c_105_new,"tink.streams._Stream.RegroupStream","new",0xb54b0478,"tink.streams._Stream.RegroupStream.new","tink/streams/Stream.hx",105,0x006f1625)
HX_DEFINE_STACK_FRAME(_hx_pos_466eda33af4d343c_103_new,"tink.streams._Stream.RegroupStream","new",0xb54b0478,"tink.streams._Stream.RegroupStream.new","tink/streams/Stream.hx",103,0x006f1625)
HX_DEFINE_STACK_FRAME(_hx_pos_466eda33af4d343c_118_new,"tink.streams._Stream.RegroupStream","new",0xb54b0478,"tink.streams._Stream.RegroupStream.new","tink/streams/Stream.hx",118,0x006f1625)
HX_DEFINE_STACK_FRAME(_hx_pos_466eda33af4d343c_122_new,"tink.streams._Stream.RegroupStream","new",0xb54b0478,"tink.streams._Stream.RegroupStream.new","tink/streams/Stream.hx",122,0x006f1625)
HX_DEFINE_STACK_FRAME(_hx_pos_466eda33af4d343c_97_new,"tink.streams._Stream.RegroupStream","new",0xb54b0478,"tink.streams._Stream.RegroupStream.new","tink/streams/Stream.hx",97,0x006f1625)
static const bool _hx_array_data_f4e9a886_5[] = {
	0,
};
namespace tink{
namespace streams{
namespace _Stream{

void RegroupStream_obj::__construct(::Dynamic source, ::Dynamic f,::Dynamic prev){
            		HX_BEGIN_LOCAL_FUNC_S4(hx::LocalFunc,_hx_Closure_1, ::Dynamic,f,::Array< ::Dynamic>,ret,::Array< bool >,terminated,::cpp::VirtualArray,buf) HXARGC(1)
            		::Dynamic _hx_run( ::Dynamic item){
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::Array< bool >,terminated,::Array< ::Dynamic>,ret) HXARGC(1)
            			 ::tink::streams::Handled _hx_run( ::tink::streams::RegroupResult o){
            				HX_GC_STACKFRAME(&_hx_pos_466eda33af4d343c_105_new)
HXLINE( 105)				switch((int)(o->_hx_getIndex())){
            					case (int)0: {
HXLINE( 106)						::Dynamic v = o->_hx_getObject(0);
HXLINE( 107)						ret[0] = v;
HXLINE( 108)						return ::tink::streams::Handled_obj::Finish_dyn();
            					}
            					break;
            					case (int)1: {
HXLINE( 109)						 ::haxe::ds::Option v1 = o->_hx_getObject(0).StaticCast<  ::haxe::ds::Option >();
HXLINE( 110)						::Dynamic l =  ::tink::core::_Lazy::LazyFunc_obj::__alloc( HX_CTX ,::tink::streams::Empty_obj::make_dyn());
HXDLIN( 110)						::Dynamic ret3;
HXDLIN( 110)						if ((v1->_hx_getIndex() == 0)) {
HXLINE( 110)							::Dynamic v2 = v1->_hx_getObject(0);
HXDLIN( 110)							ret3 = v2;
            						}
            						else {
HXLINE( 110)							ret3 = ::tink::core::_Lazy::LazyObject_obj::get(l);
            						}
HXDLIN( 110)						ret[0] = ret3;
HXLINE( 111)						terminated[0] = true;
HXLINE( 112)						return ::tink::streams::Handled_obj::Finish_dyn();
            					}
            					break;
            					case (int)2: {
HXLINE( 114)						return ::tink::streams::Handled_obj::Resume_dyn();
            					}
            					break;
            					case (int)3: {
HXLINE( 115)						 ::tink::core::TypedError e = o->_hx_getObject(0).StaticCast<  ::tink::core::TypedError >();
HXLINE( 116)						return ::tink::streams::Handled_obj::Clog(e);
            					}
            					break;
            				}
HXLINE( 105)				return null();
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_STACKFRAME(&_hx_pos_466eda33af4d343c_103_new)
HXLINE( 104)			buf->push(item);
HXLINE( 105)			::Dynamic ret2 = ::tink::core::_Future::FutureObject_obj::map(f->__Field(HX_("apply",6e,85,3b,24),hx::paccDynamic)(buf,::tink::streams::RegroupStatus_obj::Flowing_dyn()), ::Dynamic(new _hx_Closure_0(terminated,ret)));
HXDLIN( 105)			return ::tink::core::_Future::FutureObject_obj::gather(ret2);
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S4(hx::LocalFunc,_hx_Closure_3, ::Dynamic,f,::Array< ::Dynamic>,ret,::Array< bool >,terminated,::cpp::VirtualArray,buf) HXARGC(1)
            		::Dynamic _hx_run( ::tink::streams::Conclusion o1){
            			HX_GC_STACKFRAME(&_hx_pos_466eda33af4d343c_118_new)
HXLINE( 118)			switch((int)(o1->_hx_getIndex())){
            				case (int)0: {
HXLINE( 128)					if (terminated->__get(0)) {
HXLINE( 128)						return ret->__get(0);
            					}
            					else {
HXLINE( 129)						::Dynamic rest = o1->_hx_getObject(0);
HXDLIN( 129)						return  ::tink::streams::_Stream::RegroupStream_obj::__alloc( HX_CTX ,rest,f,ret->__get(0));
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 130)					::Dynamic rest1 = o1->_hx_getObject(1);
HXDLIN( 130)					 ::tink::core::TypedError e1 = o1->_hx_getObject(0).StaticCast<  ::tink::core::TypedError >();
HXDLIN( 130)					return  ::tink::streams::_Stream::CloggedStream_obj::__alloc( HX_CTX ,::tink::streams::_Stream::Stream_Impl__obj::ofError(e1),( ( ::tink::core::TypedError)(rest1) ));
            				}
            				break;
            				case (int)2: {
HXLINE( 119)					 ::tink::core::TypedError e2 = o1->_hx_getObject(0).StaticCast<  ::tink::core::TypedError >();
HXDLIN( 119)					return ::tink::streams::_Stream::Stream_Impl__obj::ofError(e2);
            				}
            				break;
            				case (int)3: {
HXLINE( 120)					if ((buf->get_length() == 0)) {
HXLINE( 120)						return ::tink::streams::Empty_obj::inst;
            					}
            					else {
            						HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            						::Dynamic _hx_run( ::tink::streams::RegroupResult o2){
            							HX_GC_STACKFRAME(&_hx_pos_466eda33af4d343c_122_new)
HXLINE( 122)							switch((int)(o2->_hx_getIndex())){
            								case (int)0: {
HXLINE( 123)									::Dynamic v3 = o2->_hx_getObject(0);
HXDLIN( 123)									return v3;
            								}
            								break;
            								case (int)1: {
HXLINE( 124)									 ::haxe::ds::Option v4 = o2->_hx_getObject(0).StaticCast<  ::haxe::ds::Option >();
HXDLIN( 124)									::Dynamic l1 =  ::tink::core::_Lazy::LazyFunc_obj::__alloc( HX_CTX ,::tink::streams::Empty_obj::make_dyn());
HXDLIN( 124)									if ((v4->_hx_getIndex() == 0)) {
HXLINE( 124)										::Dynamic v5 = v4->_hx_getObject(0);
HXDLIN( 124)										return v5;
            									}
            									else {
HXLINE( 124)										return ::tink::core::_Lazy::LazyObject_obj::get(l1);
            									}
            								}
            								break;
            								case (int)2: {
HXLINE( 125)									return ::tink::streams::Empty_obj::inst;
            								}
            								break;
            								case (int)3: {
HXLINE( 126)									 ::tink::core::TypedError e3 = o2->_hx_getObject(0).StaticCast<  ::tink::core::TypedError >();
HXDLIN( 126)									return ::tink::streams::_Stream::Stream_Impl__obj::ofError(e3);
            								}
            								break;
            							}
HXLINE( 122)							return null();
            						}
            						HX_END_LOCAL_FUNC1(return)

HXLINE( 122)						::Dynamic ret4 = ::tink::core::_Future::FutureObject_obj::map(f->__Field(HX_("apply",6e,85,3b,24),hx::paccDynamic)(buf,::tink::streams::RegroupStatus_obj::Ended_dyn()), ::Dynamic(new _hx_Closure_2()));
HXDLIN( 122)						return ::tink::streams::_Stream::Stream_Impl__obj::flatten(::tink::core::_Future::FutureObject_obj::gather(ret4));
            					}
            				}
            				break;
            			}
HXLINE( 118)			return null();
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_466eda33af4d343c_97_new)
HXLINE(  98)		if (hx::IsNull( prev )) {
HXLINE(  98)			prev = ::tink::streams::Empty_obj::inst;
            		}
HXLINE( 100)		::Array< ::Dynamic> ret = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE( 101)		::Array< bool > terminated = ::Array_obj< bool >::fromData( _hx_array_data_f4e9a886_5,1);
HXLINE( 102)		::cpp::VirtualArray buf = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 103)		::Dynamic ret1 = ::tink::core::_Future::FutureObject_obj::map(::tink::streams::StreamObject_obj::forEach(source,::tink::streams::_Stream::Handler_Impl__obj::ofUnknown( ::Dynamic(new _hx_Closure_1(f,ret,terminated,buf)))), ::Dynamic(new _hx_Closure_3(f,ret,terminated,buf)));
HXDLIN( 103)		::Dynamic next = ::tink::streams::_Stream::Stream_Impl__obj::flatten(::tink::core::_Future::FutureObject_obj::gather(ret1));
HXLINE( 134)		super::__construct(::Array_obj< ::Dynamic>::__new(2)->init(0,prev)->init(1,next));
            	}

Dynamic RegroupStream_obj::__CreateEmpty() { return new RegroupStream_obj; }

void *RegroupStream_obj::_hx_vtable = 0;

Dynamic RegroupStream_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< RegroupStream_obj > _hx_result = new RegroupStream_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool RegroupStream_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0e8c5e2e) {
		if (inClassId<=(int)0x056405ce) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x056405ce;
		} else {
			return inClassId==(int)0x0e8c5e2e;
		}
	} else {
		return inClassId==(int)0x3a1bb951;
	}
}


hx::ObjectPtr< RegroupStream_obj > RegroupStream_obj::__new(::Dynamic source, ::Dynamic f,::Dynamic prev) {
	hx::ObjectPtr< RegroupStream_obj > __this = new RegroupStream_obj();
	__this->__construct(source,f,prev);
	return __this;
}

hx::ObjectPtr< RegroupStream_obj > RegroupStream_obj::__alloc(hx::Ctx *_hx_ctx,::Dynamic source, ::Dynamic f,::Dynamic prev) {
	RegroupStream_obj *__this = (RegroupStream_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(RegroupStream_obj), true, "tink.streams._Stream.RegroupStream"));
	*(void **)__this = RegroupStream_obj::_hx_vtable;
	__this->__construct(source,f,prev);
	return __this;
}

RegroupStream_obj::RegroupStream_obj()
{
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *RegroupStream_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *RegroupStream_obj_sStaticStorageInfo = 0;
#endif

hx::Class RegroupStream_obj::__mClass;

void RegroupStream_obj::__register()
{
	RegroupStream_obj _hx_dummy;
	RegroupStream_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("tink.streams._Stream.RegroupStream",86,a8,e9,f4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< RegroupStream_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RegroupStream_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RegroupStream_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace tink
} // end namespace streams
} // end namespace _Stream
