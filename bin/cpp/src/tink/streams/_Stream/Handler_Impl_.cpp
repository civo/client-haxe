// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_tink_core__Future_FutureObject
#include <tink/core/_Future/FutureObject.h>
#endif
#ifndef INCLUDED_tink_streams__Stream_Handler_Impl_
#include <tink/streams/_Stream/Handler_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_815929985b86a838_492_ofUnknown,"tink.streams._Stream.Handler_Impl_","ofUnknown",0x42579a69,"tink.streams._Stream.Handler_Impl_.ofUnknown","tink/streams/Stream.hx",492,0x006f1625)
namespace tink{
namespace streams{
namespace _Stream{

void Handler_Impl__obj::__construct() { }

Dynamic Handler_Impl__obj::__CreateEmpty() { return new Handler_Impl__obj; }

void *Handler_Impl__obj::_hx_vtable = 0;

Dynamic Handler_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Handler_Impl__obj > _hx_result = new Handler_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Handler_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x31c51288;
}

 ::Dynamic Handler_Impl__obj::ofUnknown( ::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_815929985b86a838_492_ofUnknown)
HXDLIN( 492)		 ::Dynamic this1 = f;
HXDLIN( 492)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Handler_Impl__obj,ofUnknown,return )


Handler_Impl__obj::Handler_Impl__obj()
{
}

bool Handler_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"ofUnknown") ) { outValue = ofUnknown_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Handler_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Handler_Impl__obj_sStaticStorageInfo = 0;
#endif

hx::Class Handler_Impl__obj::__mClass;

static ::String Handler_Impl__obj_sStaticFields[] = {
	HX_("ofUnknown",33,4b,92,ef),
	::String(null())
};

void Handler_Impl__obj::__register()
{
	Handler_Impl__obj _hx_dummy;
	Handler_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("tink.streams._Stream.Handler_Impl_",24,b0,60,84);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Handler_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Handler_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Handler_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Handler_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Handler_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace tink
} // end namespace streams
} // end namespace _Stream
