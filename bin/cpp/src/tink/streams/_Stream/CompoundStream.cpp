// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_tink_core_LinkObject
#include <tink/core/LinkObject.h>
#endif
#ifndef INCLUDED_tink_core_TypedError
#include <tink/core/TypedError.h>
#endif
#ifndef INCLUDED_tink_core__Future_FutureObject
#include <tink/core/_Future/FutureObject.h>
#endif
#ifndef INCLUDED_tink_core__Future_Future_Impl_
#include <tink/core/_Future/Future_Impl_.h>
#endif
#ifndef INCLUDED_tink_streams_Conclusion
#include <tink/streams/Conclusion.h>
#endif
#ifndef INCLUDED_tink_streams_Empty
#include <tink/streams/Empty.h>
#endif
#ifndef INCLUDED_tink_streams_StreamBase
#include <tink/streams/StreamBase.h>
#endif
#ifndef INCLUDED_tink_streams_StreamObject
#include <tink/streams/StreamObject.h>
#endif
#ifndef INCLUDED_tink_streams__Stream_CompoundStream
#include <tink/streams/_Stream/CompoundStream.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_354245b0a59af6d5_557_new,"tink.streams._Stream.CompoundStream","new",0x3c526e43,"tink.streams._Stream.CompoundStream.new","tink/streams/Stream.hx",557,0x006f1625)
HX_LOCAL_STACK_FRAME(_hx_pos_354245b0a59af6d5_560_get_depleted,"tink.streams._Stream.CompoundStream","get_depleted",0x30ee2a91,"tink.streams._Stream.CompoundStream.get_depleted","tink/streams/Stream.hx",560,0x006f1625)
HX_LOCAL_STACK_FRAME(_hx_pos_354245b0a59af6d5_579_decompose,"tink.streams._Stream.CompoundStream","decompose",0x52826dd4,"tink.streams._Stream.CompoundStream.decompose","tink/streams/Stream.hx",579,0x006f1625)
HX_LOCAL_STACK_FRAME(_hx_pos_354245b0a59af6d5_583_forEach,"tink.streams._Stream.CompoundStream","forEach",0x74c4f50d,"tink.streams._Stream.CompoundStream.forEach","tink/streams/Stream.hx",583,0x006f1625)
HX_LOCAL_STACK_FRAME(_hx_pos_354245b0a59af6d5_585_consumeParts,"tink.streams._Stream.CompoundStream","consumeParts",0xbcf7cb81,"tink.streams._Stream.CompoundStream.consumeParts","tink/streams/Stream.hx",585,0x006f1625)
HX_LOCAL_STACK_FRAME(_hx_pos_354245b0a59af6d5_589_consumeParts,"tink.streams._Stream.CompoundStream","consumeParts",0xbcf7cb81,"tink.streams._Stream.CompoundStream.consumeParts","tink/streams/Stream.hx",589,0x006f1625)
HX_LOCAL_STACK_FRAME(_hx_pos_354245b0a59af6d5_617_of,"tink.streams._Stream.CompoundStream","of",0xc4935094,"tink.streams._Stream.CompoundStream.of","tink/streams/Stream.hx",617,0x006f1625)
namespace tink{
namespace streams{
namespace _Stream{

void CompoundStream_obj::__construct(::Array< ::Dynamic> parts){
            	HX_STACKFRAME(&_hx_pos_354245b0a59af6d5_557_new)
HXDLIN( 557)		super::__construct();
HXDLIN( 557)		this->parts = parts;
            	}

Dynamic CompoundStream_obj::__CreateEmpty() { return new CompoundStream_obj; }

void *CompoundStream_obj::_hx_vtable = 0;

Dynamic CompoundStream_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CompoundStream_obj > _hx_result = new CompoundStream_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool CompoundStream_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0e8c5e2e) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0e8c5e2e;
	} else {
		return inClassId==(int)0x3a1bb951;
	}
}

bool CompoundStream_obj::get_depleted(){
            	HX_STACKFRAME(&_hx_pos_354245b0a59af6d5_560_get_depleted)
HXDLIN( 560)		switch((int)(this->parts->length)){
            			case (int)0: {
HXLINE( 561)				return true;
            			}
            			break;
            			case (int)1: {
HXLINE( 562)				return ::tink::streams::StreamObject_obj::get_depleted(this->parts->__get(0));
            			}
            			break;
            			default:{
HXLINE( 563)				return false;
            			}
            		}
HXLINE( 560)		return false;
            	}


void CompoundStream_obj::decompose(::Array< ::Dynamic> into){
            	HX_STACKFRAME(&_hx_pos_354245b0a59af6d5_579_decompose)
HXDLIN( 579)		int _g = 0;
HXDLIN( 579)		::Array< ::Dynamic> _g1 = this->parts;
HXDLIN( 579)		while((_g < _g1->length)){
HXDLIN( 579)			::Dynamic p = _g1->__get(_g);
HXDLIN( 579)			_g = (_g + 1);
HXLINE( 580)			::tink::streams::StreamObject_obj::decompose(p,into);
            		}
            	}


::Dynamic CompoundStream_obj::forEach( ::Dynamic handler){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,parts, ::Dynamic,handler1) HXARGC(1)
            		void _hx_run( ::Dynamic cb){
            			HX_STACKFRAME(&_hx_pos_354245b0a59af6d5_583_forEach)
HXDLIN( 583)			::tink::streams::_Stream::CompoundStream_obj::consumeParts(parts,handler1,cb);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_354245b0a59af6d5_583_forEach)
HXDLIN( 583)		::Array< ::Dynamic> parts = this->parts;
HXDLIN( 583)		 ::Dynamic handler1 = handler;
HXDLIN( 583)		return ::tink::core::_Future::Future_Impl__obj::async( ::Dynamic(new _hx_Closure_0(parts,handler1)),null());
            	}


void CompoundStream_obj::consumeParts(::Array< ::Dynamic> parts, ::Dynamic handler, ::Dynamic cb){
            	HX_STACKFRAME(&_hx_pos_354245b0a59af6d5_585_consumeParts)
HXDLIN( 585)		::Array< ::Dynamic> parts1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,parts);
HXLINE( 586)		if ((parts1->__get(0).StaticCast< ::Array< ::Dynamic> >()->length == 0)) {
HXLINE( 587)			cb(::tink::streams::Conclusion_obj::Depleted_dyn());
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,parts1, ::Dynamic,handler, ::Dynamic,cb) HXARGC(1)
            			void _hx_run( ::tink::streams::Conclusion o){
            				HX_GC_STACKFRAME(&_hx_pos_354245b0a59af6d5_589_consumeParts)
HXLINE( 589)				switch((int)(o->_hx_getIndex())){
            					case (int)0: {
HXLINE( 594)						::Dynamic rest = o->_hx_getObject(0);
HXDLIN( 594)						{
HXLINE( 596)							::Array< ::Dynamic> _hx_tmp = parts1->__get(0).StaticCast< ::Array< ::Dynamic> >()->copy();
HXDLIN( 596)							parts1[0] = _hx_tmp;
HXLINE( 597)							parts1->__get(0).StaticCast< ::Array< ::Dynamic> >()[0] = rest;
HXLINE( 598)							 ::tink::streams::Conclusion _hx_tmp1 = ::tink::streams::Conclusion_obj::Halted( ::tink::streams::_Stream::CompoundStream_obj::__alloc( HX_CTX ,parts1->__get(0).StaticCast< ::Array< ::Dynamic> >()));
HXDLIN( 598)							cb(_hx_tmp1);
            						}
            					}
            					break;
            					case (int)1: {
HXLINE( 600)						::Dynamic at = o->_hx_getObject(1);
HXDLIN( 600)						 ::tink::core::TypedError e = o->_hx_getObject(0).StaticCast<  ::tink::core::TypedError >();
HXDLIN( 600)						{
HXLINE( 602)							if (::tink::streams::StreamObject_obj::get_depleted(at)) {
HXLINE( 603)								::Array< ::Dynamic> _hx_tmp2 = parts1->__get(0).StaticCast< ::Array< ::Dynamic> >()->slice(1,null());
HXDLIN( 603)								parts1[0] = _hx_tmp2;
            							}
            							else {
HXLINE( 605)								::Array< ::Dynamic> _hx_tmp3 = parts1->__get(0).StaticCast< ::Array< ::Dynamic> >()->copy();
HXDLIN( 605)								parts1[0] = _hx_tmp3;
HXLINE( 606)								parts1->__get(0).StaticCast< ::Array< ::Dynamic> >()[0] = at;
            							}
HXLINE( 609)							 ::tink::streams::Conclusion _hx_tmp4 = ::tink::streams::Conclusion_obj::Clogged(e, ::tink::streams::_Stream::CompoundStream_obj::__alloc( HX_CTX ,parts1->__get(0).StaticCast< ::Array< ::Dynamic> >()));
HXDLIN( 609)							cb(_hx_tmp4);
            						}
            					}
            					break;
            					case (int)2: {
HXLINE( 611)						 ::tink::core::TypedError e1 = o->_hx_getObject(0).StaticCast<  ::tink::core::TypedError >();
HXLINE( 613)						cb(::tink::streams::Conclusion_obj::Failed(e1));
            					}
            					break;
            					case (int)3: {
HXLINE( 592)						::Array< ::Dynamic> _hx_tmp5 = parts1->__get(0).StaticCast< ::Array< ::Dynamic> >()->slice(1,null());
HXDLIN( 592)						::tink::streams::_Stream::CompoundStream_obj::consumeParts(_hx_tmp5,handler,cb);
            					}
            					break;
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 589)			::tink::core::_Future::FutureObject_obj::handle(::tink::streams::StreamObject_obj::forEach(parts1->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(0),handler), ::Dynamic(new _hx_Closure_0(parts1,handler,cb)));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(CompoundStream_obj,consumeParts,(void))

::Dynamic CompoundStream_obj::of(::Array< ::Dynamic> streams){
            	HX_GC_STACKFRAME(&_hx_pos_354245b0a59af6d5_617_of)
HXLINE( 619)		::Array< ::Dynamic> ret = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 621)		{
HXLINE( 621)			int _g = 0;
HXDLIN( 621)			while((_g < streams->length)){
HXLINE( 621)				::Dynamic s = streams->__get(_g);
HXDLIN( 621)				_g = (_g + 1);
HXLINE( 622)				::tink::streams::StreamObject_obj::decompose(s,ret);
            			}
            		}
HXLINE( 625)		if ((ret->length == 0)) {
HXLINE( 625)			return ::tink::streams::Empty_obj::inst;
            		}
            		else {
HXLINE( 626)			return  ::tink::streams::_Stream::CompoundStream_obj::__alloc( HX_CTX ,ret);
            		}
HXLINE( 625)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CompoundStream_obj,of,return )


hx::ObjectPtr< CompoundStream_obj > CompoundStream_obj::__new(::Array< ::Dynamic> parts) {
	hx::ObjectPtr< CompoundStream_obj > __this = new CompoundStream_obj();
	__this->__construct(parts);
	return __this;
}

hx::ObjectPtr< CompoundStream_obj > CompoundStream_obj::__alloc(hx::Ctx *_hx_ctx,::Array< ::Dynamic> parts) {
	CompoundStream_obj *__this = (CompoundStream_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CompoundStream_obj), true, "tink.streams._Stream.CompoundStream"));
	*(void **)__this = CompoundStream_obj::_hx_vtable;
	__this->__construct(parts);
	return __this;
}

CompoundStream_obj::CompoundStream_obj()
{
}

void CompoundStream_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CompoundStream);
	HX_MARK_MEMBER_NAME(parts,"parts");
	HX_MARK_END_CLASS();
}

void CompoundStream_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(parts,"parts");
}

hx::Val CompoundStream_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"parts") ) { return hx::Val( parts ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"forEach") ) { return hx::Val( forEach_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"decompose") ) { return hx::Val( decompose_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_depleted") ) { return hx::Val( get_depleted_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool CompoundStream_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"of") ) { outValue = of_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"consumeParts") ) { outValue = consumeParts_dyn(); return true; }
	}
	return false;
}

hx::Val CompoundStream_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"parts") ) { parts=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CompoundStream_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("parts",20,91,55,bd));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo CompoundStream_obj_sMemberStorageInfo[] = {
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(CompoundStream_obj,parts),HX_("parts",20,91,55,bd)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *CompoundStream_obj_sStaticStorageInfo = 0;
#endif

static ::String CompoundStream_obj_sMemberFields[] = {
	HX_("parts",20,91,55,bd),
	HX_("get_depleted",d4,1c,20,af),
	HX_("decompose",b1,c3,a7,7a),
	HX_("forEach",aa,29,be,c4),
	::String(null()) };

hx::Class CompoundStream_obj::__mClass;

static ::String CompoundStream_obj_sStaticFields[] = {
	HX_("consumeParts",c4,bd,29,3b),
	HX_("of",17,61,00,00),
	::String(null())
};

void CompoundStream_obj::__register()
{
	CompoundStream_obj _hx_dummy;
	CompoundStream_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("tink.streams._Stream.CompoundStream",d1,90,cf,7f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CompoundStream_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(CompoundStream_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CompoundStream_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CompoundStream_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CompoundStream_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CompoundStream_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace tink
} // end namespace streams
} // end namespace _Stream
