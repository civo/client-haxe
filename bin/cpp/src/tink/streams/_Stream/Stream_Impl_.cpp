// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_tink_core_TypedError
#include <tink/core/TypedError.h>
#endif
#ifndef INCLUDED_tink_core__Future_FutureObject
#include <tink/core/_Future/FutureObject.h>
#endif
#ifndef INCLUDED_tink_core__Lazy_LazyConst
#include <tink/core/_Lazy/LazyConst.h>
#endif
#ifndef INCLUDED_tink_core__Lazy_LazyObject
#include <tink/core/_Lazy/LazyObject.h>
#endif
#ifndef INCLUDED_tink_streams_FutureStream
#include <tink/streams/FutureStream.h>
#endif
#ifndef INCLUDED_tink_streams_Single
#include <tink/streams/Single.h>
#endif
#ifndef INCLUDED_tink_streams_StreamBase
#include <tink/streams/StreamBase.h>
#endif
#ifndef INCLUDED_tink_streams_StreamObject
#include <tink/streams/StreamObject.h>
#endif
#ifndef INCLUDED_tink_streams__Stream_ErrorStream
#include <tink/streams/_Stream/ErrorStream.h>
#endif
#ifndef INCLUDED_tink_streams__Stream_Stream_Impl_
#include <tink/streams/_Stream/Stream_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_39c5ebc767f26d40_18_single,"tink.streams._Stream.Stream_Impl_","single",0xda3827d0,"tink.streams._Stream.Stream_Impl_.single","tink/streams/Stream.hx",18,0x006f1625)
HX_LOCAL_STACK_FRAME(_hx_pos_39c5ebc767f26d40_33_flatten,"tink.streams._Stream.Stream_Impl_","flatten",0xb9ce097c,"tink.streams._Stream.Stream_Impl_.flatten","tink/streams/Stream.hx",33,0x006f1625)
HX_LOCAL_STACK_FRAME(_hx_pos_39c5ebc767f26d40_59_ofError,"tink.streams._Stream.Stream_Impl_","ofError",0xa95ee4e9,"tink.streams._Stream.Stream_Impl_.ofError","tink/streams/Stream.hx",59,0x006f1625)
namespace tink{
namespace streams{
namespace _Stream{

void Stream_Impl__obj::__construct() { }

Dynamic Stream_Impl__obj::__CreateEmpty() { return new Stream_Impl__obj; }

void *Stream_Impl__obj::_hx_vtable = 0;

Dynamic Stream_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Stream_Impl__obj > _hx_result = new Stream_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Stream_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x760329de;
}

::Dynamic Stream_Impl__obj::single( ::Dynamic i){
            	HX_GC_STACKFRAME(&_hx_pos_39c5ebc767f26d40_18_single)
HXDLIN(  18)		return  ::tink::streams::Single_obj::__alloc( HX_CTX , ::tink::core::_Lazy::LazyConst_obj::__alloc( HX_CTX ,i));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Stream_Impl__obj,single,return )

::Dynamic Stream_Impl__obj::flatten(::Dynamic f){
            	HX_GC_STACKFRAME(&_hx_pos_39c5ebc767f26d40_33_flatten)
HXDLIN(  33)		return  ::tink::streams::FutureStream_obj::__alloc( HX_CTX ,f);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Stream_Impl__obj,flatten,return )

::Dynamic Stream_Impl__obj::ofError( ::tink::core::TypedError e){
            	HX_GC_STACKFRAME(&_hx_pos_39c5ebc767f26d40_59_ofError)
HXDLIN(  59)		return  ::tink::streams::_Stream::ErrorStream_obj::__alloc( HX_CTX ,e);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Stream_Impl__obj,ofError,return )


Stream_Impl__obj::Stream_Impl__obj()
{
}

bool Stream_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"single") ) { outValue = single_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"flatten") ) { outValue = flatten_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ofError") ) { outValue = ofError_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Stream_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Stream_Impl__obj_sStaticStorageInfo = 0;
#endif

hx::Class Stream_Impl__obj::__mClass;

static ::String Stream_Impl__obj_sStaticFields[] = {
	HX_("single",88,66,21,b9),
	HX_("flatten",c4,ab,fb,e6),
	HX_("ofError",31,87,8c,d6),
	::String(null())
};

void Stream_Impl__obj::__register()
{
	Stream_Impl__obj _hx_dummy;
	Stream_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("tink.streams._Stream.Stream_Impl_",26,46,36,13);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Stream_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Stream_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Stream_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Stream_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Stream_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace tink
} // end namespace streams
} // end namespace _Stream
