// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_tink_core_LinkObject
#include <tink/core/LinkObject.h>
#endif
#ifndef INCLUDED_tink_core_TypedError
#include <tink/core/TypedError.h>
#endif
#ifndef INCLUDED_tink_core__Future_FutureObject
#include <tink/core/_Future/FutureObject.h>
#endif
#ifndef INCLUDED_tink_core__Future_Future_Impl_
#include <tink/core/_Future/Future_Impl_.h>
#endif
#ifndef INCLUDED_tink_streams_Conclusion
#include <tink/streams/Conclusion.h>
#endif
#ifndef INCLUDED_tink_streams_Handled
#include <tink/streams/Handled.h>
#endif
#ifndef INCLUDED_tink_streams_Reduction
#include <tink/streams/Reduction.h>
#endif
#ifndef INCLUDED_tink_streams_ReductionStep
#include <tink/streams/ReductionStep.h>
#endif
#ifndef INCLUDED_tink_streams_StreamBase
#include <tink/streams/StreamBase.h>
#endif
#ifndef INCLUDED_tink_streams_StreamObject
#include <tink/streams/StreamObject.h>
#endif
#ifndef INCLUDED_tink_streams__Stream_CompoundStream
#include <tink/streams/_Stream/CompoundStream.h>
#endif
#ifndef INCLUDED_tink_streams__Stream_Handler_Impl_
#include <tink/streams/_Stream/Handler_Impl_.h>
#endif
#ifndef INCLUDED_tink_streams__Stream_RegroupStream
#include <tink/streams/_Stream/RegroupStream.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8f94e574d4603fbe_330_new,"tink.streams.StreamBase","new",0x386d305a,"tink.streams.StreamBase.new","tink/streams/Stream.hx",330,0x006f1625)
HX_LOCAL_STACK_FRAME(_hx_pos_8f94e574d4603fbe_333_get_depleted,"tink.streams.StreamBase","get_depleted",0x971bed9a,"tink.streams.StreamBase.get_depleted","tink/streams/Stream.hx",333,0x006f1625)
HX_LOCAL_STACK_FRAME(_hx_pos_8f94e574d4603fbe_363_regroup,"tink.streams.StreamBase","regroup",0x3c70eba6,"tink.streams.StreamBase.regroup","tink/streams/Stream.hx",363,0x006f1625)
HX_LOCAL_STACK_FRAME(_hx_pos_8f94e574d4603fbe_380_prepend,"tink.streams.StreamBase","prepend",0xf3c27c08,"tink.streams.StreamBase.prepend","tink/streams/Stream.hx",380,0x006f1625)
HX_LOCAL_STACK_FRAME(_hx_pos_8f94e574d4603fbe_389_decompose,"tink.streams.StreamBase","decompose",0x5e885b2b,"tink.streams.StreamBase.decompose","tink/streams/Stream.hx",389,0x006f1625)
HX_LOCAL_STACK_FRAME(_hx_pos_8f94e574d4603fbe_401_reduce,"tink.streams.StreamBase","reduce",0x8ca585ec,"tink.streams.StreamBase.reduce","tink/streams/Stream.hx",401,0x006f1625)
HX_LOCAL_STACK_FRAME(_hx_pos_8f94e574d4603fbe_400_reduce,"tink.streams.StreamBase","reduce",0x8ca585ec,"tink.streams.StreamBase.reduce","tink/streams/Stream.hx",400,0x006f1625)
HX_LOCAL_STACK_FRAME(_hx_pos_8f94e574d4603fbe_405_reduce,"tink.streams.StreamBase","reduce",0x8ca585ec,"tink.streams.StreamBase.reduce","tink/streams/Stream.hx",405,0x006f1625)
HX_LOCAL_STACK_FRAME(_hx_pos_8f94e574d4603fbe_399_reduce,"tink.streams.StreamBase","reduce",0x8ca585ec,"tink.streams.StreamBase.reduce","tink/streams/Stream.hx",399,0x006f1625)
HX_LOCAL_STACK_FRAME(_hx_pos_8f94e574d4603fbe_397_reduce,"tink.streams.StreamBase","reduce",0x8ca585ec,"tink.streams.StreamBase.reduce","tink/streams/Stream.hx",397,0x006f1625)
HX_LOCAL_STACK_FRAME(_hx_pos_8f94e574d4603fbe_414_forEach,"tink.streams.StreamBase","forEach",0x80a00ea4,"tink.streams.StreamBase.forEach","tink/streams/Stream.hx",414,0x006f1625)
namespace tink{
namespace streams{

void StreamBase_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_8f94e574d4603fbe_330_new)
            	}

Dynamic StreamBase_obj::__CreateEmpty() { return new StreamBase_obj; }

void *StreamBase_obj::_hx_vtable = 0;

Dynamic StreamBase_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< StreamBase_obj > _hx_result = new StreamBase_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool StreamBase_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0e8c5e2e;
}

static ::tink::streams::StreamObject_obj _hx_tink_streams_StreamBase__hx_tink_streams_StreamObject= {
	( bool (hx::Object::*)())&::tink::streams::StreamBase_obj::get_depleted,
	( ::Dynamic (hx::Object::*)( ::Dynamic))&::tink::streams::StreamBase_obj::regroup,
	( ::Dynamic (hx::Object::*)(::Dynamic))&::tink::streams::StreamBase_obj::prepend,
	( void (hx::Object::*)(::Array< ::Dynamic>))&::tink::streams::StreamBase_obj::decompose,
	( ::Dynamic (hx::Object::*)( ::Dynamic))&::tink::streams::StreamBase_obj::forEach,
	( ::Dynamic (hx::Object::*)( ::Dynamic, ::Dynamic))&::tink::streams::StreamBase_obj::reduce,
};

void *StreamBase_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x6164ac00: return &_hx_tink_streams_StreamBase__hx_tink_streams_StreamObject;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

bool StreamBase_obj::get_depleted(){
            	HX_STACKFRAME(&_hx_pos_8f94e574d4603fbe_333_get_depleted)
HXDLIN( 333)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(StreamBase_obj,get_depleted,return )

::Dynamic StreamBase_obj::regroup( ::Dynamic f){
            	HX_GC_STACKFRAME(&_hx_pos_8f94e574d4603fbe_363_regroup)
HXDLIN( 363)		return  ::tink::streams::_Stream::RegroupStream_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),f,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(StreamBase_obj,regroup,return )

::Dynamic StreamBase_obj::prepend(::Dynamic other){
            	HX_STACKFRAME(&_hx_pos_8f94e574d4603fbe_380_prepend)
HXDLIN( 380)		if (this->get_depleted()) {
HXDLIN( 380)			return other;
            		}
            		else {
HXLINE( 381)			return ::tink::streams::_Stream::CompoundStream_obj::of(::Array_obj< ::Dynamic>::__new(2)->init(0,other)->init(1,hx::ObjectPtr<OBJ_>(this)));
            		}
HXLINE( 380)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(StreamBase_obj,prepend,return )

void StreamBase_obj::decompose(::Array< ::Dynamic> into){
            	HX_STACKFRAME(&_hx_pos_8f94e574d4603fbe_389_decompose)
HXDLIN( 389)		if (!(this->get_depleted())) {
HXLINE( 390)			into->push(hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(StreamBase_obj,decompose,(void))

::Dynamic StreamBase_obj::reduce( ::Dynamic initial, ::Dynamic reducer){
            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_3, ::tink::streams::StreamBase,_gthis,::cpp::VirtualArray,initial1, ::Dynamic,reducer) HXARGC(1)
            		void _hx_run( ::Dynamic cb){
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1,::cpp::VirtualArray,initial1, ::Dynamic,reducer) HXARGC(1)
            			::Dynamic _hx_run( ::Dynamic item){
            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::cpp::VirtualArray,initial1) HXARGC(1)
            				 ::tink::streams::Handled _hx_run( ::tink::streams::ReductionStep o){
            					HX_STACKFRAME(&_hx_pos_8f94e574d4603fbe_401_reduce)
HXLINE( 401)					switch((int)(o->_hx_getIndex())){
            						case (int)0: {
HXLINE( 402)							 ::Dynamic v = o->_hx_getObject(0);
HXDLIN( 402)							initial1->set(0,v);
HXDLIN( 402)							return ::tink::streams::Handled_obj::Resume_dyn();
            						}
            						break;
            						case (int)1: {
HXLINE( 403)							 ::tink::core::TypedError e = o->_hx_getObject(0).StaticCast<  ::tink::core::TypedError >();
HXDLIN( 403)							return ::tink::streams::Handled_obj::Clog(e);
            						}
            						break;
            					}
HXLINE( 401)					return null();
            				}
            				HX_END_LOCAL_FUNC1(return)

            				HX_STACKFRAME(&_hx_pos_8f94e574d4603fbe_400_reduce)
HXLINE( 400)				::Dynamic ret = ::tink::core::_Future::FutureObject_obj::map(reducer(initial1->__get(0),item), ::Dynamic(new _hx_Closure_0(initial1)));
HXDLIN( 400)				return ::tink::core::_Future::FutureObject_obj::gather(ret);
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_2,::cpp::VirtualArray,initial1, ::Dynamic,cb) HXARGC(1)
            			void _hx_run( ::tink::streams::Conclusion c){
            				HX_STACKFRAME(&_hx_pos_8f94e574d4603fbe_405_reduce)
HXLINE( 405)				switch((int)(c->_hx_getIndex())){
            					case (int)0: {
HXLINE( 408)						::Dynamic _g3 = c->_hx_getObject(0);
HXDLIN( 408)						HX_STACK_DO_THROW(HX_("assert",c6,46,03,4c));
            					}
            					break;
            					case (int)1: {
HXLINE( 409)						::Dynamic rest = c->_hx_getObject(1);
HXDLIN( 409)						 ::tink::core::TypedError e1 = c->_hx_getObject(0).StaticCast<  ::tink::core::TypedError >();
HXDLIN( 409)						cb(::tink::streams::Reduction_obj::Crashed(e1,rest));
            					}
            					break;
            					case (int)2: {
HXLINE( 406)						 ::tink::core::TypedError e2 = c->_hx_getObject(0).StaticCast<  ::tink::core::TypedError >();
HXDLIN( 406)						cb(::tink::streams::Reduction_obj::Failed(e2));
            					}
            					break;
            					case (int)3: {
HXLINE( 407)						cb(::tink::streams::Reduction_obj::Reduced(initial1->__get(0)));
            					}
            					break;
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_8f94e574d4603fbe_399_reduce)
HXLINE( 399)			::tink::core::_Future::FutureObject_obj::handle(_gthis->forEach(::tink::streams::_Stream::Handler_Impl__obj::ofUnknown( ::Dynamic(new _hx_Closure_1(initial1,reducer)))), ::Dynamic(new _hx_Closure_2(initial1,cb)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_8f94e574d4603fbe_397_reduce)
HXDLIN( 397)		::cpp::VirtualArray initial1 = ::cpp::VirtualArray_obj::__new(1)->init(0,initial);
HXDLIN( 397)		 ::tink::streams::StreamBase _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 398)		return ::tink::core::_Future::Future_Impl__obj::async( ::Dynamic(new _hx_Closure_3(_gthis,initial1,reducer)),true);
            	}


HX_DEFINE_DYNAMIC_FUNC2(StreamBase_obj,reduce,return )

::Dynamic StreamBase_obj::forEach( ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_8f94e574d4603fbe_414_forEach)
HXDLIN( 414)		HX_STACK_DO_THROW(HX_("not implemented",35,16,a6,d3));
HXDLIN( 414)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(StreamBase_obj,forEach,return )


hx::ObjectPtr< StreamBase_obj > StreamBase_obj::__new() {
	hx::ObjectPtr< StreamBase_obj > __this = new StreamBase_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< StreamBase_obj > StreamBase_obj::__alloc(hx::Ctx *_hx_ctx) {
	StreamBase_obj *__this = (StreamBase_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(StreamBase_obj), false, "tink.streams.StreamBase"));
	*(void **)__this = StreamBase_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

StreamBase_obj::StreamBase_obj()
{
}

hx::Val StreamBase_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"reduce") ) { return hx::Val( reduce_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"regroup") ) { return hx::Val( regroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"prepend") ) { return hx::Val( prepend_dyn() ); }
		if (HX_FIELD_EQ(inName,"forEach") ) { return hx::Val( forEach_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"depleted") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_depleted() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"decompose") ) { return hx::Val( decompose_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_depleted") ) { return hx::Val( get_depleted_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

void StreamBase_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("depleted",cb,68,06,fa));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *StreamBase_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *StreamBase_obj_sStaticStorageInfo = 0;
#endif

static ::String StreamBase_obj_sMemberFields[] = {
	HX_("get_depleted",d4,1c,20,af),
	HX_("regroup",ac,06,8f,80),
	HX_("prepend",0e,97,e0,37),
	HX_("decompose",b1,c3,a7,7a),
	HX_("reduce",a6,2d,9a,fe),
	HX_("forEach",aa,29,be,c4),
	::String(null()) };

hx::Class StreamBase_obj::__mClass;

void StreamBase_obj::__register()
{
	StreamBase_obj _hx_dummy;
	StreamBase_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("tink.streams.StreamBase",68,bb,0b,e8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(StreamBase_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< StreamBase_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StreamBase_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StreamBase_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace tink
} // end namespace streams
