// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_sys_io_Process
#include <sys/io/Process.h>
#endif
#ifndef INCLUDED_tink__Url_Url_Impl_
#include <tink/_Url/Url_Impl_.h>
#endif
#ifndef INCLUDED_tink_core_MPair
#include <tink/core/MPair.h>
#endif
#ifndef INCLUDED_tink_core_NamedWith
#include <tink/core/NamedWith.h>
#endif
#ifndef INCLUDED_tink_core_Outcome
#include <tink/core/Outcome.h>
#endif
#ifndef INCLUDED_tink_core__Future_FutureObject
#include <tink/core/_Future/FutureObject.h>
#endif
#ifndef INCLUDED_tink_core__Future_SyncFuture
#include <tink/core/_Future/SyncFuture.h>
#endif
#ifndef INCLUDED_tink_core__Lazy_LazyConst
#include <tink/core/_Lazy/LazyConst.h>
#endif
#ifndef INCLUDED_tink_core__Lazy_LazyObject
#include <tink/core/_Lazy/LazyObject.h>
#endif
#ifndef INCLUDED_tink_core__Promise_Promise_Impl_
#include <tink/core/_Promise/Promise_Impl_.h>
#endif
#ifndef INCLUDED_tink_http_ClientObject
#include <tink/http/ClientObject.h>
#endif
#ifndef INCLUDED_tink_http_Header
#include <tink/http/Header.h>
#endif
#ifndef INCLUDED_tink_http_HeaderField
#include <tink/http/HeaderField.h>
#endif
#ifndef INCLUDED_tink_http_IncomingResponse
#include <tink/http/IncomingResponse.h>
#endif
#ifndef INCLUDED_tink_http_Message
#include <tink/http/Message.h>
#endif
#ifndef INCLUDED_tink_http_OutgoingRequest
#include <tink/http/OutgoingRequest.h>
#endif
#ifndef INCLUDED_tink_http_OutgoingRequestHeader
#include <tink/http/OutgoingRequestHeader.h>
#endif
#ifndef INCLUDED_tink_http_RequestHeader
#include <tink/http/RequestHeader.h>
#endif
#ifndef INCLUDED_tink_http_ResponseHeaderBase
#include <tink/http/ResponseHeaderBase.h>
#endif
#ifndef INCLUDED_tink_http_clients_CurlClient
#include <tink/http/clients/CurlClient.h>
#endif
#ifndef INCLUDED_tink_io_RealSourceTools
#include <tink/io/RealSourceTools.h>
#endif
#ifndef INCLUDED_tink_io_SinkObject
#include <tink/io/SinkObject.h>
#endif
#ifndef INCLUDED_tink_io_StreamParserObject
#include <tink/io/StreamParserObject.h>
#endif
#ifndef INCLUDED_tink_io_WorkerObject
#include <tink/io/WorkerObject.h>
#endif
#ifndef INCLUDED_tink_io__Sink_SinkYielding_Impl_
#include <tink/io/_Sink/SinkYielding_Impl_.h>
#endif
#ifndef INCLUDED_tink_io__Source_Source_Impl_
#include <tink/io/_Source/Source_Impl_.h>
#endif
#ifndef INCLUDED_tink_io__Worker_Worker_Impl_
#include <tink/io/_Worker/Worker_Impl_.h>
#endif
#ifndef INCLUDED_tink_io_std_InputSource
#include <tink/io/std/InputSource.h>
#endif
#ifndef INCLUDED_tink_streams_Generator
#include <tink/streams/Generator.h>
#endif
#ifndef INCLUDED_tink_streams_StreamBase
#include <tink/streams/StreamBase.h>
#endif
#ifndef INCLUDED_tink_streams_StreamObject
#include <tink/streams/StreamObject.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c1ef6aac9a473f32_13_new,"tink.http.clients.CurlClient","new",0xf1f7ff79,"tink.http.clients.CurlClient.new","tink/http/clients/CurlClient.hx",13,0xb45cad16)
HX_LOCAL_STACK_FRAME(_hx_pos_c1ef6aac9a473f32_45_request,"tink.http.clients.CurlClient","request",0x12710ee8,"tink.http.clients.CurlClient.request","tink/http/clients/CurlClient.hx",45,0xb45cad16)
HX_LOCAL_STACK_FRAME(_hx_pos_c1ef6aac9a473f32_21_request,"tink.http.clients.CurlClient","request",0x12710ee8,"tink.http.clients.CurlClient.request","tink/http/clients/CurlClient.hx",21,0xb45cad16)
HX_LOCAL_STACK_FRAME(_hx_pos_c1ef6aac9a473f32_48___default_curl,"tink.http.clients.CurlClient","__default_curl",0xb1769b11,"tink.http.clients.CurlClient.__default_curl","tink/http/clients/CurlClient.hx",48,0xb45cad16)
namespace tink{
namespace http{
namespace clients{

void CurlClient_obj::__construct( ::Dynamic curl){
            	HX_STACKFRAME(&_hx_pos_c1ef6aac9a473f32_13_new)
HXLINE(  15)		this->protocol = HX_("http",88,9b,16,45);
HXLINE(  18)		if (hx::IsNotNull( curl )) {
HXLINE(  18)			this->curl = curl;
            		}
            	}

Dynamic CurlClient_obj::__CreateEmpty() { return new CurlClient_obj; }

void *CurlClient_obj::_hx_vtable = 0;

Dynamic CurlClient_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CurlClient_obj > _hx_result = new CurlClient_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool CurlClient_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4efc3f45;
}

static ::tink::http::ClientObject_obj _hx_tink_http_clients_CurlClient__hx_tink_http_ClientObject= {
	( ::Dynamic (hx::Object::*)( ::tink::http::OutgoingRequest))&::tink::http::clients::CurlClient_obj::request,
};

void *CurlClient_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x9c46f484: return &_hx_tink_http_clients_CurlClient__hx_tink_http_ClientObject;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

::Dynamic CurlClient_obj::request( ::tink::http::OutgoingRequest req){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		::Dynamic _hx_run( ::tink::core::MPair p){
            			HX_GC_STACKFRAME(&_hx_pos_c1ef6aac9a473f32_45_request)
HXLINE(  45)			return  ::tink::core::_Future::SyncFuture_obj::__alloc( HX_CTX , ::tink::core::_Lazy::LazyConst_obj::__alloc( HX_CTX ,::tink::core::Outcome_obj::Success( ::tink::http::IncomingResponse_obj::__alloc( HX_CTX ,( ( ::tink::http::ResponseHeaderBase)(p->a) ),p->b))));
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_c1ef6aac9a473f32_21_request)
HXLINE(  22)		::Array< ::String > args = ::Array_obj< ::String >::__new(0);
HXLINE(  24)		args->push(HX_("-is",57,81,22,00));
HXLINE(  26)		args->push(HX_("-X",8b,27,00,00));
HXLINE(  27)		args->push(( ( ::tink::http::RequestHeader)(req->header) )->method);
HXLINE(  29)		::String _hx_switch_0 = ( ( ::tink::http::RequestHeader)(req->header) )->protocol;
            		if (  (_hx_switch_0==HX_("HTTP/1.0",6c,25,7a,80)) ){
HXLINE(  30)			args->push(HX_("--http1.0",cb,24,14,7d));
HXDLIN(  30)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("HTTP/1.1",6d,25,7a,80)) ){
HXLINE(  31)			args->push(HX_("--http1.1",cc,24,14,7d));
HXDLIN(  31)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("HTTP/2",ab,7e,1d,5f)) ){
HXLINE(  32)			args->push(HX_("--http2",4a,98,06,7c));
HXDLIN(  32)			goto _hx_goto_1;
            		}
            		/* default */{
            		}
            		_hx_goto_1:;
HXLINE(  36)		{
HXLINE(  36)			 ::Dynamic header = ( ( ::tink::http::Header)(req->header) )->fields->iterator();
HXDLIN(  36)			while(( (bool)(header->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(  36)				 ::tink::http::HeaderField header1 = ( ( ::tink::http::HeaderField)(header->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(  37)				args->push(HX_("-H",7b,27,00,00));
HXLINE(  38)				args->push((((HX_("",00,00,00,00) + header1->name) + HX_(": ",a6,32,00,00)) + header1->value));
            			}
            		}
HXLINE(  41)		args->push(::tink::_Url::Url_Impl__obj::toString(( ( ::tink::http::RequestHeader)(req->header) )->url));
HXLINE(  43)		::Dynamic _hx_tmp = this->curl(args,req->body);
HXDLIN(  43)		return ::tink::core::_Promise::Promise_Impl__obj::next(::tink::io::RealSourceTools_obj::parse(_hx_tmp,::tink::http::ResponseHeaderBase_obj::parser()), ::Dynamic(new _hx_Closure_0()),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(CurlClient_obj,request,return )

HX_BEGIN_DEFAULT_FUNC(__default_curl,CurlClient_obj)
::Dynamic _hx_run(::Array< ::String > args,::Dynamic body){
            	HX_GC_STACKFRAME(&_hx_pos_c1ef6aac9a473f32_48___default_curl)
HXLINE(  50)		args->push(HX_("--data-binary",a4,13,68,82));
HXLINE(  51)		args->push(HX_("@-",ed,37,00,00));
HXLINE(  52)		 ::sys::io::Process process =  ::sys::io::Process_obj::__alloc( HX_CTX ,HX_("curl",ec,4a,c9,41),args,null());
HXLINE(  53)		::Dynamic sink = ::tink::io::_Sink::SinkYielding_Impl__obj::ofOutput(HX_("stdin",48,b3,0d,84),process->_hx_stdin,null());
HXLINE(  54)		::tink::core::_Future::FutureObject_obj::eager(::tink::io::_Source::Source_Impl__obj::pipeTo(body,sink, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("end",db,03,4d,00),true))));
HXLINE(  55)		 ::haxe::io::Input input = process->_hx_stdout;
HXDLIN(  55)		 ::Dynamic options = null();
HXDLIN(  55)		if (hx::IsNull( options )) {
HXLINE(  55)			options =  ::Dynamic(hx::Anon_obj::Create(0));
            		}
HXDLIN(  55)		::Dynamic _hx_tmp = ::tink::io::_Worker::Worker_Impl__obj::ensure( ::Dynamic(options->__Field(HX_("worker",7e,30,9e,c9),hx::paccDynamic)));
HXDLIN(  55)		 ::Dynamic _g = options->__Field(HX_("chunkSize",ce,cd,77,9f),hx::paccDynamic);
HXDLIN(  55)		int _hx_tmp1;
HXDLIN(  55)		if (hx::IsNull( _g )) {
HXLINE(  55)			_hx_tmp1 = 65536;
            		}
            		else {
HXLINE(  55)			 ::Dynamic v = _g;
HXDLIN(  55)			_hx_tmp1 = ( (int)(v) );
            		}
HXDLIN(  55)		return  ::tink::io::std::InputSource_obj::__alloc( HX_CTX ,HX_("stdout",cb,bf,f3,07),input,_hx_tmp,::haxe::io::Bytes_obj::alloc(_hx_tmp1),0);
            	}
HX_END_LOCAL_FUNC2(return )
HX_END_DEFAULT_FUNC


void CurlClient_obj::__alloc_dynamic_functions(hx::Ctx *_hx_ctx,CurlClient_obj *_hx_obj) {
	if (!_hx_obj->curl.mPtr) _hx_obj->curl = new __default_curl(_hx_obj);
}
hx::ObjectPtr< CurlClient_obj > CurlClient_obj::__new( ::Dynamic curl) {
	hx::ObjectPtr< CurlClient_obj > __this = new CurlClient_obj();
	__this->__construct(curl);
	return __this;
}

hx::ObjectPtr< CurlClient_obj > CurlClient_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic curl) {
	CurlClient_obj *__this = (CurlClient_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CurlClient_obj), true, "tink.http.clients.CurlClient"));
	*(void **)__this = CurlClient_obj::_hx_vtable;
	tink::http::clients::CurlClient_obj::__alloc_dynamic_functions(_hx_ctx,__this);
	__this->__construct(curl);
	return __this;
}

CurlClient_obj::CurlClient_obj()
{
	curl = new __default_curl(this);
}

void CurlClient_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CurlClient);
	HX_MARK_MEMBER_NAME(protocol,"protocol");
	HX_MARK_MEMBER_NAME(curl,"curl");
	HX_MARK_END_CLASS();
}

void CurlClient_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(protocol,"protocol");
	HX_VISIT_MEMBER_NAME(curl,"curl");
}

hx::Val CurlClient_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"curl") ) { return hx::Val( curl ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"request") ) { return hx::Val( request_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"protocol") ) { return hx::Val( protocol ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val CurlClient_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"curl") ) { curl=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"protocol") ) { protocol=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CurlClient_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("protocol",58,56,63,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo CurlClient_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(CurlClient_obj,protocol),HX_("protocol",58,56,63,00)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(CurlClient_obj,curl),HX_("curl",ec,4a,c9,41)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *CurlClient_obj_sStaticStorageInfo = 0;
#endif

static ::String CurlClient_obj_sMemberFields[] = {
	HX_("protocol",58,56,63,00),
	HX_("request",4f,df,84,44),
	HX_("curl",ec,4a,c9,41),
	::String(null()) };

hx::Class CurlClient_obj::__mClass;

void CurlClient_obj::__register()
{
	CurlClient_obj _hx_dummy;
	CurlClient_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("tink.http.clients.CurlClient",07,cf,5a,a4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CurlClient_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CurlClient_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CurlClient_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CurlClient_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace tink
} // end namespace http
} // end namespace clients
