// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_tink_http_ClientObject
#include <tink/http/ClientObject.h>
#endif
#ifndef INCLUDED_tink_http_clients_CurlClient
#include <tink/http/clients/CurlClient.h>
#endif
#ifndef INCLUDED_tink_http_clients_SecureCurlClient
#include <tink/http/clients/SecureCurlClient.h>
#endif
#ifndef INCLUDED_tink_streams_StreamObject
#include <tink/streams/StreamObject.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bc08390c71eaaab5_4_new,"tink.http.clients.SecureCurlClient","new",0x5c9dda50,"tink.http.clients.SecureCurlClient.new","tink/http/clients/SecureCurlClient.hx",4,0x0633035f)
namespace tink{
namespace http{
namespace clients{

void SecureCurlClient_obj::__construct( ::Dynamic curl){
            	HX_STACKFRAME(&_hx_pos_bc08390c71eaaab5_4_new)
HXLINE(   5)		super::__construct(curl);
HXLINE(   6)		this->protocol = HX_("https",eb,7b,b1,2e);
            	}

Dynamic SecureCurlClient_obj::__CreateEmpty() { return new SecureCurlClient_obj; }

void *SecureCurlClient_obj::_hx_vtable = 0;

Dynamic SecureCurlClient_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SecureCurlClient_obj > _hx_result = new SecureCurlClient_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SecureCurlClient_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2152ef54) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2152ef54;
	} else {
		return inClassId==(int)0x4efc3f45;
	}
}


hx::ObjectPtr< SecureCurlClient_obj > SecureCurlClient_obj::__new( ::Dynamic curl) {
	hx::ObjectPtr< SecureCurlClient_obj > __this = new SecureCurlClient_obj();
	__this->__construct(curl);
	return __this;
}

hx::ObjectPtr< SecureCurlClient_obj > SecureCurlClient_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic curl) {
	SecureCurlClient_obj *__this = (SecureCurlClient_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SecureCurlClient_obj), true, "tink.http.clients.SecureCurlClient"));
	*(void **)__this = SecureCurlClient_obj::_hx_vtable;
	tink::http::clients::CurlClient_obj::__alloc_dynamic_functions(_hx_ctx,__this);
	__this->__construct(curl);
	return __this;
}

SecureCurlClient_obj::SecureCurlClient_obj()
{
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *SecureCurlClient_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *SecureCurlClient_obj_sStaticStorageInfo = 0;
#endif

hx::Class SecureCurlClient_obj::__mClass;

void SecureCurlClient_obj::__register()
{
	SecureCurlClient_obj _hx_dummy;
	SecureCurlClient_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("tink.http.clients.SecureCurlClient",5e,b2,f6,97);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< SecureCurlClient_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SecureCurlClient_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SecureCurlClient_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace tink
} // end namespace http
} // end namespace clients
