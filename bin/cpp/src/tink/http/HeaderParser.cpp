// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_tink_core_NamedWith
#include <tink/core/NamedWith.h>
#endif
#ifndef INCLUDED_tink_core_Outcome
#include <tink/core/Outcome.h>
#endif
#ifndef INCLUDED_tink_core_TypedError
#include <tink/core/TypedError.h>
#endif
#ifndef INCLUDED_tink_http_HeaderField
#include <tink/http/HeaderField.h>
#endif
#ifndef INCLUDED_tink_http_HeaderParser
#include <tink/http/HeaderParser.h>
#endif
#ifndef INCLUDED_tink_io_BytewiseParser
#include <tink/io/BytewiseParser.h>
#endif
#ifndef INCLUDED_tink_io_ParseStep
#include <tink/io/ParseStep.h>
#endif
#ifndef INCLUDED_tink_io_StreamParserObject
#include <tink/io/StreamParserObject.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_73ab703e9d8785b9_294_new,"tink.http.HeaderParser","new",0xbbca6c88,"tink.http.HeaderParser.new","tink/http/Header.hx",294,0xf5720e67)
HX_LOCAL_STACK_FRAME(_hx_pos_73ab703e9d8785b9_310_read,"tink.http.HeaderParser","read",0x97f9522e,"tink.http.HeaderParser.read","tink/http/Header.hx",310,0xf5720e67)
HX_LOCAL_STACK_FRAME(_hx_pos_73ab703e9d8785b9_344_nextLine,"tink.http.HeaderParser","nextLine",0x96da115f,"tink.http.HeaderParser.nextLine","tink/http/Header.hx",344,0xf5720e67)
namespace tink{
namespace http{

void HeaderParser_obj::__construct( ::Dynamic makeHeader){
            	HX_GC_STACKFRAME(&_hx_pos_73ab703e9d8785b9_294_new)
HXLINE( 298)		this->last = -1;
HXLINE( 303)		this->buf =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 304)		this->makeHeader = makeHeader;
            	}

Dynamic HeaderParser_obj::__CreateEmpty() { return new HeaderParser_obj; }

void *HeaderParser_obj::_hx_vtable = 0;

Dynamic HeaderParser_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< HeaderParser_obj > _hx_result = new HeaderParser_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool HeaderParser_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c022f66) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0c022f66;
	} else {
		return inClassId==(int)0x379ee5a3;
	}
}

 ::tink::io::ParseStep HeaderParser_obj::read(int c){
            	HX_STACKFRAME(&_hx_pos_73ab703e9d8785b9_310_read)
HXLINE( 311)		int _g = this->last;
HXDLIN( 311)		switch((int)(c)){
            			case (int)-1: {
HXLINE( 314)				return this->nextLine();
            			}
            			break;
            			case (int)10: {
HXLINE( 311)				if ((_g == 13)) {
HXLINE( 318)					return this->nextLine();
            				}
            				else {
HXLINE( 337)					int other = c;
HXLINE( 339)					this->last = other;
HXLINE( 340)					{
HXLINE( 340)						 ::StringBuf _this = this->buf;
HXDLIN( 340)						if ((other >= 127)) {
HXLINE( 340)							::String x = ::String::fromCharCode(other);
HXDLIN( 340)							if (hx::IsNotNull( _this->charBuf )) {
HXLINE( 340)								_this->flush();
            							}
HXDLIN( 340)							if (hx::IsNull( _this->b )) {
HXLINE( 340)								_this->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
            							}
            							else {
HXLINE( 340)								::Array< ::String > _this1 = _this->b;
HXDLIN( 340)								_this1->push(::Std_obj::string(x));
            							}
            						}
            						else {
HXLINE( 340)							if (hx::IsNull( _this->charBuf )) {
HXLINE( 340)								_this->charBuf = ::Array_obj< char >::__new();
            							}
HXDLIN( 340)							_this->charBuf->push(other);
            						}
            					}
HXLINE( 341)					return ::tink::io::ParseStep_obj::Progressed_dyn();
            				}
            			}
            			break;
            			case (int)13: {
HXLINE( 311)				if ((_g == 13)) {
HXLINE( 322)					{
HXLINE( 322)						 ::StringBuf _this2 = this->buf;
HXDLIN( 322)						int c1 = this->last;
HXDLIN( 322)						if ((c1 >= 127)) {
HXLINE( 322)							::String x1 = ::String::fromCharCode(c1);
HXDLIN( 322)							if (hx::IsNotNull( _this2->charBuf )) {
HXLINE( 322)								_this2->flush();
            							}
HXDLIN( 322)							if (hx::IsNull( _this2->b )) {
HXLINE( 322)								_this2->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x1));
            							}
            							else {
HXLINE( 322)								::Array< ::String > _this3 = _this2->b;
HXDLIN( 322)								_this3->push(::Std_obj::string(x1));
            							}
            						}
            						else {
HXLINE( 322)							if (hx::IsNull( _this2->charBuf )) {
HXLINE( 322)								_this2->charBuf = ::Array_obj< char >::__new();
            							}
HXDLIN( 322)							_this2->charBuf->push(c1);
            						}
            					}
HXLINE( 323)					return ::tink::io::ParseStep_obj::Progressed_dyn();
            				}
            				else {
HXLINE( 334)					this->last = 13;
HXLINE( 335)					return ::tink::io::ParseStep_obj::Progressed_dyn();
            				}
            			}
            			break;
            			default:{
HXLINE( 311)				if ((_g == 13)) {
HXLINE( 325)					int other1 = c;
HXLINE( 327)					{
HXLINE( 327)						 ::StringBuf _this4 = this->buf;
HXDLIN( 327)						int c2 = this->last;
HXDLIN( 327)						if ((c2 >= 127)) {
HXLINE( 327)							::String x2 = ::String::fromCharCode(c2);
HXDLIN( 327)							if (hx::IsNotNull( _this4->charBuf )) {
HXLINE( 327)								_this4->flush();
            							}
HXDLIN( 327)							if (hx::IsNull( _this4->b )) {
HXLINE( 327)								_this4->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x2));
            							}
            							else {
HXLINE( 327)								::Array< ::String > _this5 = _this4->b;
HXDLIN( 327)								_this5->push(::Std_obj::string(x2));
            							}
            						}
            						else {
HXLINE( 327)							if (hx::IsNull( _this4->charBuf )) {
HXLINE( 327)								_this4->charBuf = ::Array_obj< char >::__new();
            							}
HXDLIN( 327)							_this4->charBuf->push(c2);
            						}
            					}
HXLINE( 328)					{
HXLINE( 328)						 ::StringBuf _this6 = this->buf;
HXDLIN( 328)						if ((other1 >= 127)) {
HXLINE( 328)							::String x3 = ::String::fromCharCode(other1);
HXDLIN( 328)							if (hx::IsNotNull( _this6->charBuf )) {
HXLINE( 328)								_this6->flush();
            							}
HXDLIN( 328)							if (hx::IsNull( _this6->b )) {
HXLINE( 328)								_this6->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x3));
            							}
            							else {
HXLINE( 328)								::Array< ::String > _this7 = _this6->b;
HXDLIN( 328)								_this7->push(::Std_obj::string(x3));
            							}
            						}
            						else {
HXLINE( 328)							if (hx::IsNull( _this6->charBuf )) {
HXLINE( 328)								_this6->charBuf = ::Array_obj< char >::__new();
            							}
HXDLIN( 328)							_this6->charBuf->push(other1);
            						}
            					}
HXLINE( 329)					this->last = -1;
HXLINE( 330)					return ::tink::io::ParseStep_obj::Progressed_dyn();
            				}
            				else {
HXLINE( 337)					int other2 = c;
HXLINE( 339)					this->last = other2;
HXLINE( 340)					{
HXLINE( 340)						 ::StringBuf _this8 = this->buf;
HXDLIN( 340)						if ((other2 >= 127)) {
HXLINE( 340)							::String x4 = ::String::fromCharCode(other2);
HXDLIN( 340)							if (hx::IsNotNull( _this8->charBuf )) {
HXLINE( 340)								_this8->flush();
            							}
HXDLIN( 340)							if (hx::IsNull( _this8->b )) {
HXLINE( 340)								_this8->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x4));
            							}
            							else {
HXLINE( 340)								::Array< ::String > _this9 = _this8->b;
HXDLIN( 340)								_this9->push(::Std_obj::string(x4));
            							}
            						}
            						else {
HXLINE( 340)							if (hx::IsNull( _this8->charBuf )) {
HXLINE( 340)								_this8->charBuf = ::Array_obj< char >::__new();
            							}
HXDLIN( 340)							_this8->charBuf->push(other2);
            						}
            					}
HXLINE( 341)					return ::tink::io::ParseStep_obj::Progressed_dyn();
            				}
            			}
            		}
HXLINE( 311)		return null();
            	}


 ::tink::io::ParseStep HeaderParser_obj::nextLine(){
            	HX_GC_STACKFRAME(&_hx_pos_73ab703e9d8785b9_344_nextLine)
HXLINE( 345)		::String line = this->buf->toString();
HXLINE( 347)		this->buf =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 348)		this->last = -1;
HXLINE( 351)		if ((line == HX_("",00,00,00,00))) {
HXLINE( 353)			if (hx::IsNull( this->header )) {
HXLINE( 354)				return ::tink::io::ParseStep_obj::Progressed_dyn();
            			}
            			else {
HXLINE( 356)				return ::tink::io::ParseStep_obj::Done(this->header);
            			}
            		}
            		else {
HXLINE( 358)			if (hx::IsNull( this->header )) {
HXLINE( 359)				 ::tink::core::Outcome _g = this->makeHeader(line,(this->fields = ::Array_obj< ::Dynamic>::__new(0)));
HXDLIN( 359)				switch((int)(_g->_hx_getIndex())){
            					case (int)0: {
HXLINE( 362)						 ::Dynamic _g1 = _g->_hx_getObject(0);
HXLINE( 360)						if (hx::IsNull( _g1 )) {
HXLINE( 361)							return ::tink::io::ParseStep_obj::Done((this->header = null()));
            						}
            						else {
HXLINE( 362)							 ::Dynamic v = _g1;
HXLINE( 363)							this->header = v;
HXLINE( 364)							return ::tink::io::ParseStep_obj::Progressed_dyn();
            						}
            					}
            					break;
            					case (int)1: {
HXLINE( 365)						 ::tink::core::TypedError e = ( ( ::tink::core::TypedError)(_g->_hx_getObject(0)) );
HXLINE( 366)						return ::tink::io::ParseStep_obj::Failed(e);
            					}
            					break;
            				}
            			}
            			else {
HXLINE( 369)				::Array< ::Dynamic> _hx_tmp = this->fields;
HXDLIN( 369)				_hx_tmp->push(::tink::http::HeaderField_obj::ofString(line));
HXLINE( 370)				return ::tink::io::ParseStep_obj::Progressed_dyn();
            			}
            		}
HXLINE( 351)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(HeaderParser_obj,nextLine,return )


hx::ObjectPtr< HeaderParser_obj > HeaderParser_obj::__new( ::Dynamic makeHeader) {
	hx::ObjectPtr< HeaderParser_obj > __this = new HeaderParser_obj();
	__this->__construct(makeHeader);
	return __this;
}

hx::ObjectPtr< HeaderParser_obj > HeaderParser_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic makeHeader) {
	HeaderParser_obj *__this = (HeaderParser_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(HeaderParser_obj), true, "tink.http.HeaderParser"));
	*(void **)__this = HeaderParser_obj::_hx_vtable;
	__this->__construct(makeHeader);
	return __this;
}

HeaderParser_obj::HeaderParser_obj()
{
}

void HeaderParser_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(HeaderParser);
	HX_MARK_MEMBER_NAME(header,"header");
	HX_MARK_MEMBER_NAME(fields,"fields");
	HX_MARK_MEMBER_NAME(buf,"buf");
	HX_MARK_MEMBER_NAME(last,"last");
	HX_MARK_MEMBER_NAME(makeHeader,"makeHeader");
	HX_MARK_END_CLASS();
}

void HeaderParser_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(header,"header");
	HX_VISIT_MEMBER_NAME(fields,"fields");
	HX_VISIT_MEMBER_NAME(buf,"buf");
	HX_VISIT_MEMBER_NAME(last,"last");
	HX_VISIT_MEMBER_NAME(makeHeader,"makeHeader");
}

hx::Val HeaderParser_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"buf") ) { return hx::Val( buf ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"last") ) { return hx::Val( last ); }
		if (HX_FIELD_EQ(inName,"read") ) { return hx::Val( read_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"header") ) { return hx::Val( header ); }
		if (HX_FIELD_EQ(inName,"fields") ) { return hx::Val( fields ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"nextLine") ) { return hx::Val( nextLine_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"makeHeader") ) { return hx::Val( makeHeader ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val HeaderParser_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"buf") ) { buf=inValue.Cast<  ::StringBuf >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"last") ) { last=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"header") ) { header=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fields") ) { fields=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"makeHeader") ) { makeHeader=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void HeaderParser_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("header",8d,09,00,fd));
	outFields->push(HX_("fields",79,8e,8e,80));
	outFields->push(HX_("buf",33,c3,4a,00));
	outFields->push(HX_("last",56,0a,ad,47));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo HeaderParser_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(HeaderParser_obj,header),HX_("header",8d,09,00,fd)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(HeaderParser_obj,fields),HX_("fields",79,8e,8e,80)},
	{hx::fsObject /*  ::StringBuf */ ,(int)offsetof(HeaderParser_obj,buf),HX_("buf",33,c3,4a,00)},
	{hx::fsInt,(int)offsetof(HeaderParser_obj,last),HX_("last",56,0a,ad,47)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(HeaderParser_obj,makeHeader),HX_("makeHeader",1b,de,cf,4e)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *HeaderParser_obj_sStaticStorageInfo = 0;
#endif

static ::String HeaderParser_obj_sMemberFields[] = {
	HX_("header",8d,09,00,fd),
	HX_("fields",79,8e,8e,80),
	HX_("buf",33,c3,4a,00),
	HX_("last",56,0a,ad,47),
	HX_("makeHeader",1b,de,cf,4e),
	HX_("read",56,4b,a7,4b),
	HX_("nextLine",87,be,7f,f3),
	::String(null()) };

hx::Class HeaderParser_obj::__mClass;

void HeaderParser_obj::__register()
{
	HeaderParser_obj _hx_dummy;
	HeaderParser_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("tink.http.HeaderParser",96,c8,6f,37);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(HeaderParser_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< HeaderParser_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HeaderParser_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HeaderParser_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace tink
} // end namespace http
