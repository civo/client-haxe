// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_tink_core_NamedWith
#include <tink/core/NamedWith.h>
#endif
#ifndef INCLUDED_tink_http_Header
#include <tink/http/Header.h>
#endif
#ifndef INCLUDED_tink_http_HeaderField
#include <tink/http/HeaderField.h>
#endif
#ifndef INCLUDED_tink_http_IncomingRequestHeader
#include <tink/http/IncomingRequestHeader.h>
#endif
#ifndef INCLUDED_tink_http_RequestHeader
#include <tink/http/RequestHeader.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ea1f722becc29600_35_new,"tink.http.IncomingRequestHeader","new",0xdb15a0de,"tink.http.IncomingRequestHeader.new","tink/http/Request.hx",35,0x68d6b2f9)
namespace tink{
namespace http{

void IncomingRequestHeader_obj::__construct(::String method, ::Dynamic url,::String __o_protocol,::Array< ::Dynamic> fields){
            		::String protocol = __o_protocol;
            		if (hx::IsNull(__o_protocol)) protocol = HX_("HTTP/1.1",6d,25,7a,80);
            	HX_STACKFRAME(&_hx_pos_ea1f722becc29600_35_new)
HXDLIN(  35)		super::__construct(method,url,protocol,fields);
            	}

Dynamic IncomingRequestHeader_obj::__CreateEmpty() { return new IncomingRequestHeader_obj; }

void *IncomingRequestHeader_obj::_hx_vtable = 0;

Dynamic IncomingRequestHeader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< IncomingRequestHeader_obj > _hx_result = new IncomingRequestHeader_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool IncomingRequestHeader_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7123621a) {
		if (inClassId<=(int)0x587ad91c) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x587ad91c;
		} else {
			return inClassId==(int)0x7123621a;
		}
	} else {
		return inClassId==(int)0x7a8f5d67;
	}
}


hx::ObjectPtr< IncomingRequestHeader_obj > IncomingRequestHeader_obj::__new(::String method, ::Dynamic url,::String __o_protocol,::Array< ::Dynamic> fields) {
	hx::ObjectPtr< IncomingRequestHeader_obj > __this = new IncomingRequestHeader_obj();
	__this->__construct(method,url,__o_protocol,fields);
	return __this;
}

hx::ObjectPtr< IncomingRequestHeader_obj > IncomingRequestHeader_obj::__alloc(hx::Ctx *_hx_ctx,::String method, ::Dynamic url,::String __o_protocol,::Array< ::Dynamic> fields) {
	IncomingRequestHeader_obj *__this = (IncomingRequestHeader_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(IncomingRequestHeader_obj), true, "tink.http.IncomingRequestHeader"));
	*(void **)__this = IncomingRequestHeader_obj::_hx_vtable;
	__this->__construct(method,url,__o_protocol,fields);
	return __this;
}

IncomingRequestHeader_obj::IncomingRequestHeader_obj()
{
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *IncomingRequestHeader_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *IncomingRequestHeader_obj_sStaticStorageInfo = 0;
#endif

hx::Class IncomingRequestHeader_obj::__mClass;

void IncomingRequestHeader_obj::__register()
{
	IncomingRequestHeader_obj _hx_dummy;
	IncomingRequestHeader_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("tink.http.IncomingRequestHeader",ec,99,08,67);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< IncomingRequestHeader_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IncomingRequestHeader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IncomingRequestHeader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace tink
} // end namespace http
