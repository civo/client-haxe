// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_tink_http__Header_HeaderValue_Impl_
#include <tink/http/_Header/HeaderValue_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_9cfb9724f4bad04f_195_ofInt,"tink.http._Header.HeaderValue_Impl_","ofInt",0xc364cf42,"tink.http._Header.HeaderValue_Impl_.ofInt","tink/http/Header.hx",195,0xf5720e67)
namespace tink{
namespace http{
namespace _Header{

void HeaderValue_Impl__obj::__construct() { }

Dynamic HeaderValue_Impl__obj::__CreateEmpty() { return new HeaderValue_Impl__obj; }

void *HeaderValue_Impl__obj::_hx_vtable = 0;

Dynamic HeaderValue_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< HeaderValue_Impl__obj > _hx_result = new HeaderValue_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool HeaderValue_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3c46a4da;
}

::String HeaderValue_Impl__obj::ofInt(int i){
            	HX_STACKFRAME(&_hx_pos_9cfb9724f4bad04f_195_ofInt)
HXDLIN( 195)		return ::Std_obj::string(i);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HeaderValue_Impl__obj,ofInt,return )


HeaderValue_Impl__obj::HeaderValue_Impl__obj()
{
}

bool HeaderValue_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"ofInt") ) { outValue = ofInt_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *HeaderValue_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *HeaderValue_Impl__obj_sStaticStorageInfo = 0;
#endif

hx::Class HeaderValue_Impl__obj::__mClass;

static ::String HeaderValue_Impl__obj_sStaticFields[] = {
	HX_("ofInt",18,ec,1d,2d),
	::String(null())
};

void HeaderValue_Impl__obj::__register()
{
	HeaderValue_Impl__obj _hx_dummy;
	HeaderValue_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("tink.http._Header.HeaderValue_Impl_",18,28,0b,97);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &HeaderValue_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(HeaderValue_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< HeaderValue_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HeaderValue_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HeaderValue_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace tink
} // end namespace http
} // end namespace _Header
