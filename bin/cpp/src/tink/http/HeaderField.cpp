// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_tink_core_NamedWith
#include <tink/core/NamedWith.h>
#endif
#ifndef INCLUDED_tink_http_HeaderField
#include <tink/http/HeaderField.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_80f54cb31df217e8_245_new,"tink.http.HeaderField","new",0x50ccdb55,"tink.http.HeaderField.new","tink/http/Header.hx",245,0xf5720e67)
HX_LOCAL_STACK_FRAME(_hx_pos_80f54cb31df217e8_249_toString,"tink.http.HeaderField","toString",0x1860ed97,"tink.http.HeaderField.toString","tink/http/Header.hx",249,0xf5720e67)
HX_LOCAL_STACK_FRAME(_hx_pos_80f54cb31df217e8_253_ofString,"tink.http.HeaderField","ofString",0x84238633,"tink.http.HeaderField.ofString","tink/http/Header.hx",253,0xf5720e67)
namespace tink{
namespace http{

void HeaderField_obj::__construct(::String name,::String value){
            	HX_STACKFRAME(&_hx_pos_80f54cb31df217e8_245_new)
HXDLIN( 245)		super::__construct(name,value);
            	}

Dynamic HeaderField_obj::__CreateEmpty() { return new HeaderField_obj; }

void *HeaderField_obj::_hx_vtable = 0;

Dynamic HeaderField_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< HeaderField_obj > _hx_result = new HeaderField_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool HeaderField_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x55a9f013) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x55a9f013;
	} else {
		return inClassId==(int)0x7746ddaa;
	}
}

::String HeaderField_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_80f54cb31df217e8_249_toString)
HXDLIN( 249)		if (hx::IsNull( this->value )) {
HXDLIN( 249)			return ( (::String)(this->name) );
            		}
            		else {
HXLINE( 250)			return (((HX_("",00,00,00,00) + this->name) + HX_(": ",a6,32,00,00)) + this->value);
            		}
HXLINE( 249)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(HeaderField_obj,toString,return )

 ::tink::http::HeaderField HeaderField_obj::ofString(::String s){
            	HX_GC_STACKFRAME(&_hx_pos_80f54cb31df217e8_253_ofString)
HXDLIN( 253)		int _g = s.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 253)		if ((_g == -1)) {
HXLINE( 255)			::String this1 = s.toLowerCase();
HXDLIN( 255)			return  ::tink::http::HeaderField_obj::__alloc( HX_CTX ,this1,null());
            		}
            		else {
HXLINE( 256)			int v = _g;
HXLINE( 257)			::String name = s.substr(0,v);
HXLINE( 258)			::String this2 = name.toLowerCase();
HXDLIN( 258)			return  ::tink::http::HeaderField_obj::__alloc( HX_CTX ,this2,::StringTools_obj::trim(s.substr((v + 1),null())));
            		}
HXLINE( 253)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HeaderField_obj,ofString,return )


HeaderField_obj::HeaderField_obj()
{
}

hx::Val HeaderField_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool HeaderField_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"ofString") ) { outValue = ofString_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *HeaderField_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *HeaderField_obj_sStaticStorageInfo = 0;
#endif

static ::String HeaderField_obj_sMemberFields[] = {
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

hx::Class HeaderField_obj::__mClass;

static ::String HeaderField_obj_sStaticFields[] = {
	HX_("ofString",48,69,31,a4),
	::String(null())
};

void HeaderField_obj::__register()
{
	HeaderField_obj _hx_dummy;
	HeaderField_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("tink.http.HeaderField",e3,8c,65,ce);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &HeaderField_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(HeaderField_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(HeaderField_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< HeaderField_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HeaderField_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HeaderField_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace tink
} // end namespace http
