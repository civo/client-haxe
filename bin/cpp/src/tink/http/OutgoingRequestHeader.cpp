// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_tink_core_NamedWith
#include <tink/core/NamedWith.h>
#endif
#ifndef INCLUDED_tink_http_Header
#include <tink/http/Header.h>
#endif
#ifndef INCLUDED_tink_http_HeaderField
#include <tink/http/HeaderField.h>
#endif
#ifndef INCLUDED_tink_http_OutgoingRequestHeader
#include <tink/http/OutgoingRequestHeader.h>
#endif
#ifndef INCLUDED_tink_http_RequestHeader
#include <tink/http/RequestHeader.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_075aa04e02ead732_113_new,"tink.http.OutgoingRequestHeader","new",0x8b2ef298,"tink.http.OutgoingRequestHeader.new","tink/http/Request.hx",113,0x68d6b2f9)
HX_LOCAL_STACK_FRAME(_hx_pos_075aa04e02ead732_115_concat,"tink.http.OutgoingRequestHeader","concat",0xd61a19dc,"tink.http.OutgoingRequestHeader.concat","tink/http/Request.hx",115,0x68d6b2f9)
namespace tink{
namespace http{

void OutgoingRequestHeader_obj::__construct(::String method, ::Dynamic url,::String __o_protocol,::Array< ::Dynamic> fields){
            		::String protocol = __o_protocol;
            		if (hx::IsNull(__o_protocol)) protocol = HX_("HTTP/1.1",6d,25,7a,80);
            	HX_STACKFRAME(&_hx_pos_075aa04e02ead732_113_new)
HXDLIN( 113)		super::__construct(method,url,protocol,fields);
            	}

Dynamic OutgoingRequestHeader_obj::__CreateEmpty() { return new OutgoingRequestHeader_obj; }

void *OutgoingRequestHeader_obj::_hx_vtable = 0;

Dynamic OutgoingRequestHeader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< OutgoingRequestHeader_obj > _hx_result = new OutgoingRequestHeader_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool OutgoingRequestHeader_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7123621a) {
		if (inClassId<=(int)0x17e645d6) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x17e645d6;
		} else {
			return inClassId==(int)0x7123621a;
		}
	} else {
		return inClassId==(int)0x7a8f5d67;
	}
}

 ::tink::http::OutgoingRequestHeader OutgoingRequestHeader_obj::concat(::Array< ::Dynamic> fields){
            	HX_GC_STACKFRAME(&_hx_pos_075aa04e02ead732_115_concat)
HXDLIN( 115)		::String _hx_tmp = this->method;
HXDLIN( 115)		 ::Dynamic _hx_tmp1 = this->url;
HXDLIN( 115)		::String _hx_tmp2 = this->protocol;
HXDLIN( 115)		return  ::tink::http::OutgoingRequestHeader_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,_hx_tmp2,this->fields->concat(fields));
            	}


HX_DEFINE_DYNAMIC_FUNC1(OutgoingRequestHeader_obj,concat,return )


hx::ObjectPtr< OutgoingRequestHeader_obj > OutgoingRequestHeader_obj::__new(::String method, ::Dynamic url,::String __o_protocol,::Array< ::Dynamic> fields) {
	hx::ObjectPtr< OutgoingRequestHeader_obj > __this = new OutgoingRequestHeader_obj();
	__this->__construct(method,url,__o_protocol,fields);
	return __this;
}

hx::ObjectPtr< OutgoingRequestHeader_obj > OutgoingRequestHeader_obj::__alloc(hx::Ctx *_hx_ctx,::String method, ::Dynamic url,::String __o_protocol,::Array< ::Dynamic> fields) {
	OutgoingRequestHeader_obj *__this = (OutgoingRequestHeader_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(OutgoingRequestHeader_obj), true, "tink.http.OutgoingRequestHeader"));
	*(void **)__this = OutgoingRequestHeader_obj::_hx_vtable;
	__this->__construct(method,url,__o_protocol,fields);
	return __this;
}

OutgoingRequestHeader_obj::OutgoingRequestHeader_obj()
{
}

hx::Val OutgoingRequestHeader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"concat") ) { return hx::Val( concat_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *OutgoingRequestHeader_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *OutgoingRequestHeader_obj_sStaticStorageInfo = 0;
#endif

static ::String OutgoingRequestHeader_obj_sMemberFields[] = {
	HX_("concat",14,09,d0,c7),
	::String(null()) };

hx::Class OutgoingRequestHeader_obj::__mClass;

void OutgoingRequestHeader_obj::__register()
{
	OutgoingRequestHeader_obj _hx_dummy;
	OutgoingRequestHeader_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("tink.http.OutgoingRequestHeader",a6,06,74,26);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(OutgoingRequestHeader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< OutgoingRequestHeader_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OutgoingRequestHeader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OutgoingRequestHeader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace tink
} // end namespace http
