// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_tink_http_Header
#include <tink/http/Header.h>
#endif
#ifndef INCLUDED_tink_http_IncomingRequest
#include <tink/http/IncomingRequest.h>
#endif
#ifndef INCLUDED_tink_http_IncomingRequestBody
#include <tink/http/IncomingRequestBody.h>
#endif
#ifndef INCLUDED_tink_http_IncomingRequestHeader
#include <tink/http/IncomingRequestHeader.h>
#endif
#ifndef INCLUDED_tink_http_Message
#include <tink/http/Message.h>
#endif
#ifndef INCLUDED_tink_http_RequestHeader
#include <tink/http/RequestHeader.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b55c772a4ecbbb20_124_new,"tink.http.IncomingRequest","new",0x12c3df71,"tink.http.IncomingRequest.new","tink/http/Request.hx",124,0x68d6b2f9)
namespace tink{
namespace http{

void IncomingRequest_obj::__construct(::String clientIp, ::tink::http::IncomingRequestHeader header, ::tink::http::IncomingRequestBody body){
            	HX_STACKFRAME(&_hx_pos_b55c772a4ecbbb20_124_new)
HXLINE( 125)		this->clientIp = clientIp;
HXLINE( 126)		super::__construct(header,body);
            	}

Dynamic IncomingRequest_obj::__CreateEmpty() { return new IncomingRequest_obj; }

void *IncomingRequest_obj::_hx_vtable = 0;

Dynamic IncomingRequest_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< IncomingRequest_obj > _hx_result = new IncomingRequest_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool IncomingRequest_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x04e65eed) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x04e65eed;
	} else {
		return inClassId==(int)0x74b70e2f;
	}
}


hx::ObjectPtr< IncomingRequest_obj > IncomingRequest_obj::__new(::String clientIp, ::tink::http::IncomingRequestHeader header, ::tink::http::IncomingRequestBody body) {
	hx::ObjectPtr< IncomingRequest_obj > __this = new IncomingRequest_obj();
	__this->__construct(clientIp,header,body);
	return __this;
}

hx::ObjectPtr< IncomingRequest_obj > IncomingRequest_obj::__alloc(hx::Ctx *_hx_ctx,::String clientIp, ::tink::http::IncomingRequestHeader header, ::tink::http::IncomingRequestBody body) {
	IncomingRequest_obj *__this = (IncomingRequest_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(IncomingRequest_obj), true, "tink.http.IncomingRequest"));
	*(void **)__this = IncomingRequest_obj::_hx_vtable;
	__this->__construct(clientIp,header,body);
	return __this;
}

IncomingRequest_obj::IncomingRequest_obj()
{
}

void IncomingRequest_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(IncomingRequest);
	HX_MARK_MEMBER_NAME(clientIp,"clientIp");
	 ::tink::http::Message_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void IncomingRequest_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(clientIp,"clientIp");
	 ::tink::http::Message_obj::__Visit(HX_VISIT_ARG);
}

hx::Val IncomingRequest_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"clientIp") ) { return hx::Val( clientIp ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val IncomingRequest_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"clientIp") ) { clientIp=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void IncomingRequest_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("clientIp",12,73,8f,15));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo IncomingRequest_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(IncomingRequest_obj,clientIp),HX_("clientIp",12,73,8f,15)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *IncomingRequest_obj_sStaticStorageInfo = 0;
#endif

static ::String IncomingRequest_obj_sMemberFields[] = {
	HX_("clientIp",12,73,8f,15),
	::String(null()) };

hx::Class IncomingRequest_obj::__mClass;

void IncomingRequest_obj::__register()
{
	IncomingRequest_obj _hx_dummy;
	IncomingRequest_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("tink.http.IncomingRequest",ff,52,c9,ac);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(IncomingRequest_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< IncomingRequest_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IncomingRequest_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IncomingRequest_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace tink
} // end namespace http
