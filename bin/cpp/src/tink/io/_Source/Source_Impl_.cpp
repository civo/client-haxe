// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ds_Option
#include <haxe/ds/Option.h>
#endif
#ifndef INCLUDED_tink__Chunk_Chunk_Impl_
#include <tink/_Chunk/Chunk_Impl_.h>
#endif
#ifndef INCLUDED_tink_chunk_ChunkObject
#include <tink/chunk/ChunkObject.h>
#endif
#ifndef INCLUDED_tink_core__Future_FutureObject
#include <tink/core/_Future/FutureObject.h>
#endif
#ifndef INCLUDED_tink_core__Future_SyncFuture
#include <tink/core/_Future/SyncFuture.h>
#endif
#ifndef INCLUDED_tink_core__Lazy_LazyConst
#include <tink/core/_Lazy/LazyConst.h>
#endif
#ifndef INCLUDED_tink_core__Lazy_LazyObject
#include <tink/core/_Lazy/LazyObject.h>
#endif
#ifndef INCLUDED_tink_io_SinkObject
#include <tink/io/SinkObject.h>
#endif
#ifndef INCLUDED_tink_io__Source_Source_Impl_
#include <tink/io/_Source/Source_Impl_.h>
#endif
#ifndef INCLUDED_tink_streams_Empty
#include <tink/streams/Empty.h>
#endif
#ifndef INCLUDED_tink_streams_ReductionStep
#include <tink/streams/ReductionStep.h>
#endif
#ifndef INCLUDED_tink_streams_RegroupResult
#include <tink/streams/RegroupResult.h>
#endif
#ifndef INCLUDED_tink_streams_StreamBase
#include <tink/streams/StreamBase.h>
#endif
#ifndef INCLUDED_tink_streams_StreamObject
#include <tink/streams/StreamObject.h>
#endif
#ifndef INCLUDED_tink_streams__Stream_Reducer_Impl_
#include <tink/streams/_Stream/Reducer_Impl_.h>
#endif
#ifndef INCLUDED_tink_streams__Stream_Regrouper_Impl_
#include <tink/streams/_Stream/Regrouper_Impl_.h>
#endif
#ifndef INCLUDED_tink_streams__Stream_Stream_Impl_
#include <tink/streams/_Stream/Stream_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_874a30c36e3bdfa6_105_concatAll,"tink.io._Source.Source_Impl_","concatAll",0x50f7367a,"tink.io._Source.Source_Impl_.concatAll","tink/io/Source.hx",105,0x6a783477)
HX_LOCAL_STACK_FRAME(_hx_pos_874a30c36e3bdfa6_108_pipeTo,"tink.io._Source.Source_Impl_","pipeTo",0x101d611c,"tink.io._Source.Source_Impl_.pipeTo","tink/io/Source.hx",108,0x6a783477)
HX_LOCAL_STACK_FRAME(_hx_pos_874a30c36e3bdfa6_132_limit,"tink.io._Source.Source_Impl_","limit",0x67d77ec8,"tink.io._Source.Source_Impl_.limit","tink/io/Source.hx",132,0x6a783477)
HX_LOCAL_STACK_FRAME(_hx_pos_874a30c36e3bdfa6_130_limit,"tink.io._Source.Source_Impl_","limit",0x67d77ec8,"tink.io._Source.Source_Impl_.limit","tink/io/Source.hx",130,0x6a783477)
HX_LOCAL_STACK_FRAME(_hx_pos_874a30c36e3bdfa6_20_boot,"tink.io._Source.Source_Impl_","boot",0xe1c41545,"tink.io._Source.Source_Impl_.boot","tink/io/Source.hx",20,0x6a783477)
namespace tink{
namespace io{
namespace _Source{

void Source_Impl__obj::__construct() { }

Dynamic Source_Impl__obj::__CreateEmpty() { return new Source_Impl__obj; }

void *Source_Impl__obj::_hx_vtable = 0;

Dynamic Source_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Source_Impl__obj > _hx_result = new Source_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Source_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7ea106b1;
}

::Dynamic Source_Impl__obj::EMPTY;

::Dynamic Source_Impl__obj::concatAll(::Dynamic s){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		::Dynamic _hx_run(::Dynamic res,::Dynamic cur){
            			HX_GC_STACKFRAME(&_hx_pos_874a30c36e3bdfa6_105_concatAll)
HXDLIN( 105)			return  ::tink::core::_Future::SyncFuture_obj::__alloc( HX_CTX , ::tink::core::_Lazy::LazyConst_obj::__alloc( HX_CTX ,::tink::streams::ReductionStep_obj::Progress(::tink::_Chunk::Chunk_Impl__obj::catChunk(res,cur))));
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_874a30c36e3bdfa6_105_concatAll)
HXDLIN( 105)		::Dynamic _hx_tmp = ::tink::_Chunk::Chunk_Impl__obj::EMPTY;
HXDLIN( 105)		return ::tink::streams::StreamObject_obj::reduce(s,_hx_tmp,::tink::streams::_Stream::Reducer_Impl__obj::ofSafe( ::Dynamic(new _hx_Closure_0())));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Source_Impl__obj,concatAll,return )

::Dynamic Source_Impl__obj::pipeTo(::Dynamic this1,::Dynamic target, ::Dynamic options){
            	HX_STACKFRAME(&_hx_pos_874a30c36e3bdfa6_108_pipeTo)
HXDLIN( 108)		return ::tink::io::SinkObject_obj::consume(target,this1,options);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Source_Impl__obj,pipeTo,return )

::Dynamic Source_Impl__obj::limit(::Dynamic this1,int len){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< int >,len1) HXARGC(1)
            		 ::tink::streams::RegroupResult _hx_run(::Array< ::Dynamic> chunks){
            			HX_STACKFRAME(&_hx_pos_874a30c36e3bdfa6_132_limit)
HXLINE( 133)			if ((len1->__get(0) <= 0)) {
HXLINE( 133)				return ::tink::streams::RegroupResult_obj::Terminated(::haxe::ds::Option_obj::None_dyn());
            			}
HXLINE( 134)			::Dynamic chunk = chunks->__get(0);
HXLINE( 135)			int length = ::tink::chunk::ChunkObject_obj::getLength(chunk);
HXLINE( 136)			 ::tink::streams::RegroupResult out;
HXLINE( 137)			if ((len1->__get(0) == length)) {
HXLINE( 136)				out = ::tink::streams::RegroupResult_obj::Terminated(::haxe::ds::Option_obj::Some(::tink::streams::_Stream::Stream_Impl__obj::single(chunk)));
            			}
            			else {
HXLINE( 140)				::Dynamic out1;
HXDLIN( 140)				if ((len1->__get(0) < length)) {
HXLINE( 140)					out1 = ::tink::chunk::ChunkObject_obj::slice(chunk,0,len1->__get(0));
            				}
            				else {
HXLINE( 140)					out1 = chunk;
            				}
HXLINE( 136)				out = ::tink::streams::RegroupResult_obj::Converted(::tink::streams::_Stream::Stream_Impl__obj::single(out1));
            			}
HXLINE( 141)			::Array< int > len2 = len1;
HXDLIN( 141)			int _hx_tmp = 0;
HXDLIN( 141)			len2[_hx_tmp] = (len2->__get(_hx_tmp) - length);
HXLINE( 142)			return out;
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_874a30c36e3bdfa6_130_limit)
HXDLIN( 130)		::Array< int > len1 = ::Array_obj< int >::__new(1)->init(0,len);
HXLINE( 131)		if ((len1->__get(0) == 0)) {
HXLINE( 131)			return ::tink::io::_Source::Source_Impl__obj::EMPTY;
            		}
HXLINE( 132)		return ::tink::streams::StreamObject_obj::regroup(this1,::tink::streams::_Stream::Regrouper_Impl__obj::ofIgnoranceSync( ::Dynamic(new _hx_Closure_0(len1))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Source_Impl__obj,limit,return )


Source_Impl__obj::Source_Impl__obj()
{
}

bool Source_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"limit") ) { outValue = limit_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"pipeTo") ) { outValue = pipeTo_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"concatAll") ) { outValue = concatAll_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Source_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo Source_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsObject /* ::Dynamic */ ,(void *) &Source_Impl__obj::EMPTY,HX_("EMPTY",6d,72,c8,ed)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Source_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Source_Impl__obj::EMPTY,"EMPTY");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Source_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Source_Impl__obj::EMPTY,"EMPTY");
};

#endif

hx::Class Source_Impl__obj::__mClass;

static ::String Source_Impl__obj_sStaticFields[] = {
	HX_("EMPTY",6d,72,c8,ed),
	HX_("concatAll",6d,8c,85,fa),
	HX_("pipeTo",49,25,60,87),
	HX_("limit",3b,1f,01,75),
	::String(null())
};

void Source_Impl__obj::__register()
{
	Source_Impl__obj _hx_dummy;
	Source_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("tink.io._Source.Source_Impl_",3b,68,7b,b2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Source_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Source_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Source_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Source_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Source_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Source_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Source_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Source_Impl__obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_874a30c36e3bdfa6_20_boot)
HXDLIN(  20)		EMPTY = ::tink::streams::Empty_obj::inst;
            	}
}

} // end namespace tink
} // end namespace io
} // end namespace _Source
