// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_tink_chunk_ChunkObject
#include <tink/chunk/ChunkObject.h>
#endif
#ifndef INCLUDED_tink_core__Future_FutureObject
#include <tink/core/_Future/FutureObject.h>
#endif
#ifndef INCLUDED_tink_io_IdealSourceTools
#include <tink/io/IdealSourceTools.h>
#endif
#ifndef INCLUDED_tink_io__Source_Source_Impl_
#include <tink/io/_Source/Source_Impl_.h>
#endif
#ifndef INCLUDED_tink_streams_Reduction
#include <tink/streams/Reduction.h>
#endif
#ifndef INCLUDED_tink_streams_StreamObject
#include <tink/streams/StreamObject.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_9b8251c0835d69cc_206_all,"tink.io.IdealSourceTools","all",0xf5d8a70a,"tink.io.IdealSourceTools.all","tink/io/Source.hx",206,0x6a783477)
namespace tink{
namespace io{

void IdealSourceTools_obj::__construct() { }

Dynamic IdealSourceTools_obj::__CreateEmpty() { return new IdealSourceTools_obj; }

void *IdealSourceTools_obj::_hx_vtable = 0;

Dynamic IdealSourceTools_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< IdealSourceTools_obj > _hx_result = new IdealSourceTools_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool IdealSourceTools_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x71df6723;
}

::Dynamic IdealSourceTools_obj::all(::Dynamic s){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		::Dynamic _hx_run( ::tink::streams::Reduction o){
            			HX_STACKFRAME(&_hx_pos_9b8251c0835d69cc_206_all)
HXLINE( 207)			::Dynamic c = o->_hx_getObject(0);
HXDLIN( 207)			return c;
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_9b8251c0835d69cc_206_all)
HXDLIN( 206)		::Dynamic ret = ::tink::core::_Future::FutureObject_obj::map(::tink::io::_Source::Source_Impl__obj::concatAll(s), ::Dynamic(new _hx_Closure_0()));
HXDLIN( 206)		return ::tink::core::_Future::FutureObject_obj::gather(ret);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(IdealSourceTools_obj,all,return )


IdealSourceTools_obj::IdealSourceTools_obj()
{
}

bool IdealSourceTools_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"all") ) { outValue = all_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *IdealSourceTools_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *IdealSourceTools_obj_sStaticStorageInfo = 0;
#endif

hx::Class IdealSourceTools_obj::__mClass;

static ::String IdealSourceTools_obj_sStaticFields[] = {
	HX_("all",21,f9,49,00),
	::String(null())
};

void IdealSourceTools_obj::__register()
{
	IdealSourceTools_obj _hx_dummy;
	IdealSourceTools_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("tink.io.IdealSourceTools",d7,a5,c9,d5);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &IdealSourceTools_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(IdealSourceTools_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< IdealSourceTools_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IdealSourceTools_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IdealSourceTools_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace tink
} // end namespace io
