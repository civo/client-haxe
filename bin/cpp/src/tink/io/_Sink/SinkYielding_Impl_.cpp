// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_tink_io_SinkBase
#include <tink/io/SinkBase.h>
#endif
#ifndef INCLUDED_tink_io_SinkObject
#include <tink/io/SinkObject.h>
#endif
#ifndef INCLUDED_tink_io_WorkerObject
#include <tink/io/WorkerObject.h>
#endif
#ifndef INCLUDED_tink_io__Sink_SinkYielding_Impl_
#include <tink/io/_Sink/SinkYielding_Impl_.h>
#endif
#ifndef INCLUDED_tink_io__Worker_Worker_Impl_
#include <tink/io/_Worker/Worker_Impl_.h>
#endif
#ifndef INCLUDED_tink_io_std_OutputSink
#include <tink/io/std/OutputSink.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_2f11c85b062cce50_52_ofOutput,"tink.io._Sink.SinkYielding_Impl_","ofOutput",0x985bfe16,"tink.io._Sink.SinkYielding_Impl_.ofOutput","tink/io/Sink.hx",52,0x6103f4ff)
namespace tink{
namespace io{
namespace _Sink{

void SinkYielding_Impl__obj::__construct() { }

Dynamic SinkYielding_Impl__obj::__CreateEmpty() { return new SinkYielding_Impl__obj; }

void *SinkYielding_Impl__obj::_hx_vtable = 0;

Dynamic SinkYielding_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SinkYielding_Impl__obj > _hx_result = new SinkYielding_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SinkYielding_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x235372a2;
}

::Dynamic SinkYielding_Impl__obj::ofOutput(::String name, ::haxe::io::Output target, ::Dynamic options){
            	HX_GC_STACKFRAME(&_hx_pos_2f11c85b062cce50_52_ofOutput)
HXDLIN(  52)		::Dynamic _hx_tmp;
HXDLIN(  52)		if (hx::IsNull( options )) {
HXDLIN(  52)			_hx_tmp = ::tink::io::_Worker::Worker_Impl__obj::get();
            		}
            		else {
HXDLIN(  52)			::Dynamic _g =  ::Dynamic(options->__Field(HX_("worker",7e,30,9e,c9),hx::paccDynamic));
HXLINE(  53)			if (hx::IsNull( _g )) {
HXDLIN(  52)				_hx_tmp = ::tink::io::_Worker::Worker_Impl__obj::get();
            			}
            			else {
HXLINE(  54)				::Dynamic w = _g;
HXLINE(  52)				_hx_tmp = w;
            			}
            		}
HXDLIN(  52)		return  ::tink::io::std::OutputSink_obj::__alloc( HX_CTX ,name,target,_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(SinkYielding_Impl__obj,ofOutput,return )


SinkYielding_Impl__obj::SinkYielding_Impl__obj()
{
}

bool SinkYielding_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"ofOutput") ) { outValue = ofOutput_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *SinkYielding_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *SinkYielding_Impl__obj_sStaticStorageInfo = 0;
#endif

hx::Class SinkYielding_Impl__obj::__mClass;

static ::String SinkYielding_Impl__obj_sStaticFields[] = {
	HX_("ofOutput",78,4f,82,9f),
	::String(null())
};

void SinkYielding_Impl__obj::__register()
{
	SinkYielding_Impl__obj _hx_dummy;
	SinkYielding_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("tink.io._Sink.SinkYielding_Impl_",90,fd,a2,0c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SinkYielding_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(SinkYielding_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< SinkYielding_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SinkYielding_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SinkYielding_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace tink
} // end namespace io
} // end namespace _Sink
