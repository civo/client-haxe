// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_tink__Chunk_Chunk_Impl_
#include <tink/_Chunk/Chunk_Impl_.h>
#endif
#ifndef INCLUDED_tink__Chunk_CompoundChunk
#include <tink/_Chunk/CompoundChunk.h>
#endif
#ifndef INCLUDED_tink_chunk_ByteChunk
#include <tink/chunk/ByteChunk.h>
#endif
#ifndef INCLUDED_tink_chunk_ChunkBase
#include <tink/chunk/ChunkBase.h>
#endif
#ifndef INCLUDED_tink_chunk_ChunkObject
#include <tink/chunk/ChunkObject.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cbb31b6090dea3f3_47_new,"tink._Chunk.CompoundChunk","new",0xb206b8f0,"tink._Chunk.CompoundChunk.new","tink/Chunk.hx",47,0x4d5f868e)
HX_LOCAL_STACK_FRAME(_hx_pos_cbb31b6090dea3f3_45_getLength,"tink._Chunk.CompoundChunk","getLength",0xf641d2ac,"tink._Chunk.CompoundChunk.getLength","tink/Chunk.hx",45,0x4d5f868e)
HX_LOCAL_STACK_FRAME(_hx_pos_cbb31b6090dea3f3_58_flatten,"tink._Chunk.CompoundChunk","flatten",0x39f61c54,"tink._Chunk.CompoundChunk.flatten","tink/Chunk.hx",58,0x4d5f868e)
HX_LOCAL_STACK_FRAME(_hx_pos_cbb31b6090dea3f3_64_slice,"tink._Chunk.CompoundChunk","slice",0x3171f0e2,"tink._Chunk.CompoundChunk.slice","tink/Chunk.hx",64,0x4d5f868e)
HX_LOCAL_STACK_FRAME(_hx_pos_cbb31b6090dea3f3_67_blitTo,"tink._Chunk.CompoundChunk","blitTo",0x463c8a80,"tink._Chunk.CompoundChunk.blitTo","tink/Chunk.hx",67,0x4d5f868e)
HX_LOCAL_STACK_FRAME(_hx_pos_cbb31b6090dea3f3_73_toString,"tink._Chunk.CompoundChunk","toString",0x8096de1c,"tink._Chunk.CompoundChunk.toString","tink/Chunk.hx",73,0x4d5f868e)
HX_LOCAL_STACK_FRAME(_hx_pos_cbb31b6090dea3f3_75_toBytes,"tink._Chunk.CompoundChunk","toBytes",0xdd16c580,"tink._Chunk.CompoundChunk.toBytes","tink/Chunk.hx",75,0x4d5f868e)
namespace tink{
namespace _Chunk{

void CompoundChunk_obj::__construct(::Dynamic left,::Dynamic right){
            	HX_STACKFRAME(&_hx_pos_cbb31b6090dea3f3_47_new)
HXLINE(  52)		this->left = left;
HXLINE(  53)		this->right = right;
HXLINE(  54)		this->split = ::tink::chunk::ChunkObject_obj::getLength(left);
HXLINE(  55)		int _hx_tmp = this->split;
HXDLIN(  55)		this->length = (_hx_tmp + ::tink::chunk::ChunkObject_obj::getLength(right));
            	}

Dynamic CompoundChunk_obj::__CreateEmpty() { return new CompoundChunk_obj; }

void *CompoundChunk_obj::_hx_vtable = 0;

Dynamic CompoundChunk_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CompoundChunk_obj > _hx_result = new CompoundChunk_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool CompoundChunk_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3872b523) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x3872b523;
	} else {
		return inClassId==(int)0x3df536fe;
	}
}

static ::tink::chunk::ChunkObject_obj _hx_tink__Chunk_CompoundChunk__hx_tink_chunk_ChunkObject= {
	(  ::tink::chunk::ChunkCursor (hx::Object::*)())&::tink::_Chunk::CompoundChunk_obj::getCursor,
	( void (hx::Object::*)(::Array< ::Dynamic>))&::tink::_Chunk::CompoundChunk_obj::flatten,
	( int (hx::Object::*)())&::tink::_Chunk::CompoundChunk_obj::getLength,
	( ::Dynamic (hx::Object::*)(int,int))&::tink::_Chunk::CompoundChunk_obj::slice,
	( ::String (hx::Object::*)())&::tink::_Chunk::CompoundChunk_obj::toString,
	(  ::haxe::io::Bytes (hx::Object::*)())&::tink::_Chunk::CompoundChunk_obj::toBytes,
	( void (hx::Object::*)( ::haxe::io::Bytes,int))&::tink::_Chunk::CompoundChunk_obj::blitTo,
};

void *CompoundChunk_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x027c3451: return &_hx_tink__Chunk_CompoundChunk__hx_tink_chunk_ChunkObject;
	}
	return super::_hx_getInterface(inHash);
}

int CompoundChunk_obj::getLength(){
            	HX_STACKFRAME(&_hx_pos_cbb31b6090dea3f3_45_getLength)
HXDLIN(  45)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(CompoundChunk_obj,getLength,return )

void CompoundChunk_obj::flatten(::Array< ::Dynamic> into){
            	HX_STACKFRAME(&_hx_pos_cbb31b6090dea3f3_58_flatten)
HXLINE(  59)		::tink::chunk::ChunkObject_obj::flatten(this->left,into);
HXLINE(  60)		::tink::chunk::ChunkObject_obj::flatten(this->right,into);
            	}


::Dynamic CompoundChunk_obj::slice(int from,int to){
            	HX_STACKFRAME(&_hx_pos_cbb31b6090dea3f3_64_slice)
HXLINE(  65)		::Dynamic _hx_tmp = ::tink::chunk::ChunkObject_obj::slice(this->left,from,to);
HXLINE(  64)		return ::tink::_Chunk::Chunk_Impl__obj::concat(_hx_tmp,::tink::chunk::ChunkObject_obj::slice(this->right,(from - this->split),(to - this->split)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(CompoundChunk_obj,slice,return )

void CompoundChunk_obj::blitTo( ::haxe::io::Bytes target,int offset){
            	HX_STACKFRAME(&_hx_pos_cbb31b6090dea3f3_67_blitTo)
HXLINE(  68)		::tink::chunk::ChunkObject_obj::blitTo(this->left,target,offset);
HXLINE(  69)		::tink::chunk::ChunkObject_obj::blitTo(this->right,target,(offset + this->split));
            	}


HX_DEFINE_DYNAMIC_FUNC2(CompoundChunk_obj,blitTo,(void))

::String CompoundChunk_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_cbb31b6090dea3f3_73_toString)
HXDLIN(  73)		return this->toBytes()->toString();
            	}


HX_DEFINE_DYNAMIC_FUNC0(CompoundChunk_obj,toString,return )

 ::haxe::io::Bytes CompoundChunk_obj::toBytes(){
            	HX_STACKFRAME(&_hx_pos_cbb31b6090dea3f3_75_toBytes)
HXLINE(  76)		 ::haxe::io::Bytes ret = ::haxe::io::Bytes_obj::alloc(this->length);
HXLINE(  77)		this->blitTo(ret,0);
HXLINE(  78)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(CompoundChunk_obj,toBytes,return )


hx::ObjectPtr< CompoundChunk_obj > CompoundChunk_obj::__new(::Dynamic left,::Dynamic right) {
	hx::ObjectPtr< CompoundChunk_obj > __this = new CompoundChunk_obj();
	__this->__construct(left,right);
	return __this;
}

hx::ObjectPtr< CompoundChunk_obj > CompoundChunk_obj::__alloc(hx::Ctx *_hx_ctx,::Dynamic left,::Dynamic right) {
	CompoundChunk_obj *__this = (CompoundChunk_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CompoundChunk_obj), true, "tink._Chunk.CompoundChunk"));
	*(void **)__this = CompoundChunk_obj::_hx_vtable;
	__this->__construct(left,right);
	return __this;
}

CompoundChunk_obj::CompoundChunk_obj()
{
}

void CompoundChunk_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CompoundChunk);
	HX_MARK_MEMBER_NAME(left,"left");
	HX_MARK_MEMBER_NAME(right,"right");
	HX_MARK_MEMBER_NAME(split,"split");
	HX_MARK_MEMBER_NAME(length,"length");
	 ::tink::chunk::ChunkBase_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CompoundChunk_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(left,"left");
	HX_VISIT_MEMBER_NAME(right,"right");
	HX_VISIT_MEMBER_NAME(split,"split");
	HX_VISIT_MEMBER_NAME(length,"length");
	 ::tink::chunk::ChunkBase_obj::__Visit(HX_VISIT_ARG);
}

hx::Val CompoundChunk_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { return hx::Val( left ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { return hx::Val( right ); }
		if (HX_FIELD_EQ(inName,"split") ) { return hx::Val( split ); }
		if (HX_FIELD_EQ(inName,"slice") ) { return hx::Val( slice_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length ); }
		if (HX_FIELD_EQ(inName,"blitTo") ) { return hx::Val( blitTo_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"flatten") ) { return hx::Val( flatten_dyn() ); }
		if (HX_FIELD_EQ(inName,"toBytes") ) { return hx::Val( toBytes_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getLength") ) { return hx::Val( getLength_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val CompoundChunk_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { left=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { right=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"split") ) { split=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CompoundChunk_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("left",07,08,b0,47));
	outFields->push(HX_("right",dc,0b,64,e9));
	outFields->push(HX_("split",da,ea,6e,81));
	outFields->push(HX_("length",e6,94,07,9f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo CompoundChunk_obj_sMemberStorageInfo[] = {
	{hx::fsObject /* ::Dynamic */ ,(int)offsetof(CompoundChunk_obj,left),HX_("left",07,08,b0,47)},
	{hx::fsObject /* ::Dynamic */ ,(int)offsetof(CompoundChunk_obj,right),HX_("right",dc,0b,64,e9)},
	{hx::fsInt,(int)offsetof(CompoundChunk_obj,split),HX_("split",da,ea,6e,81)},
	{hx::fsInt,(int)offsetof(CompoundChunk_obj,length),HX_("length",e6,94,07,9f)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *CompoundChunk_obj_sStaticStorageInfo = 0;
#endif

static ::String CompoundChunk_obj_sMemberFields[] = {
	HX_("left",07,08,b0,47),
	HX_("right",dc,0b,64,e9),
	HX_("split",da,ea,6e,81),
	HX_("length",e6,94,07,9f),
	HX_("getLength",1c,1e,5e,1b),
	HX_("flatten",c4,ab,fb,e6),
	HX_("slice",52,c4,c7,7e),
	HX_("blitTo",10,b9,ff,a3),
	HX_("toString",ac,d0,6e,38),
	HX_("toBytes",f0,54,1c,8a),
	::String(null()) };

hx::Class CompoundChunk_obj::__mClass;

void CompoundChunk_obj::__register()
{
	CompoundChunk_obj _hx_dummy;
	CompoundChunk_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("tink._Chunk.CompoundChunk",fe,c0,a3,d6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CompoundChunk_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CompoundChunk_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CompoundChunk_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CompoundChunk_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace tink
} // end namespace _Chunk
