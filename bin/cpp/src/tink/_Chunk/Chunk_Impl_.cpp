// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_tink__Chunk_Chunk_Impl_
#include <tink/_Chunk/Chunk_Impl_.h>
#endif
#ifndef INCLUDED_tink__Chunk_CompoundChunk
#include <tink/_Chunk/CompoundChunk.h>
#endif
#ifndef INCLUDED_tink__Chunk_EmptyChunk
#include <tink/_Chunk/EmptyChunk.h>
#endif
#ifndef INCLUDED_tink_chunk_ChunkBase
#include <tink/chunk/ChunkBase.h>
#endif
#ifndef INCLUDED_tink_chunk_ChunkObject
#include <tink/chunk/ChunkObject.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_b22acae31597a4db_95_concat,"tink._Chunk.Chunk_Impl_","concat",0x8ff9ad19,"tink._Chunk.Chunk_Impl_.concat","tink/Chunk.hx",95,0x4d5f868e)
HX_LOCAL_STACK_FRAME(_hx_pos_b22acae31597a4db_129_join,"tink._Chunk.Chunk_Impl_","join",0x4d1f5caf,"tink._Chunk.Chunk_Impl_.join","tink/Chunk.hx",129,0x4d5f868e)
HX_LOCAL_STACK_FRAME(_hx_pos_b22acae31597a4db_158_catChunk,"tink._Chunk.Chunk_Impl_","catChunk",0x7b58a1bc,"tink._Chunk.Chunk_Impl_.catChunk","tink/Chunk.hx",158,0x4d5f868e)
HX_LOCAL_STACK_FRAME(_hx_pos_b22acae31597a4db_182_boot,"tink._Chunk.Chunk_Impl_","boot",0x47d5acf7,"tink._Chunk.Chunk_Impl_.boot","tink/Chunk.hx",182,0x4d5f868e)
namespace tink{
namespace _Chunk{

void Chunk_Impl__obj::__construct() { }

Dynamic Chunk_Impl__obj::__CreateEmpty() { return new Chunk_Impl__obj; }

void *Chunk_Impl__obj::_hx_vtable = 0;

Dynamic Chunk_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Chunk_Impl__obj > _hx_result = new Chunk_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Chunk_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x568518ad;
}

::Dynamic Chunk_Impl__obj::concat(::Dynamic this1,::Dynamic that){
            	HX_GC_STACKFRAME(&_hx_pos_b22acae31597a4db_95_concat)
HXDLIN(  95)		int _g = ::tink::chunk::ChunkObject_obj::getLength(that);
HXDLIN(  95)		if ((::tink::chunk::ChunkObject_obj::getLength(this1) == 0)) {
HXDLIN(  95)			if ((_g == 0)) {
HXLINE(  96)				return ::tink::_Chunk::Chunk_Impl__obj::EMPTY;
            			}
            			else {
HXLINE(  97)				return that;
            			}
            		}
            		else {
HXDLIN(  95)			if ((_g == 0)) {
HXLINE(  98)				return this1;
            			}
            			else {
HXLINE(  99)				return  ::tink::_Chunk::CompoundChunk_obj::__alloc( HX_CTX ,this1,that);
            			}
            		}
HXLINE(  95)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Chunk_Impl__obj,concat,return )

::Dynamic Chunk_Impl__obj::join(::Array< ::Dynamic> chunks){
            	HX_STACKFRAME(&_hx_pos_b22acae31597a4db_129_join)
HXDLIN( 129)		if (hx::IsNull( chunks )) {
HXLINE( 130)			return ::tink::_Chunk::Chunk_Impl__obj::EMPTY;
            		}
            		else {
HXDLIN( 129)			switch((int)(chunks->length)){
            				case (int)0: {
HXLINE( 130)					return ::tink::_Chunk::Chunk_Impl__obj::EMPTY;
            				}
            				break;
            				case (int)1: {
HXLINE( 131)					::Dynamic v = chunks->__get(0);
HXDLIN( 131)					return v;
            				}
            				break;
            				default:{
HXLINE( 132)					::Array< ::Dynamic> v1 = chunks;
HXLINE( 133)					::Dynamic ret = ::tink::_Chunk::Chunk_Impl__obj::catChunk(v1->__get(0),v1->__get(1));
HXLINE( 134)					{
HXLINE( 134)						int _g = 2;
HXDLIN( 134)						int _g1 = v1->length;
HXDLIN( 134)						while((_g < _g1)){
HXLINE( 134)							_g = (_g + 1);
HXDLIN( 134)							int i = (_g - 1);
HXLINE( 135)							ret = ::tink::_Chunk::Chunk_Impl__obj::catChunk(ret,v1->__get(i));
            						}
            					}
HXLINE( 136)					return ret;
            				}
            			}
            		}
HXLINE( 129)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Chunk_Impl__obj,join,return )

::Dynamic Chunk_Impl__obj::catChunk(::Dynamic a,::Dynamic b){
            	HX_STACKFRAME(&_hx_pos_b22acae31597a4db_158_catChunk)
HXDLIN( 158)		return ::tink::_Chunk::Chunk_Impl__obj::concat(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Chunk_Impl__obj,catChunk,return )

::Dynamic Chunk_Impl__obj::EMPTY;


Chunk_Impl__obj::Chunk_Impl__obj()
{
}

bool Chunk_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"join") ) { outValue = join_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"concat") ) { outValue = concat_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"catChunk") ) { outValue = catChunk_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Chunk_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo Chunk_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsObject /* ::Dynamic */ ,(void *) &Chunk_Impl__obj::EMPTY,HX_("EMPTY",6d,72,c8,ed)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Chunk_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Chunk_Impl__obj::EMPTY,"EMPTY");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Chunk_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Chunk_Impl__obj::EMPTY,"EMPTY");
};

#endif

hx::Class Chunk_Impl__obj::__mClass;

static ::String Chunk_Impl__obj_sStaticFields[] = {
	HX_("concat",14,09,d0,c7),
	HX_("join",ea,33,65,46),
	HX_("catChunk",77,32,7a,1a),
	HX_("EMPTY",6d,72,c8,ed),
	::String(null())
};

void Chunk_Impl__obj::__register()
{
	Chunk_Impl__obj _hx_dummy;
	Chunk_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("tink._Chunk.Chunk_Impl_",c9,ed,74,63);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Chunk_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Chunk_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Chunk_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Chunk_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Chunk_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Chunk_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Chunk_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Chunk_Impl__obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_b22acae31597a4db_182_boot)
HXDLIN( 182)		EMPTY =  ::tink::_Chunk::EmptyChunk_obj::__alloc( HX_CTX );
            	}
}

} // end namespace tink
} // end namespace _Chunk
