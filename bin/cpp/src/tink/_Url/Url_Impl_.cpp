// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_tink__Url_Url_Impl_
#include <tink/_Url/Url_Impl_.h>
#endif
#ifndef INCLUDED_tink_url__Host_Host_Impl_
#include <tink/url/_Host/Host_Impl_.h>
#endif
#ifndef INCLUDED_tink_url__Path_Path_Impl_
#include <tink/url/_Path/Path_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_0918bb212228a32b_27_resolve,"tink._Url.Url_Impl_","resolve",0xaf0fed0b,"tink._Url.Url_Impl_.resolve","tink/Url.hx",27,0x591f7d8c)
HX_LOCAL_STACK_FRAME(_hx_pos_0918bb212228a32b_51_makePayload,"tink._Url.Url_Impl_","makePayload",0xb050bcdf,"tink._Url.Url_Impl_.makePayload","tink/Url.hx",51,0x591f7d8c)
HX_LOCAL_STACK_FRAME(_hx_pos_0918bb212228a32b_82_toString,"tink._Url.Url_Impl_","toString",0xaa9dd1ad,"tink._Url.Url_Impl_.toString","tink/Url.hx",82,0x591f7d8c)
HX_LOCAL_STACK_FRAME(_hx_pos_0918bb212228a32b_86_fromString,"tink._Url.Url_Impl_","fromString",0xf126311c,"tink._Url.Url_Impl_.fromString","tink/Url.hx",86,0x591f7d8c)
HX_LOCAL_STACK_FRAME(_hx_pos_0918bb212228a32b_87_noop,"tink._Url.Url_Impl_","noop",0x77024023,"tink._Url.Url_Impl_.noop","tink/Url.hx",87,0x591f7d8c)
HX_LOCAL_STACK_FRAME(_hx_pos_0918bb212228a32b_88_parse,"tink._Url.Url_Impl_","parse",0xc8845492,"tink._Url.Url_Impl_.parse","tink/Url.hx",88,0x591f7d8c)
namespace tink{
namespace _Url{

void Url_Impl__obj::__construct() { }

Dynamic Url_Impl__obj::__CreateEmpty() { return new Url_Impl__obj; }

void *Url_Impl__obj::_hx_vtable = 0;

Dynamic Url_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Url_Impl__obj > _hx_result = new Url_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Url_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5c871665;
}

 ::Dynamic Url_Impl__obj::resolve( ::Dynamic this1, ::Dynamic that){
            	HX_STACKFRAME(&_hx_pos_0918bb212228a32b_27_resolve)
HXDLIN(  27)		if (hx::IsNotNull( that->__Field(HX_("scheme",25,20,c1,40),hx::paccDynamic) )) {
HXDLIN(  27)			return that;
            		}
            		else {
HXLINE(  28)			if (hx::IsNotNull( that->__Field(HX_("host",68,cf,12,45),hx::paccDynamic) )) {
HXLINE(  29)				if (hx::IsNotNull( that->__Field(HX_("scheme",25,20,c1,40),hx::paccDynamic) )) {
HXLINE(  29)					return that;
            				}
            				else {
HXLINE(  31)					 ::Dynamic copy = ::Reflect_obj::copy(that);
HXLINE(  32)					copy->__SetField(HX_("scheme",25,20,c1,40),this1->__Field(HX_("scheme",25,20,c1,40),hx::paccDynamic),hx::paccDynamic);
HXLINE(  33)					return copy;
            				}
            			}
            			else {
HXLINE(  37)				::String parts = ::tink::url::_Path::Path_Impl__obj::join(( (::String)(this1->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ),( (::String)(that->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ));
HXLINE(  36)				 ::Dynamic parts1 =  ::Dynamic(hx::Anon_obj::Create(7)
            					->setFixed(0,HX_("payload",8e,bf,35,ed),HX_("",00,00,00,00))
            					->setFixed(1,HX_("auth",68,df,76,40), ::Dynamic(this1->__Field(HX_("auth",68,df,76,40),hx::paccDynamic)))
            					->setFixed(2,HX_("scheme",25,20,c1,40), ::Dynamic(this1->__Field(HX_("scheme",25,20,c1,40),hx::paccDynamic)))
            					->setFixed(3,HX_("hash",ce,2f,08,45), ::Dynamic(that->__Field(HX_("hash",ce,2f,08,45),hx::paccDynamic)))
            					->setFixed(4,HX_("host",68,cf,12,45), ::Dynamic(this1->__Field(HX_("host",68,cf,12,45),hx::paccDynamic)))
            					->setFixed(5,HX_("path",a5,e5,51,4a),parts)
            					->setFixed(6,HX_("query",08,8b,ea,5d), ::Dynamic(that->__Field(HX_("query",08,8b,ea,5d),hx::paccDynamic))));
HXLINE(  46)				::tink::_Url::Url_Impl__obj::makePayload(parts1);
HXLINE(  48)				 ::Dynamic this2 = parts1;
HXDLIN(  48)				return this2;
            			}
            		}
HXLINE(  27)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Url_Impl__obj,resolve,return )

void Url_Impl__obj::makePayload( ::Dynamic parts){
            	HX_STACKFRAME(&_hx_pos_0918bb212228a32b_51_makePayload)
HXLINE(  53)		::String payload = HX_("",00,00,00,00);
HXLINE(  55)		{
HXLINE(  55)			::String _g7 = ( (::String)(parts->__Field(HX_("scheme",25,20,c1,40),hx::paccDynamic)) );
HXDLIN(  55)			::String _g6 = ( (::String)(parts->__Field(HX_("query",08,8b,ea,5d),hx::paccDynamic)) );
HXDLIN(  55)			::String _g5 = ( (::String)(parts->__Field(HX_("payload",8e,bf,35,ed),hx::paccDynamic)) );
HXDLIN(  55)			::String _g4 = ( (::String)(parts->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) );
HXDLIN(  55)			 ::Dynamic _g3 = parts->__Field(HX_("hosts",0b,ac,62,2b),hx::paccDynamic);
HXDLIN(  55)			::String _g2 = ( (::String)(parts->__Field(HX_("host",68,cf,12,45),hx::paccDynamic)) );
HXDLIN(  55)			::String _g1 = ( (::String)(parts->__Field(HX_("hash",ce,2f,08,45),hx::paccDynamic)) );
HXDLIN(  55)			::String _g = ( (::String)(parts->__Field(HX_("auth",68,df,76,40),hx::paccDynamic)) );
HXLINE(  56)			if (hx::IsNull( _g )) {
HXLINE(  56)				if (hx::IsNotNull( _g2 )) {
HXLINE(  57)					::String host = _g2;
HXLINE(  58)					payload = (payload + (HX_("//",20,29,00,00) + host));
            				}
            			}
            			else {
HXLINE(  59)				if (hx::IsNull( _g2 )) {
HXLINE(  59)					::String auth = _g;
HXLINE(  60)					::String payload1;
HXDLIN(  60)					if (hx::IsNull( auth )) {
HXLINE(  60)						payload1 = HX_("",00,00,00,00);
            					}
            					else {
HXLINE(  60)						payload1 = ((HX_("",00,00,00,00) + auth) + HX_("@",40,00,00,00));
            					}
HXDLIN(  60)					payload = (payload + (HX_("//",20,29,00,00) + payload1));
            				}
            				else {
HXLINE(  61)					::String auth1 = _g;
HXDLIN(  61)					::String host1 = _g2;
HXLINE(  62)					::String payload2;
HXDLIN(  62)					if (hx::IsNull( auth1 )) {
HXLINE(  62)						payload2 = HX_("",00,00,00,00);
            					}
            					else {
HXLINE(  62)						payload2 = ((HX_("",00,00,00,00) + auth1) + HX_("@",40,00,00,00));
            					}
HXDLIN(  62)					payload = (payload + ((HX_("//",20,29,00,00) + payload2) + host1));
            				}
            			}
            		}
HXLINE(  65)		payload = (payload + ( (::String)(parts->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ));
HXLINE(  67)		{
HXLINE(  67)			::String _g8 = ( (::String)(parts->__Field(HX_("query",08,8b,ea,5d),hx::paccDynamic)) );
HXLINE(  68)			if (hx::IsNotNull( _g8 )) {
HXLINE(  69)				::String v = _g8;
HXDLIN(  69)				payload = (payload + (HX_("?",3f,00,00,00) + v));
            			}
            		}
HXLINE(  72)		{
HXLINE(  72)			::String _g9 = ( (::String)(parts->__Field(HX_("hash",ce,2f,08,45),hx::paccDynamic)) );
HXLINE(  73)			if (hx::IsNotNull( _g9 )) {
HXLINE(  74)				::String v1 = _g9;
HXDLIN(  74)				payload = (payload + (HX_("#",23,00,00,00) + v1));
            			}
            		}
HXLINE(  77)		parts->__SetField(HX_("payload",8e,bf,35,ed),payload.toString(),hx::paccDynamic);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Url_Impl__obj,makePayload,(void))

::String Url_Impl__obj::toString( ::Dynamic this1){
            	HX_STACKFRAME(&_hx_pos_0918bb212228a32b_82_toString)
HXDLIN(  82)		if (hx::IsNull( this1->__Field(HX_("scheme",25,20,c1,40),hx::paccDynamic) )) {
HXDLIN(  82)			return ( (::String)(this1->__Field(HX_("payload",8e,bf,35,ed),hx::paccDynamic)) );
            		}
            		else {
HXLINE(  83)			return ( (::String)((((HX_("",00,00,00,00) + this1->__Field(HX_("scheme",25,20,c1,40),hx::paccDynamic)) + HX_(":",3a,00,00,00)) + this1->__Field(HX_("payload",8e,bf,35,ed),hx::paccDynamic))) );
            		}
HXLINE(  82)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Url_Impl__obj,toString,return )

 ::Dynamic Url_Impl__obj::fromString(::String s){
            	HX_STACKFRAME(&_hx_pos_0918bb212228a32b_86_fromString)
HXDLIN(  86)		return ::tink::_Url::Url_Impl__obj::parse(s,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Url_Impl__obj,fromString,return )

void Url_Impl__obj::noop(::String _){
            	HX_STACKFRAME(&_hx_pos_0918bb212228a32b_87_noop)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Url_Impl__obj,noop,(void))

 ::Dynamic Url_Impl__obj::parse(::String s, ::Dynamic onError){
            	HX_GC_STACKFRAME(&_hx_pos_0918bb212228a32b_88_parse)
HXLINE(  90)		if (hx::IsNull( s )) {
HXLINE(  91)			return ::tink::_Url::Url_Impl__obj::parse(HX_("",00,00,00,00),null());
            		}
HXLINE(  93)		if (hx::IsNull( onError )) {
HXLINE(  94)			onError = ::tink::_Url::Url_Impl__obj::noop_dyn();
            		}
HXLINE(  96)		s = ::StringTools_obj::trim(s);
HXLINE(  98)		if (::StringTools_obj::startsWith(s,HX_("data:",d0,0e,88,d4))) {
HXLINE(  99)			 ::Dynamic this1 =  ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("payload",8e,bf,35,ed),s.substr(5,null()))
            				->setFixed(1,HX_("scheme",25,20,c1,40),HX_("data",2a,56,63,42)));
HXDLIN(  99)			return this1;
            		}
HXLINE( 101)		 ::EReg FORMAT =  ::EReg_obj::__alloc( HX_CTX ,HX_("^(([a-zA-Z][a-zA-Z0-9\\-+.]*):)?((//(([^@/]+)@)?([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?)$",01,fd,14,be),HX_("",00,00,00,00));
HXLINE( 102)		 ::EReg HOST =  ::EReg_obj::__alloc( HX_CTX ,HX_("^(\\[(.*)\\]|([^:]*))(:(.*))?$",ae,83,22,ec),HX_("",00,00,00,00));
HXLINE( 105)		FORMAT->match(s);
HXLINE( 107)		::Array< ::String > hosts;
HXDLIN( 107)		::String _g = FORMAT->matched(7);
HXLINE( 108)		if (hx::IsNull( _g )) {
HXLINE( 107)			hosts = ::Array_obj< ::String >::__new(0);
            		}
            		else {
HXLINE( 109)			::String v = _g;
HXLINE( 110)			::Array< ::String > _g1 = ::Array_obj< ::String >::__new(0);
HXDLIN( 110)			{
HXLINE( 110)				int _g11 = 0;
HXDLIN( 110)				::Array< ::String > _g2 = v.split(HX_(",",2c,00,00,00));
HXDLIN( 110)				while((_g11 < _g2->length)){
HXLINE( 110)					::String host = _g2->__get(_g11);
HXDLIN( 110)					_g11 = (_g11 + 1);
HXLINE( 111)					HOST->match(host);
HXLINE( 112)					::String host1;
HXDLIN( 112)					::String _g12 = HOST->matched(2);
HXDLIN( 112)					::String _g21 = HOST->matched(3);
HXLINE( 113)					if (hx::IsNull( _g12 )) {
HXLINE( 113)						::String ipv4 = _g21;
HXLINE( 112)						host1 = ipv4;
            					}
            					else {
HXLINE( 114)						if (hx::IsNull( _g21 )) {
HXLINE( 114)							::String ipv6 = _g12;
HXLINE( 112)							host1 = ((HX_("[",5b,00,00,00) + ipv6) + HX_("]",5d,00,00,00));
            						}
            						else {
HXLINE( 116)							onError((HX_("invalid host ",cf,25,ab,c7) + host));
HXLINE( 112)							host1 = null();
            						}
            					}
HXLINE( 119)					 ::Dynamic port;
HXDLIN( 119)					::String _g3 = HOST->matched(5);
HXLINE( 120)					if (hx::IsNull( _g3 )) {
HXLINE( 119)						port = null();
            					}
            					else {
HXLINE( 121)						::String v1 = _g3;
HXLINE( 122)						 ::Dynamic _g31 = ::Std_obj::parseInt(v1);
HXLINE( 123)						if (hx::IsNull( _g31 )) {
HXLINE( 124)							onError((HX_("invalid port ",96,07,df,62) + v1));
HXLINE( 119)							port = null();
            						}
            						else {
HXLINE( 126)							 ::Dynamic p = _g31;
HXLINE( 119)							port = p;
            						}
            					}
HXLINE( 129)					_g1->push(::tink::url::_Host::Host_Impl__obj::_new(host1,port));
            				}
            			}
HXLINE( 107)			hosts = _g1;
            		}
HXLINE( 132)		::String path = FORMAT->matched(8);
HXLINE( 134)		bool _hx_tmp;
HXDLIN( 134)		if ((hosts->length > 0)) {
HXLINE( 134)			_hx_tmp = (path.charAt(0) != HX_("/",2f,00,00,00));
            		}
            		else {
HXLINE( 134)			_hx_tmp = false;
            		}
HXDLIN( 134)		if (_hx_tmp) {
HXLINE( 135)			path = (HX_("/",2f,00,00,00) + path);
            		}
HXLINE( 138)		::String parts = FORMAT->matched(2);
HXLINE( 139)		::String parts1 = FORMAT->matched(3);
HXLINE( 140)		::String hosts1 = hosts->__get(0);
HXLINE( 142)		::String parts2 = FORMAT->matched(6);
HXLINE( 143)		::String parts3 = ::tink::url::_Path::Path_Impl__obj::ofString(path);
HXLINE( 144)		::String parts4 = FORMAT->matched(10);
HXLINE( 137)		 ::Dynamic this2 =  ::Dynamic(hx::Anon_obj::Create(8)
            			->setFixed(0,HX_("payload",8e,bf,35,ed),parts1)
            			->setFixed(1,HX_("hosts",0b,ac,62,2b),hosts)
            			->setFixed(2,HX_("auth",68,df,76,40),parts2)
            			->setFixed(3,HX_("scheme",25,20,c1,40),parts)
            			->setFixed(4,HX_("hash",ce,2f,08,45),FORMAT->matched(12))
            			->setFixed(5,HX_("host",68,cf,12,45),hosts1)
            			->setFixed(6,HX_("path",a5,e5,51,4a),parts3)
            			->setFixed(7,HX_("query",08,8b,ea,5d),parts4));
HXDLIN( 137)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Url_Impl__obj,parse,return )


Url_Impl__obj::Url_Impl__obj()
{
}

bool Url_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"noop") ) { outValue = noop_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"parse") ) { outValue = parse_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"resolve") ) { outValue = resolve_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"makePayload") ) { outValue = makePayload_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Url_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Url_Impl__obj_sStaticStorageInfo = 0;
#endif

hx::Class Url_Impl__obj::__mClass;

static ::String Url_Impl__obj_sStaticFields[] = {
	HX_("resolve",ec,12,60,67),
	HX_("makePayload",40,e7,3f,31),
	HX_("toString",ac,d0,6e,38),
	HX_("fromString",db,2d,74,54),
	HX_("noop",a2,13,0a,49),
	HX_("parse",33,90,55,bd),
	::String(null())
};

void Url_Impl__obj::__register()
{
	Url_Impl__obj _hx_dummy;
	Url_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("tink._Url.Url_Impl_",8d,83,ed,13);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Url_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Url_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Url_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Url_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Url_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace tink
} // end namespace _Url
