// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_tink_core_TypedError
#include <tink/core/TypedError.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bdf6d47d1422c74a_57_new,"tink.core.TypedError","new",0x4984b7c3,"tink.core.TypedError.new","tink/core/Error.hx",57,0xd3f844e9)
HX_LOCAL_STACK_FRAME(_hx_pos_bdf6d47d1422c74a_96_withData,"tink.core.TypedError","withData",0x838de50d,"tink.core.TypedError.withData","tink/core/Error.hx",96,0xd3f844e9)
HX_LOCAL_STACK_FRAME(_hx_pos_bdf6d47d1422c74a_99_typed,"tink.core.TypedError","typed",0xbf8f368d,"tink.core.TypedError.typed","tink/core/Error.hx",99,0xd3f844e9)
namespace tink{
namespace core{

void TypedError_obj::__construct( ::Dynamic __o_code,::String message, ::Dynamic pos){
            		 ::Dynamic code = __o_code;
            		if (hx::IsNull(__o_code)) code = 500;
            	HX_STACKFRAME(&_hx_pos_bdf6d47d1422c74a_57_new)
HXLINE(  58)		this->code = ( (int)(code) );
HXLINE(  59)		this->message = message;
HXLINE(  60)		this->pos = pos;
HXLINE(  61)		this->exceptionStack = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  62)		this->callStack = ::Array_obj< ::Dynamic>::__new(0);
            	}

Dynamic TypedError_obj::__CreateEmpty() { return new TypedError_obj; }

void *TypedError_obj::_hx_vtable = 0;

Dynamic TypedError_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TypedError_obj > _hx_result = new TypedError_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool TypedError_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6f97a5ef;
}

 ::tink::core::TypedError TypedError_obj::withData( ::Dynamic code,::String message, ::Dynamic data, ::Dynamic pos){
            	HX_STACKFRAME(&_hx_pos_bdf6d47d1422c74a_96_withData)
HXDLIN(  96)		return ::tink::core::TypedError_obj::typed(code,message,data,pos);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(TypedError_obj,withData,return )

 ::tink::core::TypedError TypedError_obj::typed( ::Dynamic code,::String message, ::Dynamic data, ::Dynamic pos){
            	HX_GC_STACKFRAME(&_hx_pos_bdf6d47d1422c74a_99_typed)
HXLINE( 100)		 ::tink::core::TypedError ret =  ::tink::core::TypedError_obj::__alloc( HX_CTX ,code,message,pos);
HXLINE( 101)		ret->data = data;
HXLINE( 102)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(TypedError_obj,typed,return )


hx::ObjectPtr< TypedError_obj > TypedError_obj::__new( ::Dynamic __o_code,::String message, ::Dynamic pos) {
	hx::ObjectPtr< TypedError_obj > __this = new TypedError_obj();
	__this->__construct(__o_code,message,pos);
	return __this;
}

hx::ObjectPtr< TypedError_obj > TypedError_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic __o_code,::String message, ::Dynamic pos) {
	TypedError_obj *__this = (TypedError_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TypedError_obj), true, "tink.core.TypedError"));
	*(void **)__this = TypedError_obj::_hx_vtable;
	__this->__construct(__o_code,message,pos);
	return __this;
}

TypedError_obj::TypedError_obj()
{
}

void TypedError_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TypedError);
	HX_MARK_MEMBER_NAME(message,"message");
	HX_MARK_MEMBER_NAME(code,"code");
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(pos,"pos");
	HX_MARK_MEMBER_NAME(callStack,"callStack");
	HX_MARK_MEMBER_NAME(exceptionStack,"exceptionStack");
	HX_MARK_END_CLASS();
}

void TypedError_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(message,"message");
	HX_VISIT_MEMBER_NAME(code,"code");
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(pos,"pos");
	HX_VISIT_MEMBER_NAME(callStack,"callStack");
	HX_VISIT_MEMBER_NAME(exceptionStack,"exceptionStack");
}

hx::Val TypedError_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { return hx::Val( pos ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"code") ) { return hx::Val( code ); }
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"message") ) { return hx::Val( message ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"callStack") ) { return hx::Val( callStack ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"exceptionStack") ) { return hx::Val( exceptionStack ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TypedError_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"typed") ) { outValue = typed_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"withData") ) { outValue = withData_dyn(); return true; }
	}
	return false;
}

hx::Val TypedError_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { pos=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"code") ) { code=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"message") ) { message=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"callStack") ) { callStack=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"exceptionStack") ) { exceptionStack=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TypedError_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("message",c7,35,11,9a));
	outFields->push(HX_("code",2d,b1,c4,41));
	outFields->push(HX_("data",2a,56,63,42));
	outFields->push(HX_("pos",94,5d,55,00));
	outFields->push(HX_("callStack",ca,c1,4a,10));
	outFields->push(HX_("exceptionStack",79,48,56,0b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TypedError_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(TypedError_obj,message),HX_("message",c7,35,11,9a)},
	{hx::fsInt,(int)offsetof(TypedError_obj,code),HX_("code",2d,b1,c4,41)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TypedError_obj,data),HX_("data",2a,56,63,42)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TypedError_obj,pos),HX_("pos",94,5d,55,00)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(TypedError_obj,callStack),HX_("callStack",ca,c1,4a,10)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(TypedError_obj,exceptionStack),HX_("exceptionStack",79,48,56,0b)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TypedError_obj_sStaticStorageInfo = 0;
#endif

static ::String TypedError_obj_sMemberFields[] = {
	HX_("message",c7,35,11,9a),
	HX_("code",2d,b1,c4,41),
	HX_("data",2a,56,63,42),
	HX_("pos",94,5d,55,00),
	HX_("callStack",ca,c1,4a,10),
	HX_("exceptionStack",79,48,56,0b),
	::String(null()) };

hx::Class TypedError_obj::__mClass;

static ::String TypedError_obj_sStaticFields[] = {
	HX_("withData",50,73,0f,15),
	HX_("typed",6a,70,cb,1a),
	::String(null())
};

void TypedError_obj::__register()
{
	TypedError_obj _hx_dummy;
	TypedError_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("tink.core.TypedError",51,1a,bf,50);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TypedError_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TypedError_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TypedError_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TypedError_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TypedError_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TypedError_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace tink
} // end namespace core
