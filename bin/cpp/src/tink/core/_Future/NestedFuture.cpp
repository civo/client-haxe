// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_tink_core_FutureTrigger
#include <tink/core/FutureTrigger.h>
#endif
#ifndef INCLUDED_tink_core_LinkObject
#include <tink/core/LinkObject.h>
#endif
#ifndef INCLUDED_tink_core__Callback_Callback_Impl_
#include <tink/core/_Callback/Callback_Impl_.h>
#endif
#ifndef INCLUDED_tink_core__Future_FutureObject
#include <tink/core/_Future/FutureObject.h>
#endif
#ifndef INCLUDED_tink_core__Future_NestedFuture
#include <tink/core/_Future/NestedFuture.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4be3e38ebf2c6f10_295_new,"tink.core._Future.NestedFuture","new",0x224dfb0b,"tink.core._Future.NestedFuture.new","tink/core/Future.hx",295,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_4be3e38ebf2c6f10_298_map,"tink.core._Future.NestedFuture","map",0x224d3547,"tink.core._Future.NestedFuture.map","tink/core/Future.hx",298,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_4be3e38ebf2c6f10_301_flatMap,"tink.core._Future.NestedFuture","flatMap",0xd7ba6c8e,"tink.core._Future.NestedFuture.flatMap","tink/core/Future.hx",301,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_4be3e38ebf2c6f10_305_gather,"tink.core._Future.NestedFuture","gather",0x5fe00430,"tink.core._Future.NestedFuture.gather","tink/core/Future.hx",305,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_4be3e38ebf2c6f10_310_eager,"tink.core._Future.NestedFuture","eager",0x9cbf3523,"tink.core._Future.NestedFuture.eager","tink/core/Future.hx",310,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_4be3e38ebf2c6f10_308_eager,"tink.core._Future.NestedFuture","eager",0x9cbf3523,"tink.core._Future.NestedFuture.eager","tink/core/Future.hx",308,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_4be3e38ebf2c6f10_317_handle,"tink.core._Future.NestedFuture","handle",0xc24115dd,"tink.core._Future.NestedFuture.handle","tink/core/Future.hx",317,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_4be3e38ebf2c6f10_314_handle,"tink.core._Future.NestedFuture","handle",0xc24115dd,"tink.core._Future.NestedFuture.handle","tink/core/Future.hx",314,0x014a8a08)
namespace tink{
namespace core{
namespace _Future{

void NestedFuture_obj::__construct(::Dynamic outer){
            	HX_STACKFRAME(&_hx_pos_4be3e38ebf2c6f10_295_new)
HXDLIN( 295)		this->outer = outer;
            	}

Dynamic NestedFuture_obj::__CreateEmpty() { return new NestedFuture_obj; }

void *NestedFuture_obj::_hx_vtable = 0;

Dynamic NestedFuture_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NestedFuture_obj > _hx_result = new NestedFuture_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool NestedFuture_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6b8a73cb;
}

static ::tink::core::_Future::FutureObject_obj _hx_tink_core__Future_NestedFuture__hx_tink_core__Future_FutureObject= {
	( ::Dynamic (hx::Object::*)( ::Dynamic))&::tink::core::_Future::NestedFuture_obj::map,
	( ::Dynamic (hx::Object::*)( ::Dynamic))&::tink::core::_Future::NestedFuture_obj::flatMap,
	( ::Dynamic (hx::Object::*)( ::Dynamic))&::tink::core::_Future::NestedFuture_obj::handle,
	( ::Dynamic (hx::Object::*)())&::tink::core::_Future::NestedFuture_obj::gather,
	( ::Dynamic (hx::Object::*)())&::tink::core::_Future::NestedFuture_obj::eager,
};

void *NestedFuture_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xb1c7c493: return &_hx_tink_core__Future_NestedFuture__hx_tink_core__Future_FutureObject;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

::Dynamic NestedFuture_obj::map( ::Dynamic f){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f) HXARGC(1)
            		::Dynamic _hx_run(::Dynamic inner){
            			HX_STACKFRAME(&_hx_pos_4be3e38ebf2c6f10_298_map)
HXDLIN( 298)			::Dynamic ret1 = ::tink::core::_Future::FutureObject_obj::map(inner,f);
HXDLIN( 298)			return ::tink::core::_Future::FutureObject_obj::gather(ret1);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_4be3e38ebf2c6f10_298_map)
HXDLIN( 298)		::Dynamic ret = ::tink::core::_Future::FutureObject_obj::flatMap(this->outer, ::Dynamic(new _hx_Closure_0(f)));
HXDLIN( 298)		return ::tink::core::_Future::FutureObject_obj::gather(ret);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NestedFuture_obj,map,return )

::Dynamic NestedFuture_obj::flatMap( ::Dynamic f){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f) HXARGC(1)
            		::Dynamic _hx_run(::Dynamic inner){
            			HX_STACKFRAME(&_hx_pos_4be3e38ebf2c6f10_301_flatMap)
HXDLIN( 301)			::Dynamic ret1 = ::tink::core::_Future::FutureObject_obj::flatMap(inner,f);
HXDLIN( 301)			return ::tink::core::_Future::FutureObject_obj::gather(ret1);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_4be3e38ebf2c6f10_301_flatMap)
HXDLIN( 301)		::Dynamic ret = ::tink::core::_Future::FutureObject_obj::flatMap(this->outer, ::Dynamic(new _hx_Closure_0(f)));
HXDLIN( 301)		return ::tink::core::_Future::FutureObject_obj::gather(ret);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NestedFuture_obj,flatMap,return )

::Dynamic NestedFuture_obj::gather(){
            	HX_STACKFRAME(&_hx_pos_4be3e38ebf2c6f10_305_gather)
HXDLIN( 305)		if (hx::IsNotNull( this->gathered )) {
HXDLIN( 305)			return this->gathered;
            		}
            		else {
HXLINE( 306)			return (this->gathered = ::tink::core::FutureTrigger_obj::gatherFuture(hx::ObjectPtr<OBJ_>(this)));
            		}
HXLINE( 305)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(NestedFuture_obj,gather,return )

::Dynamic NestedFuture_obj::eager(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_4be3e38ebf2c6f10_310_eager)
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_4be3e38ebf2c6f10_308_eager)
HXLINE( 309)		::Dynamic ret;
HXDLIN( 309)		if (hx::IsNotNull( this->gathered )) {
HXLINE( 309)			ret = this->gathered;
            		}
            		else {
HXLINE( 309)			ret = (this->gathered = ::tink::core::FutureTrigger_obj::gatherFuture(hx::ObjectPtr<OBJ_>(this)));
            		}
HXLINE( 310)		::tink::core::_Future::FutureObject_obj::handle(ret,::tink::core::_Callback::Callback_Impl__obj::fromNiladic( ::Dynamic(new _hx_Closure_0())));
HXLINE( 311)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NestedFuture_obj,eager,return )

::Dynamic NestedFuture_obj::handle( ::Dynamic cb){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1,::Array< ::Dynamic>,ret, ::Dynamic,cb) HXARGC(1)
            		void _hx_run(::Dynamic inner){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,cb) HXARGC(1)
            			void _hx_run( ::Dynamic result){
            				HX_STACKFRAME(&_hx_pos_4be3e38ebf2c6f10_317_handle)
HXLINE( 317)				::tink::core::_Callback::Callback_Impl__obj::invoke(cb,result);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_4be3e38ebf2c6f10_317_handle)
HXLINE( 317)			::Dynamic _hx_tmp1 = ::tink::core::_Future::FutureObject_obj::handle(inner, ::Dynamic(new _hx_Closure_0(cb)));
HXDLIN( 317)			ret[0] = _hx_tmp1;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_4be3e38ebf2c6f10_314_handle)
HXLINE( 315)		::Array< ::Dynamic> ret = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE( 316)		::Dynamic _hx_tmp = ::tink::core::_Future::FutureObject_obj::handle(this->outer, ::Dynamic(new _hx_Closure_1(ret,cb)));
HXDLIN( 316)		ret[0] = _hx_tmp;
HXLINE( 319)		return ret->__get(0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NestedFuture_obj,handle,return )


hx::ObjectPtr< NestedFuture_obj > NestedFuture_obj::__new(::Dynamic outer) {
	hx::ObjectPtr< NestedFuture_obj > __this = new NestedFuture_obj();
	__this->__construct(outer);
	return __this;
}

hx::ObjectPtr< NestedFuture_obj > NestedFuture_obj::__alloc(hx::Ctx *_hx_ctx,::Dynamic outer) {
	NestedFuture_obj *__this = (NestedFuture_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(NestedFuture_obj), true, "tink.core._Future.NestedFuture"));
	*(void **)__this = NestedFuture_obj::_hx_vtable;
	__this->__construct(outer);
	return __this;
}

NestedFuture_obj::NestedFuture_obj()
{
}

void NestedFuture_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NestedFuture);
	HX_MARK_MEMBER_NAME(outer,"outer");
	HX_MARK_MEMBER_NAME(gathered,"gathered");
	HX_MARK_END_CLASS();
}

void NestedFuture_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(outer,"outer");
	HX_VISIT_MEMBER_NAME(gathered,"gathered");
}

hx::Val NestedFuture_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { return hx::Val( map_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { return hx::Val( outer ); }
		if (HX_FIELD_EQ(inName,"eager") ) { return hx::Val( eager_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"gather") ) { return hx::Val( gather_dyn() ); }
		if (HX_FIELD_EQ(inName,"handle") ) { return hx::Val( handle_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"flatMap") ) { return hx::Val( flatMap_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"gathered") ) { return hx::Val( gathered ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val NestedFuture_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { outer=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"gathered") ) { gathered=inValue.Cast< ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void NestedFuture_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("outer",7b,b8,28,37));
	outFields->push(HX_("gathered",1a,7f,19,4b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo NestedFuture_obj_sMemberStorageInfo[] = {
	{hx::fsObject /* ::Dynamic */ ,(int)offsetof(NestedFuture_obj,outer),HX_("outer",7b,b8,28,37)},
	{hx::fsObject /* ::Dynamic */ ,(int)offsetof(NestedFuture_obj,gathered),HX_("gathered",1a,7f,19,4b)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *NestedFuture_obj_sStaticStorageInfo = 0;
#endif

static ::String NestedFuture_obj_sMemberFields[] = {
	HX_("outer",7b,b8,28,37),
	HX_("gathered",1a,7f,19,4b),
	HX_("map",9c,0a,53,00),
	HX_("flatMap",63,10,de,e6),
	HX_("gather",fb,71,9c,55),
	HX_("eager",b8,c9,e4,67),
	HX_("handle",a8,83,fd,b7),
	::String(null()) };

hx::Class NestedFuture_obj::__mClass;

void NestedFuture_obj::__register()
{
	NestedFuture_obj _hx_dummy;
	NestedFuture_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("tink.core._Future.NestedFuture",99,19,43,89);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(NestedFuture_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< NestedFuture_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NestedFuture_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NestedFuture_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace tink
} // end namespace core
} // end namespace _Future
