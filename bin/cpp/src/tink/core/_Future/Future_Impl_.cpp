// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_tink_core_FutureTrigger
#include <tink/core/FutureTrigger.h>
#endif
#ifndef INCLUDED_tink_core__Callback_Callback_Impl_
#include <tink/core/_Callback/Callback_Impl_.h>
#endif
#ifndef INCLUDED_tink_core__Future_FutureObject
#include <tink/core/_Future/FutureObject.h>
#endif
#ifndef INCLUDED_tink_core__Future_Future_Impl_
#include <tink/core/_Future/Future_Impl_.h>
#endif
#ifndef INCLUDED_tink_core__Future_LazyTrigger
#include <tink/core/_Future/LazyTrigger.h>
#endif
#ifndef INCLUDED_tink_core__Future_NestedFuture
#include <tink/core/_Future/NestedFuture.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_62_next,"tink.core._Future.Future_Impl_","next",0xa83144bf,"tink.core._Future.Future_Impl_.next","tink/core/Future.hx",62,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_76_flatten,"tink.core._Future.Future_Impl_","flatten",0x7f25d378,"tink.core._Future.Future_Impl_.flatten","tink/core/Future.hx",76,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_136_async,"tink.core._Future.Future_Impl_","async",0x0ff711f0,"tink.core._Future.Future_Impl_.async","tink/core/Future.hx",136,0x014a8a08)
namespace tink{
namespace core{
namespace _Future{

void Future_Impl__obj::__construct() { }

Dynamic Future_Impl__obj::__CreateEmpty() { return new Future_Impl__obj; }

void *Future_Impl__obj::_hx_vtable = 0;

Dynamic Future_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Future_Impl__obj > _hx_result = new Future_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Future_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1903e3a8;
}

::Dynamic Future_Impl__obj::next(::Dynamic this1, ::Dynamic n){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,n) HXARGC(1)
            		::Dynamic _hx_run( ::Dynamic v){
            			HX_STACKFRAME(&_hx_pos_589b450cd6df12cf_62_next)
HXDLIN(  62)			return n(v);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_589b450cd6df12cf_62_next)
HXDLIN(  62)		return ::tink::core::_Future::FutureObject_obj::flatMap(this1, ::Dynamic(new _hx_Closure_0(n)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Future_Impl__obj,next,return )

::Dynamic Future_Impl__obj::flatten(::Dynamic f){
            	HX_GC_STACKFRAME(&_hx_pos_589b450cd6df12cf_76_flatten)
HXDLIN(  76)		return  ::tink::core::_Future::NestedFuture_obj::__alloc( HX_CTX ,f);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Future_Impl__obj,flatten,return )

::Dynamic Future_Impl__obj::async( ::Dynamic f, ::Dynamic __o_lazy){
            		 ::Dynamic lazy = __o_lazy;
            		if (hx::IsNull(__o_lazy)) lazy = false;
            	HX_GC_STACKFRAME(&_hx_pos_589b450cd6df12cf_136_async)
HXDLIN( 136)		if (( (bool)(lazy) )) {
HXLINE( 137)			return  ::tink::core::_Future::LazyTrigger_obj::__alloc( HX_CTX ,f);
            		}
            		else {
HXLINE( 139)			 ::tink::core::FutureTrigger op =  ::tink::core::FutureTrigger_obj::__alloc( HX_CTX );
HXLINE( 140)			 ::Dynamic wrapped = f;
HXLINE( 141)			::tink::core::_Callback::Callback_Impl__obj::invoke(wrapped,op->trigger_dyn());
HXLINE( 142)			return op;
            		}
HXLINE( 136)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Future_Impl__obj,async,return )


Future_Impl__obj::Future_Impl__obj()
{
}

bool Future_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { outValue = next_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"async") ) { outValue = async_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"flatten") ) { outValue = flatten_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Future_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Future_Impl__obj_sStaticStorageInfo = 0;
#endif

hx::Class Future_Impl__obj::__mClass;

static ::String Future_Impl__obj_sStaticFields[] = {
	HX_("next",f3,84,02,49),
	HX_("flatten",c4,ab,fb,e6),
	HX_("async",3c,ff,3d,26),
	::String(null())
};

void Future_Impl__obj::__register()
{
	Future_Impl__obj _hx_dummy;
	Future_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("tink.core._Future.Future_Impl_",22,b4,35,d2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Future_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Future_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Future_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Future_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Future_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace tink
} // end namespace core
} // end namespace _Future
