// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_tink_core_FutureTrigger
#include <tink/core/FutureTrigger.h>
#endif
#ifndef INCLUDED_tink_core_LinkObject
#include <tink/core/LinkObject.h>
#endif
#ifndef INCLUDED_tink_core__Callback_Callback_Impl_
#include <tink/core/_Callback/Callback_Impl_.h>
#endif
#ifndef INCLUDED_tink_core__Future_FutureObject
#include <tink/core/_Future/FutureObject.h>
#endif
#ifndef INCLUDED_tink_core__Future_Future_Impl_
#include <tink/core/_Future/Future_Impl_.h>
#endif
#ifndef INCLUDED_tink_core__Future_LazyTrigger
#include <tink/core/_Future/LazyTrigger.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4fc97abdb2a2b8c1_397_new,"tink.core._Future.LazyTrigger","new",0x4fa10477,"tink.core._Future.LazyTrigger.new","tink/core/Future.hx",397,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_4fc97abdb2a2b8c1_405_eager,"tink.core._Future.LazyTrigger","eager",0x0bf8718f,"tink.core._Future.LazyTrigger.eager","tink/core/Future.hx",405,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_4fc97abdb2a2b8c1_414_map,"tink.core._Future.LazyTrigger","map",0x4fa03eb3,"tink.core._Future.LazyTrigger.map","tink/core/Future.hx",414,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_4fc97abdb2a2b8c1_418_map,"tink.core._Future.LazyTrigger","map",0x4fa03eb3,"tink.core._Future.LazyTrigger.map","tink/core/Future.hx",418,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_4fc97abdb2a2b8c1_421_flatMap,"tink.core._Future.LazyTrigger","flatMap",0x750c9bfa,"tink.core._Future.LazyTrigger.flatMap","tink/core/Future.hx",421,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_4fc97abdb2a2b8c1_425_flatMap,"tink.core._Future.LazyTrigger","flatMap",0x750c9bfa,"tink.core._Future.LazyTrigger.flatMap","tink/core/Future.hx",425,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_4fc97abdb2a2b8c1_428_handle,"tink.core._Future.LazyTrigger","handle",0xa51cb7f1,"tink.core._Future.LazyTrigger.handle","tink/core/Future.hx",428,0x014a8a08)
namespace tink{
namespace core{
namespace _Future{

void LazyTrigger_obj::__construct( ::Dynamic op){
            	HX_STACKFRAME(&_hx_pos_4fc97abdb2a2b8c1_397_new)
HXLINE( 401)		this->op = op;
HXLINE( 402)		super::__construct();
            	}

Dynamic LazyTrigger_obj::__CreateEmpty() { return new LazyTrigger_obj; }

void *LazyTrigger_obj::_hx_vtable = 0;

Dynamic LazyTrigger_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< LazyTrigger_obj > _hx_result = new LazyTrigger_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool LazyTrigger_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x5c33d4e4) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x5c33d4e4;
	} else {
		return inClassId==(int)0x713e6f13;
	}
}

 ::tink::core::FutureTrigger LazyTrigger_obj::eager(){
            	HX_STACKFRAME(&_hx_pos_4fc97abdb2a2b8c1_405_eager)
HXLINE( 406)		if (hx::IsNotNull( this->op )) {
HXLINE( 407)			 ::Dynamic op = this->op;
HXLINE( 408)			this->op = null();
HXLINE( 409)			::tink::core::_Callback::Callback_Impl__obj::invoke(op,this->trigger_dyn());
            		}
HXLINE( 411)		return hx::ObjectPtr<OBJ_>(this);
            	}


::Dynamic LazyTrigger_obj::map( ::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_4fc97abdb2a2b8c1_414_map)
HXDLIN( 414)		 ::tink::core::_Future::LazyTrigger _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 416)		if (hx::IsNull( this->op )) {
HXLINE( 416)			return this->super::map(f);
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::tink::core::_Future::LazyTrigger,_gthis, ::Dynamic,f) HXARGC(1)
            			void _hx_run( ::Dynamic cb){
            				HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f, ::Dynamic,cb) HXARGC(1)
            				void _hx_run( ::Dynamic v){
            					HX_STACKFRAME(&_hx_pos_4fc97abdb2a2b8c1_418_map)
HXLINE( 418)					 ::Dynamic _hx_tmp = f(v);
HXDLIN( 418)					cb(_hx_tmp);
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_STACKFRAME(&_hx_pos_4fc97abdb2a2b8c1_418_map)
HXLINE( 418)				_gthis->handle( ::Dynamic(new _hx_Closure_0(f,cb)));
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 417)			return ::tink::core::_Future::Future_Impl__obj::async( ::Dynamic(new _hx_Closure_1(_gthis,f)),true);
            		}
HXLINE( 416)		return null();
            	}


::Dynamic LazyTrigger_obj::flatMap( ::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_4fc97abdb2a2b8c1_421_flatMap)
HXDLIN( 421)		 ::tink::core::_Future::LazyTrigger _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 423)		if (hx::IsNull( this->op )) {
HXLINE( 423)			return this->super::flatMap(f);
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::tink::core::_Future::LazyTrigger,_gthis, ::Dynamic,f) HXARGC(1)
            			void _hx_run( ::Dynamic cb){
            				HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f, ::Dynamic,cb) HXARGC(1)
            				void _hx_run( ::Dynamic v){
            					HX_STACKFRAME(&_hx_pos_4fc97abdb2a2b8c1_425_flatMap)
HXLINE( 425)					::tink::core::_Future::FutureObject_obj::handle(f(v),cb);
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_STACKFRAME(&_hx_pos_4fc97abdb2a2b8c1_425_flatMap)
HXLINE( 425)				_gthis->handle( ::Dynamic(new _hx_Closure_0(f,cb)));
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 424)			return ::tink::core::_Future::Future_Impl__obj::async( ::Dynamic(new _hx_Closure_1(_gthis,f)),true);
            		}
HXLINE( 423)		return null();
            	}


::Dynamic LazyTrigger_obj::handle( ::Dynamic cb){
            	HX_STACKFRAME(&_hx_pos_4fc97abdb2a2b8c1_428_handle)
HXLINE( 429)		this->eager();
HXLINE( 430)		return this->super::handle(cb);
            	}



hx::ObjectPtr< LazyTrigger_obj > LazyTrigger_obj::__new( ::Dynamic op) {
	hx::ObjectPtr< LazyTrigger_obj > __this = new LazyTrigger_obj();
	__this->__construct(op);
	return __this;
}

hx::ObjectPtr< LazyTrigger_obj > LazyTrigger_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic op) {
	LazyTrigger_obj *__this = (LazyTrigger_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(LazyTrigger_obj), true, "tink.core._Future.LazyTrigger"));
	*(void **)__this = LazyTrigger_obj::_hx_vtable;
	__this->__construct(op);
	return __this;
}

LazyTrigger_obj::LazyTrigger_obj()
{
}

void LazyTrigger_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(LazyTrigger);
	HX_MARK_MEMBER_NAME(op,"op");
	 ::tink::core::FutureTrigger_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void LazyTrigger_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(op,"op");
	 ::tink::core::FutureTrigger_obj::__Visit(HX_VISIT_ARG);
}

hx::Val LazyTrigger_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"op") ) { return hx::Val( op ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { return hx::Val( map_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"eager") ) { return hx::Val( eager_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"handle") ) { return hx::Val( handle_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"flatMap") ) { return hx::Val( flatMap_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val LazyTrigger_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"op") ) { op=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo LazyTrigger_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(LazyTrigger_obj,op),HX_("op",21,61,00,00)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *LazyTrigger_obj_sStaticStorageInfo = 0;
#endif

static ::String LazyTrigger_obj_sMemberFields[] = {
	HX_("op",21,61,00,00),
	HX_("eager",b8,c9,e4,67),
	HX_("map",9c,0a,53,00),
	HX_("flatMap",63,10,de,e6),
	HX_("handle",a8,83,fd,b7),
	::String(null()) };

hx::Class LazyTrigger_obj::__mClass;

void LazyTrigger_obj::__register()
{
	LazyTrigger_obj _hx_dummy;
	LazyTrigger_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("tink.core._Future.LazyTrigger",05,fd,a1,8a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(LazyTrigger_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< LazyTrigger_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LazyTrigger_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LazyTrigger_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace tink
} // end namespace core
} // end namespace _Future
