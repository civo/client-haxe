// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_tink_core_FutureTrigger
#include <tink/core/FutureTrigger.h>
#endif
#ifndef INCLUDED_tink_core_LinkObject
#include <tink/core/LinkObject.h>
#endif
#ifndef INCLUDED_tink_core__Callback_CallbackList_Impl_
#include <tink/core/_Callback/CallbackList_Impl_.h>
#endif
#ifndef INCLUDED_tink_core__Callback_Callback_Impl_
#include <tink/core/_Callback/Callback_Impl_.h>
#endif
#ifndef INCLUDED_tink_core__Callback_ListCell
#include <tink/core/_Callback/ListCell.h>
#endif
#ifndef INCLUDED_tink_core__Future_FutureObject
#include <tink/core/_Future/FutureObject.h>
#endif
#ifndef INCLUDED_tink_core__Future_SimpleFuture
#include <tink/core/_Future/SimpleFuture.h>
#endif
#ifndef INCLUDED_tink_core__Future_SyncFuture
#include <tink/core/_Future/SyncFuture.h>
#endif
#ifndef INCLUDED_tink_core__Lazy_LazyConst
#include <tink/core/_Lazy/LazyConst.h>
#endif
#ifndef INCLUDED_tink_core__Lazy_LazyObject
#include <tink/core/_Lazy/LazyObject.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_057f1a2129988235_328_new,"tink.core.FutureTrigger","new",0xad8473b4,"tink.core.FutureTrigger.new","tink/core/Future.hx",328,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_057f1a2129988235_331_handle,"tink.core.FutureTrigger","handle",0x5e1aacd4,"tink.core.FutureTrigger.handle","tink/core/Future.hx",331,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_057f1a2129988235_340_map,"tink.core.FutureTrigger","map",0xad83adf0,"tink.core.FutureTrigger.map","tink/core/Future.hx",340,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_057f1a2129988235_344_map,"tink.core.FutureTrigger","map",0xad83adf0,"tink.core.FutureTrigger.map","tink/core/Future.hx",344,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_057f1a2129988235_349_flatMap,"tink.core.FutureTrigger","flatMap",0x9a44edb7,"tink.core.FutureTrigger.flatMap","tink/core/Future.hx",349,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_057f1a2129988235_353_flatMap,"tink.core.FutureTrigger","flatMap",0x9a44edb7,"tink.core.FutureTrigger.flatMap","tink/core/Future.hx",353,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_057f1a2129988235_358_gather,"tink.core.FutureTrigger","gather",0xfbb99b27,"tink.core.FutureTrigger.gather","tink/core/Future.hx",358,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_057f1a2129988235_361_eager,"tink.core.FutureTrigger","eager",0x3d03ea0c,"tink.core.FutureTrigger.eager","tink/core/Future.hx",361,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_057f1a2129988235_383_trigger,"tink.core.FutureTrigger","trigger",0xd946328c,"tink.core.FutureTrigger.trigger","tink/core/Future.hx",383,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_057f1a2129988235_368_gatherFuture,"tink.core.FutureTrigger","gatherFuture",0x8907feca,"tink.core.FutureTrigger.gatherFuture","tink/core/Future.hx",368,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_057f1a2129988235_366_gatherFuture,"tink.core.FutureTrigger","gatherFuture",0x8907feca,"tink.core.FutureTrigger.gatherFuture","tink/core/Future.hx",366,0x014a8a08)
namespace tink{
namespace core{

void FutureTrigger_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_057f1a2129988235_328_new)
HXDLIN( 328)		::Array< ::Dynamic> this1 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 328)		this->list = this1;
            	}

Dynamic FutureTrigger_obj::__CreateEmpty() { return new FutureTrigger_obj; }

void *FutureTrigger_obj::_hx_vtable = 0;

Dynamic FutureTrigger_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FutureTrigger_obj > _hx_result = new FutureTrigger_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FutureTrigger_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5c33d4e4;
}

static ::tink::core::_Future::FutureObject_obj _hx_tink_core_FutureTrigger__hx_tink_core__Future_FutureObject= {
	( ::Dynamic (hx::Object::*)( ::Dynamic))&::tink::core::FutureTrigger_obj::map,
	( ::Dynamic (hx::Object::*)( ::Dynamic))&::tink::core::FutureTrigger_obj::flatMap,
	( ::Dynamic (hx::Object::*)( ::Dynamic))&::tink::core::FutureTrigger_obj::handle,
	( ::Dynamic (hx::Object::*)())&::tink::core::FutureTrigger_obj::gather_73f727cb,
	( ::Dynamic (hx::Object::*)())&::tink::core::FutureTrigger_obj::eager_73f727cb,
};

::Dynamic FutureTrigger_obj::eager_73f727cb() {
			return eager();
}

::Dynamic FutureTrigger_obj::gather_73f727cb() {
			return gather();
}
void *FutureTrigger_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xb1c7c493: return &_hx_tink_core_FutureTrigger__hx_tink_core__Future_FutureObject;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

::Dynamic FutureTrigger_obj::handle( ::Dynamic callback){
            	HX_STACKFRAME(&_hx_pos_057f1a2129988235_331_handle)
HXDLIN( 331)		::Array< ::Dynamic> _g = this->list;
HXLINE( 332)		if (hx::IsNull( _g )) {
HXLINE( 333)			::tink::core::_Callback::Callback_Impl__obj::invoke(callback,this->result);
HXLINE( 334)			return null();
            		}
            		else {
HXLINE( 335)			::Array< ::Dynamic> v = _g;
HXLINE( 336)			return ::tink::core::_Callback::CallbackList_Impl__obj::add(v,callback);
            		}
HXLINE( 332)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FutureTrigger_obj,handle,return )

::Dynamic FutureTrigger_obj::map( ::Dynamic f){
            	HX_GC_STACKFRAME(&_hx_pos_057f1a2129988235_340_map)
HXDLIN( 340)		::Array< ::Dynamic> _g = this->list;
HXLINE( 341)		if (hx::IsNull( _g )) {
HXLINE( 341)			return  ::tink::core::_Future::SyncFuture_obj::__alloc( HX_CTX , ::tink::core::_Lazy::LazyConst_obj::__alloc( HX_CTX ,f(this->result)));
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f, ::tink::core::FutureTrigger,ret) HXARGC(1)
            			void _hx_run( ::Dynamic v1){
            				HX_GC_STACKFRAME(&_hx_pos_057f1a2129988235_344_map)
HXLINE( 344)				 ::Dynamic _hx_tmp = f(v1);
HXDLIN( 344)				ret->trigger(_hx_tmp);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 342)			::Array< ::Dynamic> v = _g;
HXLINE( 343)			 ::tink::core::FutureTrigger ret =  ::tink::core::FutureTrigger_obj::__alloc( HX_CTX );
HXLINE( 344)			::tink::core::_Callback::CallbackList_Impl__obj::add(this->list, ::Dynamic(new _hx_Closure_0(f,ret)));
HXLINE( 345)			return ret;
            		}
HXLINE( 341)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FutureTrigger_obj,map,return )

::Dynamic FutureTrigger_obj::flatMap( ::Dynamic f){
            	HX_GC_STACKFRAME(&_hx_pos_057f1a2129988235_349_flatMap)
HXDLIN( 349)		::Array< ::Dynamic> _g = this->list;
HXLINE( 350)		if (hx::IsNull( _g )) {
HXLINE( 350)			return f(this->result);
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f, ::tink::core::FutureTrigger,ret) HXARGC(1)
            			void _hx_run( ::Dynamic v1){
            				HX_GC_STACKFRAME(&_hx_pos_057f1a2129988235_353_flatMap)
HXLINE( 353)				::tink::core::_Future::FutureObject_obj::handle(f(v1),ret->trigger_dyn());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 351)			::Array< ::Dynamic> v = _g;
HXLINE( 352)			 ::tink::core::FutureTrigger ret =  ::tink::core::FutureTrigger_obj::__alloc( HX_CTX );
HXLINE( 353)			::tink::core::_Callback::CallbackList_Impl__obj::add(this->list, ::Dynamic(new _hx_Closure_0(f,ret)));
HXLINE( 354)			return ret;
            		}
HXLINE( 350)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FutureTrigger_obj,flatMap,return )

 ::tink::core::FutureTrigger FutureTrigger_obj::gather(){
            	HX_STACKFRAME(&_hx_pos_057f1a2129988235_358_gather)
HXDLIN( 358)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FutureTrigger_obj,gather,return )

 ::tink::core::FutureTrigger FutureTrigger_obj::eager(){
            	HX_STACKFRAME(&_hx_pos_057f1a2129988235_361_eager)
HXDLIN( 361)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FutureTrigger_obj,eager,return )

bool FutureTrigger_obj::trigger( ::Dynamic result){
            	HX_STACKFRAME(&_hx_pos_057f1a2129988235_383_trigger)
HXDLIN( 383)		if (hx::IsNull( this->list )) {
HXDLIN( 383)			return false;
            		}
            		else {
HXLINE( 385)			::Array< ::Dynamic> list = this->list;
HXLINE( 386)			this->list = null();
HXLINE( 387)			this->result = result;
HXLINE( 388)			::tink::core::_Callback::CallbackList_Impl__obj::invoke(list,result);
HXLINE( 389)			::tink::core::_Callback::CallbackList_Impl__obj::clear(list);
HXLINE( 390)			return true;
            		}
HXLINE( 383)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FutureTrigger_obj,trigger,return )

::Dynamic FutureTrigger_obj::gatherFuture(::Dynamic f){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,op,::Array< ::Dynamic>,f1) HXARGC(1)
            		::Dynamic _hx_run( ::Dynamic cb){
            			HX_GC_STACKFRAME(&_hx_pos_057f1a2129988235_368_gatherFuture)
HXLINE( 369)			if (hx::IsNull( op->__get(0).StaticCast<  ::tink::core::FutureTrigger >() )) {
HXLINE( 370)				op[0] =  ::tink::core::FutureTrigger_obj::__alloc( HX_CTX );
HXLINE( 371)				::tink::core::_Future::FutureObject_obj::handle(f1->__get(0),op->__get(0).StaticCast<  ::tink::core::FutureTrigger >()->trigger_dyn());
HXLINE( 372)				f1[0] = null();
            			}
HXLINE( 374)			return op->__get(0).StaticCast<  ::tink::core::FutureTrigger >()->handle(cb);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_GC_STACKFRAME(&_hx_pos_057f1a2129988235_366_gatherFuture)
HXDLIN( 366)		::Array< ::Dynamic> f1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,f);
HXLINE( 367)		::Array< ::Dynamic> op = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE( 368)		::Dynamic this1 =  ::tink::core::_Future::SimpleFuture_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_0(op,f1)));
HXDLIN( 368)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FutureTrigger_obj,gatherFuture,return )


hx::ObjectPtr< FutureTrigger_obj > FutureTrigger_obj::__new() {
	hx::ObjectPtr< FutureTrigger_obj > __this = new FutureTrigger_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< FutureTrigger_obj > FutureTrigger_obj::__alloc(hx::Ctx *_hx_ctx) {
	FutureTrigger_obj *__this = (FutureTrigger_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FutureTrigger_obj), true, "tink.core.FutureTrigger"));
	*(void **)__this = FutureTrigger_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FutureTrigger_obj::FutureTrigger_obj()
{
}

void FutureTrigger_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FutureTrigger);
	HX_MARK_MEMBER_NAME(result,"result");
	HX_MARK_MEMBER_NAME(list,"list");
	HX_MARK_END_CLASS();
}

void FutureTrigger_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(result,"result");
	HX_VISIT_MEMBER_NAME(list,"list");
}

hx::Val FutureTrigger_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { return hx::Val( map_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { return hx::Val( list ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"eager") ) { return hx::Val( eager_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"result") ) { return hx::Val( result ); }
		if (HX_FIELD_EQ(inName,"handle") ) { return hx::Val( handle_dyn() ); }
		if (HX_FIELD_EQ(inName,"gather") ) { return hx::Val( gather_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"flatMap") ) { return hx::Val( flatMap_dyn() ); }
		if (HX_FIELD_EQ(inName,"trigger") ) { return hx::Val( trigger_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FutureTrigger_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"gatherFuture") ) { outValue = gatherFuture_dyn(); return true; }
	}
	return false;
}

hx::Val FutureTrigger_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { list=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"result") ) { result=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FutureTrigger_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("result",dd,68,84,08));
	outFields->push(HX_("list",5e,1c,b3,47));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo FutureTrigger_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FutureTrigger_obj,result),HX_("result",dd,68,84,08)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FutureTrigger_obj,list),HX_("list",5e,1c,b3,47)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FutureTrigger_obj_sStaticStorageInfo = 0;
#endif

static ::String FutureTrigger_obj_sMemberFields[] = {
	HX_("result",dd,68,84,08),
	HX_("list",5e,1c,b3,47),
	HX_("handle",a8,83,fd,b7),
	HX_("map",9c,0a,53,00),
	HX_("flatMap",63,10,de,e6),
	HX_("gather",fb,71,9c,55),
	HX_("eager",b8,c9,e4,67),
	HX_("trigger",38,55,df,25),
	::String(null()) };

hx::Class FutureTrigger_obj::__mClass;

static ::String FutureTrigger_obj_sStaticFields[] = {
	HX_("gatherFuture",9e,ac,75,d9),
	::String(null())
};

void FutureTrigger_obj::__register()
{
	FutureTrigger_obj _hx_dummy;
	FutureTrigger_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("tink.core.FutureTrigger",c2,c9,f3,5a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FutureTrigger_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FutureTrigger_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FutureTrigger_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FutureTrigger_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FutureTrigger_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FutureTrigger_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace tink
} // end namespace core
