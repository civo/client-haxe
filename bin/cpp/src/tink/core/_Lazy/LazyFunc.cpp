// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_tink_core__Lazy_LazyFunc
#include <tink/core/_Lazy/LazyFunc.h>
#endif
#ifndef INCLUDED_tink_core__Lazy_LazyObject
#include <tink/core/_Lazy/LazyObject.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_abecf4c8a88f2d81_49_new,"tink.core._Lazy.LazyFunc","new",0x6759c9f8,"tink.core._Lazy.LazyFunc.new","tink/core/Lazy.hx",49,0x92445137)
HX_LOCAL_STACK_FRAME(_hx_pos_abecf4c8a88f2d81_51_get,"tink.core._Lazy.LazyFunc","get",0x67547a2e,"tink.core._Lazy.LazyFunc.get","tink/core/Lazy.hx",51,0x92445137)
HX_LOCAL_STACK_FRAME(_hx_pos_abecf4c8a88f2d81_63_map,"tink.core._Lazy.LazyFunc","map",0x67590434,"tink.core._Lazy.LazyFunc.map","tink/core/Lazy.hx",63,0x92445137)
HX_LOCAL_STACK_FRAME(_hx_pos_abecf4c8a88f2d81_62_map,"tink.core._Lazy.LazyFunc","map",0x67590434,"tink.core._Lazy.LazyFunc.map","tink/core/Lazy.hx",62,0x92445137)
namespace tink{
namespace core{
namespace _Lazy{

void LazyFunc_obj::__construct( ::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_abecf4c8a88f2d81_49_new)
HXDLIN(  49)		this->f = f;
            	}

Dynamic LazyFunc_obj::__CreateEmpty() { return new LazyFunc_obj; }

void *LazyFunc_obj::_hx_vtable = 0;

Dynamic LazyFunc_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< LazyFunc_obj > _hx_result = new LazyFunc_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool LazyFunc_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0f2aba7a;
}

static ::tink::core::_Lazy::LazyObject_obj _hx_tink_core__Lazy_LazyFunc__hx_tink_core__Lazy_LazyObject= {
	(  ::Dynamic (hx::Object::*)())&::tink::core::_Lazy::LazyFunc_obj::get,
	( ::Dynamic (hx::Object::*)( ::Dynamic))&::tink::core::_Lazy::LazyFunc_obj::map,
};

void *LazyFunc_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xe1200775: return &_hx_tink_core__Lazy_LazyFunc__hx_tink_core__Lazy_LazyObject;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

 ::Dynamic LazyFunc_obj::get(){
            	HX_STACKFRAME(&_hx_pos_abecf4c8a88f2d81_51_get)
HXLINE(  53)		if (hx::IsNotNull( this->f )) {
HXLINE(  55)			this->result = this->f();
HXLINE(  56)			this->f = null();
            		}
HXLINE(  59)		return this->result;
            	}


HX_DEFINE_DYNAMIC_FUNC0(LazyFunc_obj,get,return )

::Dynamic LazyFunc_obj::map( ::Dynamic f){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::tink::core::_Lazy::LazyFunc,_gthis, ::Dynamic,f) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_STACKFRAME(&_hx_pos_abecf4c8a88f2d81_63_map)
HXLINE(  63)			 ::Dynamic _hx_tmp = _gthis->get();
HXDLIN(  63)			return f(_hx_tmp);
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_GC_STACKFRAME(&_hx_pos_abecf4c8a88f2d81_62_map)
HXDLIN(  62)		 ::tink::core::_Lazy::LazyFunc _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  63)		return  ::tink::core::_Lazy::LazyFunc_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_0(_gthis,f)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(LazyFunc_obj,map,return )


hx::ObjectPtr< LazyFunc_obj > LazyFunc_obj::__new( ::Dynamic f) {
	hx::ObjectPtr< LazyFunc_obj > __this = new LazyFunc_obj();
	__this->__construct(f);
	return __this;
}

hx::ObjectPtr< LazyFunc_obj > LazyFunc_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic f) {
	LazyFunc_obj *__this = (LazyFunc_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(LazyFunc_obj), true, "tink.core._Lazy.LazyFunc"));
	*(void **)__this = LazyFunc_obj::_hx_vtable;
	__this->__construct(f);
	return __this;
}

LazyFunc_obj::LazyFunc_obj()
{
}

void LazyFunc_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(LazyFunc);
	HX_MARK_MEMBER_NAME(f,"f");
	HX_MARK_MEMBER_NAME(result,"result");
	HX_MARK_END_CLASS();
}

void LazyFunc_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(f,"f");
	HX_VISIT_MEMBER_NAME(result,"result");
}

hx::Val LazyFunc_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"f") ) { return hx::Val( f ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"map") ) { return hx::Val( map_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"result") ) { return hx::Val( result ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val LazyFunc_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"f") ) { f=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"result") ) { result=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LazyFunc_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("result",dd,68,84,08));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo LazyFunc_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(LazyFunc_obj,f),HX_("f",66,00,00,00)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(LazyFunc_obj,result),HX_("result",dd,68,84,08)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *LazyFunc_obj_sStaticStorageInfo = 0;
#endif

static ::String LazyFunc_obj_sMemberFields[] = {
	HX_("f",66,00,00,00),
	HX_("result",dd,68,84,08),
	HX_("get",96,80,4e,00),
	HX_("map",9c,0a,53,00),
	::String(null()) };

hx::Class LazyFunc_obj::__mClass;

void LazyFunc_obj::__register()
{
	LazyFunc_obj _hx_dummy;
	LazyFunc_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("tink.core._Lazy.LazyFunc",06,ae,c7,2b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(LazyFunc_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< LazyFunc_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LazyFunc_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LazyFunc_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace tink
} // end namespace core
} // end namespace _Lazy
