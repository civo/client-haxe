// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_tink_core_Noise
#include <tink/core/Noise.h>
#endif
namespace tink{
namespace core{

::tink::core::Noise Noise_obj::Noise;

bool Noise_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	if (inName==HX_("Noise",7a,ff,ef,32)) { outValue = Noise_obj::Noise; return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(Noise_obj)

int Noise_obj::__FindIndex(::String inName)
{
	if (inName==HX_("Noise",7a,ff,ef,32)) return 0;
	return super::__FindIndex(inName);
}

int Noise_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("Noise",7a,ff,ef,32)) return 0;
	return super::__FindArgCount(inName);
}

hx::Val Noise_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	if (inName==HX_("Noise",7a,ff,ef,32)) return Noise;
	return super::__Field(inName,inCallProp);
}

static ::String Noise_obj_sStaticFields[] = {
	HX_("Noise",7a,ff,ef,32),
	::String(null())
};

hx::Class Noise_obj::__mClass;

Dynamic __Create_Noise_obj() { return new Noise_obj; }

void Noise_obj::__register()
{

hx::Static(__mClass) = hx::_hx_RegisterClass(HX_("tink.core.Noise",27,c1,0d,42), hx::TCanCast< Noise_obj >,Noise_obj_sStaticFields,0,
	&__Create_Noise_obj, &__Create,
	&super::__SGetClass(), &CreateNoise_obj, 0
#ifdef HXCPP_VISIT_ALLOCS
    , 0
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &Noise_obj::__GetStatic;
}

void Noise_obj::__boot()
{
Noise = hx::CreateConstEnum< Noise_obj >(HX_("Noise",7a,ff,ef,32),0);
}


} // end namespace tink
} // end namespace core
