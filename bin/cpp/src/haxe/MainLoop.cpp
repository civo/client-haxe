// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_haxe_MainEvent
#include <haxe/MainEvent.h>
#endif
#ifndef INCLUDED_haxe_MainLoop
#include <haxe/MainLoop.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_b562134d2cd5593c_66_hasEvents,"haxe.MainLoop","hasEvents",0xbbf2790a,"haxe.MainLoop.hasEvents","/usr/share/haxe/std/haxe/MainLoop.hx",66,0x2c185893)
HX_LOCAL_STACK_FRAME(_hx_pos_b562134d2cd5593c_87_add,"haxe.MainLoop","add",0xf65145d8,"haxe.MainLoop.add","/usr/share/haxe/std/haxe/MainLoop.hx",87,0x2c185893)
HX_LOCAL_STACK_FRAME(_hx_pos_b562134d2cd5593c_99_sortEvents,"haxe.MainLoop","sortEvents",0x1a386640,"haxe.MainLoop.sortEvents","/usr/share/haxe/std/haxe/MainLoop.hx",99,0x2c185893)
HX_LOCAL_STACK_FRAME(_hx_pos_b562134d2cd5593c_164_tick,"haxe.MainLoop","tick",0x9d5eafc6,"haxe.MainLoop.tick","/usr/share/haxe/std/haxe/MainLoop.hx",164,0x2c185893)
namespace haxe{

void MainLoop_obj::__construct() { }

Dynamic MainLoop_obj::__CreateEmpty() { return new MainLoop_obj; }

void *MainLoop_obj::_hx_vtable = 0;

Dynamic MainLoop_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MainLoop_obj > _hx_result = new MainLoop_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MainLoop_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0351e9c3;
}

 ::haxe::MainEvent MainLoop_obj::pending;

bool MainLoop_obj::hasEvents(){
            	HX_STACKFRAME(&_hx_pos_b562134d2cd5593c_66_hasEvents)
HXLINE(  67)		 ::haxe::MainEvent p = ::haxe::MainLoop_obj::pending;
HXLINE(  68)		while(hx::IsNotNull( p )){
HXLINE(  69)			if (p->isBlocking) {
HXLINE(  70)				return true;
            			}
HXLINE(  71)			p = p->next;
            		}
HXLINE(  73)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(MainLoop_obj,hasEvents,return )

 ::haxe::MainEvent MainLoop_obj::add( ::Dynamic f,hx::Null< int >  __o_priority){
            		int priority = __o_priority.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_b562134d2cd5593c_87_add)
HXLINE(  88)		if (hx::IsNull( f )) {
HXLINE(  89)			HX_STACK_DO_THROW(HX_("Event function is null",5b,98,d0,36));
            		}
HXLINE(  90)		 ::haxe::MainEvent e =  ::haxe::MainEvent_obj::__alloc( HX_CTX ,f,priority);
HXLINE(  91)		 ::haxe::MainEvent head = ::haxe::MainLoop_obj::pending;
HXLINE(  92)		if (hx::IsNotNull( head )) {
HXLINE(  93)			head->prev = e;
            		}
HXLINE(  94)		e->next = head;
HXLINE(  95)		::haxe::MainLoop_obj::pending = e;
HXLINE(  96)		return e;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(MainLoop_obj,add,return )

void MainLoop_obj::sortEvents(){
            	HX_STACKFRAME(&_hx_pos_b562134d2cd5593c_99_sortEvents)
HXLINE( 103)		 ::haxe::MainEvent list = ::haxe::MainLoop_obj::pending;
HXLINE( 105)		if (hx::IsNull( list )) {
HXLINE( 106)			return;
            		}
HXLINE( 108)		int insize = 1;
HXDLIN( 108)		int nmerges;
HXDLIN( 108)		int psize = 0;
HXDLIN( 108)		int qsize = 0;
HXLINE( 109)		 ::haxe::MainEvent p;
HXDLIN( 109)		 ::haxe::MainEvent q;
HXDLIN( 109)		 ::haxe::MainEvent e;
HXDLIN( 109)		 ::haxe::MainEvent tail;
HXLINE( 111)		while(true){
HXLINE( 112)			p = list;
HXLINE( 113)			list = null();
HXLINE( 114)			tail = null();
HXLINE( 115)			nmerges = 0;
HXLINE( 116)			while(hx::IsNotNull( p )){
HXLINE( 117)				nmerges = (nmerges + 1);
HXLINE( 118)				q = p;
HXLINE( 119)				psize = 0;
HXLINE( 120)				{
HXLINE( 120)					int _g = 0;
HXDLIN( 120)					int _g1 = insize;
HXDLIN( 120)					while((_g < _g1)){
HXLINE( 120)						_g = (_g + 1);
HXDLIN( 120)						int i = (_g - 1);
HXLINE( 121)						psize = (psize + 1);
HXLINE( 122)						q = q->next;
HXLINE( 123)						if (hx::IsNull( q )) {
HXLINE( 124)							goto _hx_goto_5;
            						}
            					}
            					_hx_goto_5:;
            				}
HXLINE( 126)				qsize = insize;
HXLINE( 127)				while(true){
HXLINE( 127)					bool _hx_tmp;
HXDLIN( 127)					if ((psize <= 0)) {
HXLINE( 127)						if ((qsize > 0)) {
HXLINE( 127)							_hx_tmp = hx::IsNotNull( q );
            						}
            						else {
HXLINE( 127)							_hx_tmp = false;
            						}
            					}
            					else {
HXLINE( 127)						_hx_tmp = true;
            					}
HXDLIN( 127)					if (!(_hx_tmp)) {
HXLINE( 127)						goto _hx_goto_6;
            					}
HXLINE( 128)					if ((psize == 0)) {
HXLINE( 129)						e = q;
HXLINE( 130)						q = q->next;
HXLINE( 131)						qsize = (qsize - 1);
            					}
            					else {
HXLINE( 132)						bool _hx_tmp1;
HXDLIN( 132)						bool _hx_tmp2;
HXDLIN( 132)						if ((qsize != 0)) {
HXLINE( 132)							_hx_tmp2 = hx::IsNull( q );
            						}
            						else {
HXLINE( 132)							_hx_tmp2 = true;
            						}
HXDLIN( 132)						if (!(_hx_tmp2)) {
HXLINE( 134)							if ((p->priority <= q->priority)) {
HXLINE( 134)								if ((p->priority == q->priority)) {
HXLINE( 132)									_hx_tmp1 = (p->nextRun <= q->nextRun);
            								}
            								else {
HXLINE( 132)									_hx_tmp1 = false;
            								}
            							}
            							else {
HXLINE( 132)								_hx_tmp1 = true;
            							}
            						}
            						else {
HXLINE( 132)							_hx_tmp1 = true;
            						}
HXDLIN( 132)						if (_hx_tmp1) {
HXLINE( 135)							e = p;
HXLINE( 136)							p = p->next;
HXLINE( 137)							psize = (psize - 1);
            						}
            						else {
HXLINE( 139)							e = q;
HXLINE( 140)							q = q->next;
HXLINE( 141)							qsize = (qsize - 1);
            						}
            					}
HXLINE( 143)					if (hx::IsNotNull( tail )) {
HXLINE( 144)						tail->next = e;
            					}
            					else {
HXLINE( 146)						list = e;
            					}
HXLINE( 147)					e->prev = tail;
HXLINE( 148)					tail = e;
            				}
            				_hx_goto_6:;
HXLINE( 150)				p = q;
            			}
HXLINE( 152)			tail->next = null();
HXLINE( 153)			if ((nmerges <= 1)) {
HXLINE( 154)				goto _hx_goto_3;
            			}
HXLINE( 155)			insize = (insize * 2);
            		}
            		_hx_goto_3:;
HXLINE( 157)		list->prev = null();
HXLINE( 158)		::haxe::MainLoop_obj::pending = list;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(MainLoop_obj,sortEvents,(void))

Float MainLoop_obj::tick(){
            	HX_STACKFRAME(&_hx_pos_b562134d2cd5593c_164_tick)
HXLINE( 165)		::haxe::MainLoop_obj::sortEvents();
HXLINE( 166)		 ::haxe::MainEvent e = ::haxe::MainLoop_obj::pending;
HXLINE( 167)		Float now =  ::__time_stamp();
HXLINE( 168)		Float wait = ((Float)1e9);
HXLINE( 169)		while(hx::IsNotNull( e )){
HXLINE( 170)			 ::haxe::MainEvent next = e->next;
HXLINE( 171)			Float wt = (e->nextRun - now);
HXLINE( 172)			if ((wt <= 0)) {
HXLINE( 173)				wait = ( (Float)(0) );
HXLINE( 174)				if (hx::IsNotNull( e->f )) {
HXLINE( 174)					e->f();
            				}
            			}
            			else {
HXLINE( 175)				if ((wait > wt)) {
HXLINE( 176)					wait = wt;
            				}
            			}
HXLINE( 177)			e = next;
            		}
HXLINE( 179)		return wait;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(MainLoop_obj,tick,return )


MainLoop_obj::MainLoop_obj()
{
}

bool MainLoop_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"tick") ) { outValue = tick_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pending") ) { outValue = ( pending ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"hasEvents") ) { outValue = hasEvents_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sortEvents") ) { outValue = sortEvents_dyn(); return true; }
	}
	return false;
}

bool MainLoop_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"pending") ) { pending=ioValue.Cast<  ::haxe::MainEvent >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *MainLoop_obj_sMemberStorageInfo = 0;
static hx::StaticInfo MainLoop_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::haxe::MainEvent */ ,(void *) &MainLoop_obj::pending,HX_("pending",57,98,ec,2b)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void MainLoop_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MainLoop_obj::pending,"pending");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MainLoop_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MainLoop_obj::pending,"pending");
};

#endif

hx::Class MainLoop_obj::__mClass;

static ::String MainLoop_obj_sStaticFields[] = {
	HX_("pending",57,98,ec,2b),
	HX_("hasEvents",13,02,53,d7),
	HX_("add",21,f2,49,00),
	HX_("sortEvents",17,c5,4f,f3),
	HX_("tick",5d,c3,fc,4c),
	::String(null())
};

void MainLoop_obj::__register()
{
	MainLoop_obj _hx_dummy;
	MainLoop_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.MainLoop",a5,cc,ab,e6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MainLoop_obj::__GetStatic;
	__mClass->mSetStaticField = &MainLoop_obj::__SetStatic;
	__mClass->mMarkFunc = MainLoop_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(MainLoop_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< MainLoop_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MainLoop_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MainLoop_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MainLoop_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
