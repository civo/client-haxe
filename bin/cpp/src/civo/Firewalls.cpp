// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_civo_Firewalls
#include <civo/Firewalls.h>
#endif
#ifndef INCLUDED_civo_net_CivoHttp
#include <civo/net/CivoHttp.h>
#endif
#ifndef INCLUDED_tink_core_LinkObject
#include <tink/core/LinkObject.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_a5488e35acbbc0cd_10_create,"civo.Firewalls","create",0xfa55af66,"civo.Firewalls.create","civo/Firewalls.hx",10,0xec8c23fb)
HX_LOCAL_STACK_FRAME(_hx_pos_a5488e35acbbc0cd_14_create_rules,"civo.Firewalls","create_rules",0x930deb1e,"civo.Firewalls.create_rules","civo/Firewalls.hx",14,0xec8c23fb)
HX_LOCAL_STACK_FRAME(_hx_pos_a5488e35acbbc0cd_18_get_rules,"civo.Firewalls","get_rules",0x43e71624,"civo.Firewalls.get_rules","civo/Firewalls.hx",18,0xec8c23fb)
HX_LOCAL_STACK_FRAME(_hx_pos_a5488e35acbbc0cd_22_list,"civo.Firewalls","list",0xb0779648,"civo.Firewalls.list","civo/Firewalls.hx",22,0xec8c23fb)
HX_LOCAL_STACK_FRAME(_hx_pos_a5488e35acbbc0cd_26_delete,"civo.Firewalls","delete",0xe91f0895,"civo.Firewalls.delete","civo/Firewalls.hx",26,0xec8c23fb)
HX_LOCAL_STACK_FRAME(_hx_pos_a5488e35acbbc0cd_30_delete_rule,"civo.Firewalls","delete_rule",0x13555026,"civo.Firewalls.delete_rule","civo/Firewalls.hx",30,0xec8c23fb)
HX_LOCAL_STACK_FRAME(_hx_pos_a5488e35acbbc0cd_7_boot,"civo.Firewalls","boot",0xa9dffe1c,"civo.Firewalls.boot","civo/Firewalls.hx",7,0xec8c23fb)
namespace civo{

void Firewalls_obj::__construct() { }

Dynamic Firewalls_obj::__CreateEmpty() { return new Firewalls_obj; }

void *Firewalls_obj::_hx_vtable = 0;

Dynamic Firewalls_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Firewalls_obj > _hx_result = new Firewalls_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Firewalls_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4f70d50c;
}

::String Firewalls_obj::path;

void Firewalls_obj::create(::String token,::String name, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_a5488e35acbbc0cd_10_create)
HXDLIN(  10)		::civo::net::CivoHttp_obj::post(token,::civo::Firewalls_obj::path,handler, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("name",4b,72,ff,48),name)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Firewalls_obj,create,(void))

void Firewalls_obj::create_rules(::String token,::String firewall_id, ::Dynamic params, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_a5488e35acbbc0cd_14_create_rules)
HXDLIN(  14)		::civo::net::CivoHttp_obj::post(token,((((HX_("",00,00,00,00) + ::civo::Firewalls_obj::path) + HX_("/",2f,00,00,00)) + firewall_id) + HX_("/rules",68,59,1c,bc)),handler,params);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Firewalls_obj,create_rules,(void))

void Firewalls_obj::get_rules(::String token,::String firewall_id, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_a5488e35acbbc0cd_18_get_rules)
HXDLIN(  18)		::civo::net::CivoHttp_obj::get(token,((((HX_("",00,00,00,00) + ::civo::Firewalls_obj::path) + HX_("/",2f,00,00,00)) + firewall_id) + HX_("/rules",68,59,1c,bc)),handler,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Firewalls_obj,get_rules,(void))

void Firewalls_obj::list(::String token, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_a5488e35acbbc0cd_22_list)
HXDLIN(  22)		::civo::net::CivoHttp_obj::get(token,::civo::Firewalls_obj::path,handler,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Firewalls_obj,list,(void))

void Firewalls_obj::_hx_delete(::String token,::String firewall_id, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_a5488e35acbbc0cd_26_delete)
HXDLIN(  26)		::civo::net::CivoHttp_obj::_hx_delete(token,(((HX_("",00,00,00,00) + ::civo::Firewalls_obj::path) + HX_("/",2f,00,00,00)) + firewall_id),handler,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Firewalls_obj,_hx_delete,(void))

void Firewalls_obj::delete_rule(::String token,::String firewall_id,::String rule_id, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_a5488e35acbbc0cd_30_delete_rule)
HXDLIN(  30)		::civo::net::CivoHttp_obj::_hx_delete(token,(((((HX_("",00,00,00,00) + ::civo::Firewalls_obj::path) + HX_("/",2f,00,00,00)) + firewall_id) + HX_("/rules/",c7,e1,b1,dc)) + rule_id),handler,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Firewalls_obj,delete_rule,(void))


Firewalls_obj::Firewalls_obj()
{
}

bool Firewalls_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { outValue = ( path ); return true; }
		if (HX_FIELD_EQ(inName,"list") ) { outValue = list_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"delete") ) { outValue = _hx_delete_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_rules") ) { outValue = get_rules_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"delete_rule") ) { outValue = delete_rule_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"create_rules") ) { outValue = create_rules_dyn(); return true; }
	}
	return false;
}

bool Firewalls_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { path=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Firewalls_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Firewalls_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &Firewalls_obj::path,HX_("path",a5,e5,51,4a)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Firewalls_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Firewalls_obj::path,"path");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Firewalls_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Firewalls_obj::path,"path");
};

#endif

hx::Class Firewalls_obj::__mClass;

static ::String Firewalls_obj_sStaticFields[] = {
	HX_("path",a5,e5,51,4a),
	HX_("create",fc,66,0f,7c),
	HX_("create_rules",34,77,fe,da),
	HX_("get_rules",4e,c0,ff,34),
	HX_("list",5e,1c,b3,47),
	HX_("delete",2b,c0,d8,6a),
	HX_("delete_rule",d0,58,8c,fb),
	::String(null())
};

void Firewalls_obj::__register()
{
	Firewalls_obj _hx_dummy;
	Firewalls_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("civo.Firewalls",c4,2e,76,70);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Firewalls_obj::__GetStatic;
	__mClass->mSetStaticField = &Firewalls_obj::__SetStatic;
	__mClass->mMarkFunc = Firewalls_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Firewalls_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Firewalls_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Firewalls_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Firewalls_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Firewalls_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Firewalls_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_a5488e35acbbc0cd_7_boot)
HXDLIN(   7)		path = HX_("/firewalls",a4,06,46,7b);
            	}
}

} // end namespace civo
