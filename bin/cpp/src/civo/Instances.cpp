// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_civo_Instances
#include <civo/Instances.h>
#endif
#ifndef INCLUDED_civo_net_CivoHttp
#include <civo/net/CivoHttp.h>
#endif
#ifndef INCLUDED_tink_core_LinkObject
#include <tink/core/LinkObject.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_32be6e8130fb61e0_15_available_sizes,"civo.Instances","available_sizes",0xe3ec853d,"civo.Instances.available_sizes","civo/Instances.hx",15,0xe3cf0e50)
HX_LOCAL_STACK_FRAME(_hx_pos_32be6e8130fb61e0_19_create,"civo.Instances","create",0x6f64e83b,"civo.Instances.create","civo/Instances.hx",19,0xe3cf0e50)
HX_LOCAL_STACK_FRAME(_hx_pos_32be6e8130fb61e0_23_list,"civo.Instances","list",0x2e097fdd,"civo.Instances.list","civo/Instances.hx",23,0xe3cf0e50)
HX_LOCAL_STACK_FRAME(_hx_pos_32be6e8130fb61e0_27_get,"civo.Instances","get",0xaeaf51f7,"civo.Instances.get","civo/Instances.hx",27,0xe3cf0e50)
HX_LOCAL_STACK_FRAME(_hx_pos_32be6e8130fb61e0_31_delete,"civo.Instances","delete",0x5e2e416a,"civo.Instances.delete","civo/Instances.hx",31,0xe3cf0e50)
HX_LOCAL_STACK_FRAME(_hx_pos_32be6e8130fb61e0_35_retag,"civo.Instances","retag",0x8c09b428,"civo.Instances.retag","civo/Instances.hx",35,0xe3cf0e50)
HX_LOCAL_STACK_FRAME(_hx_pos_32be6e8130fb61e0_39_hard_reboots,"civo.Instances","hard_reboots",0x9680e159,"civo.Instances.hard_reboots","civo/Instances.hx",39,0xe3cf0e50)
HX_LOCAL_STACK_FRAME(_hx_pos_32be6e8130fb61e0_43_soft_reboots,"civo.Instances","soft_reboots",0xa17d6658,"civo.Instances.soft_reboots","civo/Instances.hx",43,0xe3cf0e50)
HX_LOCAL_STACK_FRAME(_hx_pos_32be6e8130fb61e0_47_stop,"civo.Instances","stop",0x32b25381,"civo.Instances.stop","civo/Instances.hx",47,0xe3cf0e50)
HX_LOCAL_STACK_FRAME(_hx_pos_32be6e8130fb61e0_51_start,"civo.Instances","start",0x294c2003,"civo.Instances.start","civo/Instances.hx",51,0xe3cf0e50)
HX_LOCAL_STACK_FRAME(_hx_pos_32be6e8130fb61e0_55_resize,"civo.Instances","resize",0xfbd0db33,"civo.Instances.resize","civo/Instances.hx",55,0xe3cf0e50)
HX_LOCAL_STACK_FRAME(_hx_pos_32be6e8130fb61e0_59_firewall,"civo.Instances","firewall",0x7828d2bf,"civo.Instances.firewall","civo/Instances.hx",59,0xe3cf0e50)
HX_LOCAL_STACK_FRAME(_hx_pos_32be6e8130fb61e0_63_move_ip,"civo.Instances","move_ip",0x420fa576,"civo.Instances.move_ip","civo/Instances.hx",63,0xe3cf0e50)
HX_LOCAL_STACK_FRAME(_hx_pos_32be6e8130fb61e0_12_boot,"civo.Instances","boot",0x2771e7b1,"civo.Instances.boot","civo/Instances.hx",12,0xe3cf0e50)
namespace civo{

void Instances_obj::__construct() { }

Dynamic Instances_obj::__CreateEmpty() { return new Instances_obj; }

void *Instances_obj::_hx_vtable = 0;

Dynamic Instances_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Instances_obj > _hx_result = new Instances_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Instances_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6cf15397;
}

::String Instances_obj::path;

void Instances_obj::available_sizes(::String token, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_32be6e8130fb61e0_15_available_sizes)
HXDLIN(  15)		::civo::net::CivoHttp_obj::get(token,HX_("sizes",92,08,d9,7c),handler,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Instances_obj,available_sizes,(void))

void Instances_obj::create(::String token, ::Dynamic params, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_32be6e8130fb61e0_19_create)
HXDLIN(  19)		::civo::net::CivoHttp_obj::post(token,::civo::Instances_obj::path,handler,params);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Instances_obj,create,(void))

void Instances_obj::list(::String token, ::Dynamic params, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_32be6e8130fb61e0_23_list)
HXDLIN(  23)		::civo::net::CivoHttp_obj::get(token,::civo::Instances_obj::path,handler,params);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Instances_obj,list,(void))

void Instances_obj::get(::String token,::String instance_id, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_32be6e8130fb61e0_27_get)
HXDLIN(  27)		::civo::net::CivoHttp_obj::get(token,(((HX_("",00,00,00,00) + ::civo::Instances_obj::path) + HX_("/",2f,00,00,00)) + instance_id),handler,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Instances_obj,get,(void))

void Instances_obj::_hx_delete(::String token,::String instance_id, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_32be6e8130fb61e0_31_delete)
HXDLIN(  31)		::civo::net::CivoHttp_obj::_hx_delete(token,(((HX_("",00,00,00,00) + ::civo::Instances_obj::path) + HX_("/",2f,00,00,00)) + instance_id),handler,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Instances_obj,_hx_delete,(void))

void Instances_obj::retag(::String token,::String instance_id,::String tags, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_32be6e8130fb61e0_35_retag)
HXDLIN(  35)		::civo::net::CivoHttp_obj::put(token,((((HX_("",00,00,00,00) + ::civo::Instances_obj::path) + HX_("/",2f,00,00,00)) + instance_id) + HX_("/tags",88,f8,cb,5c)),handler, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("tags",d9,b4,f6,4c),tags)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Instances_obj,retag,(void))

void Instances_obj::hard_reboots(::String token,::String instance_id, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_32be6e8130fb61e0_39_hard_reboots)
HXDLIN(  39)		::civo::net::CivoHttp_obj::post(token,((((HX_("",00,00,00,00) + ::civo::Instances_obj::path) + HX_("/",2f,00,00,00)) + instance_id) + HX_("/hard_reboots",89,71,23,37)),handler,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Instances_obj,hard_reboots,(void))

void Instances_obj::soft_reboots(::String token,::String instance_id, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_32be6e8130fb61e0_43_soft_reboots)
HXDLIN(  43)		::civo::net::CivoHttp_obj::post(token,((((HX_("",00,00,00,00) + ::civo::Instances_obj::path) + HX_("/",2f,00,00,00)) + instance_id) + HX_("/soft_reboots",88,f6,1f,42)),handler,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Instances_obj,soft_reboots,(void))

void Instances_obj::stop(::String token,::String instance_id, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_32be6e8130fb61e0_47_stop)
HXDLIN(  47)		::civo::net::CivoHttp_obj::put(token,((((HX_("",00,00,00,00) + ::civo::Instances_obj::path) + HX_("/",2f,00,00,00)) + instance_id) + HX_("/stop",b1,33,31,5c)),handler,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Instances_obj,stop,(void))

void Instances_obj::start(::String token,::String instance_id, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_32be6e8130fb61e0_51_start)
HXDLIN(  51)		::civo::net::CivoHttp_obj::put(token,((((HX_("",00,00,00,00) + ::civo::Instances_obj::path) + HX_("/",2f,00,00,00)) + instance_id) + HX_("/start",d3,69,d1,4e)),handler,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Instances_obj,start,(void))

void Instances_obj::resize(::String token,::String instance_id,::String size, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_32be6e8130fb61e0_55_resize)
HXDLIN(  55)		::civo::net::CivoHttp_obj::put(token,((((HX_("",00,00,00,00) + ::civo::Instances_obj::path) + HX_("/",2f,00,00,00)) + instance_id) + HX_("/resize",63,27,ec,aa)),handler, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("size",c1,a0,53,4c),size)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Instances_obj,resize,(void))

void Instances_obj::firewall(::String token,::String instance_id,::String firewall_id, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_32be6e8130fb61e0_59_firewall)
HXDLIN(  59)		::civo::net::CivoHttp_obj::put(token,((((HX_("",00,00,00,00) + ::civo::Instances_obj::path) + HX_("/",2f,00,00,00)) + instance_id) + HX_("/firewall",ef,8a,d3,9d)),handler, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("firewall_id",3a,06,9c,4b),firewall_id)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Instances_obj,firewall,(void))

void Instances_obj::move_ip(::String token,::String instance_id,::String ip_address, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_32be6e8130fb61e0_63_move_ip)
HXDLIN(  63)		::civo::net::CivoHttp_obj::put(token,(((((HX_("",00,00,00,00) + ::civo::Instances_obj::path) + HX_("/",2f,00,00,00)) + instance_id) + HX_("/ip/",99,15,61,1f)) + ip_address),handler,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Instances_obj,move_ip,(void))


Instances_obj::Instances_obj()
{
}

bool Instances_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { outValue = ( path ); return true; }
		if (HX_FIELD_EQ(inName,"list") ) { outValue = list_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stop") ) { outValue = stop_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"retag") ) { outValue = retag_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"start") ) { outValue = start_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"delete") ) { outValue = _hx_delete_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resize") ) { outValue = resize_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"move_ip") ) { outValue = move_ip_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"firewall") ) { outValue = firewall_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"hard_reboots") ) { outValue = hard_reboots_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"soft_reboots") ) { outValue = soft_reboots_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"available_sizes") ) { outValue = available_sizes_dyn(); return true; }
	}
	return false;
}

bool Instances_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { path=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Instances_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Instances_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &Instances_obj::path,HX_("path",a5,e5,51,4a)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Instances_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Instances_obj::path,"path");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Instances_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Instances_obj::path,"path");
};

#endif

hx::Class Instances_obj::__mClass;

static ::String Instances_obj_sStaticFields[] = {
	HX_("path",a5,e5,51,4a),
	HX_("available_sizes",5c,a6,26,91),
	HX_("create",fc,66,0f,7c),
	HX_("list",5e,1c,b3,47),
	HX_("get",96,80,4e,00),
	HX_("delete",2b,c0,d8,6a),
	HX_("retag",87,08,c9,e6),
	HX_("hard_reboots",da,66,cc,68),
	HX_("soft_reboots",d9,eb,c8,73),
	HX_("stop",02,f0,5b,4c),
	HX_("start",62,74,0b,84),
	HX_("resize",f4,59,7b,08),
	HX_("firewall",c0,43,81,e3),
	HX_("move_ip",95,0f,94,4a),
	::String(null())
};

void Instances_obj::__register()
{
	Instances_obj _hx_dummy;
	Instances_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("civo.Instances",4f,ad,f6,8d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Instances_obj::__GetStatic;
	__mClass->mSetStaticField = &Instances_obj::__SetStatic;
	__mClass->mMarkFunc = Instances_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Instances_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Instances_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Instances_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Instances_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Instances_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Instances_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_32be6e8130fb61e0_12_boot)
HXDLIN(  12)		path = HX_("/instances",2f,85,c6,98);
            	}
}

} // end namespace civo
