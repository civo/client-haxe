// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_civo_Templates
#include <civo/Templates.h>
#endif
#ifndef INCLUDED_civo_net_CivoHttp
#include <civo/net/CivoHttp.h>
#endif
#ifndef INCLUDED_tink_core_LinkObject
#include <tink/core/LinkObject.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_32da995c0715a3f4_17_create,"civo.Templates","create",0x276c5de0,"civo.Templates.create","civo/Templates.hx",17,0x86578d75)
HX_LOCAL_STACK_FRAME(_hx_pos_32da995c0715a3f4_21_update,"civo.Templates","update",0x32627ced,"civo.Templates.update","civo/Templates.hx",21,0x86578d75)
HX_LOCAL_STACK_FRAME(_hx_pos_32da995c0715a3f4_25_list,"civo.Templates","list",0xe30bd242,"civo.Templates.list","civo/Templates.hx",25,0x86578d75)
HX_LOCAL_STACK_FRAME(_hx_pos_32da995c0715a3f4_29_delete,"civo.Templates","delete",0x1635b70f,"civo.Templates.delete","civo/Templates.hx",29,0x86578d75)
HX_LOCAL_STACK_FRAME(_hx_pos_32da995c0715a3f4_14_boot,"civo.Templates","boot",0xdc743a16,"civo.Templates.boot","civo/Templates.hx",14,0x86578d75)
namespace civo{

void Templates_obj::__construct() { }

Dynamic Templates_obj::__CreateEmpty() { return new Templates_obj; }

void *Templates_obj::_hx_vtable = 0;

Dynamic Templates_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Templates_obj > _hx_result = new Templates_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Templates_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x65aa0b36;
}

::String Templates_obj::path;

void Templates_obj::create(::String token, ::Dynamic params, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_32da995c0715a3f4_17_create)
HXDLIN(  17)		::civo::net::CivoHttp_obj::post(token,::civo::Templates_obj::path,handler,params);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Templates_obj,create,(void))

void Templates_obj::update(::String token,::String template_id, ::Dynamic params, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_32da995c0715a3f4_21_update)
HXDLIN(  21)		::civo::net::CivoHttp_obj::put(token,(((HX_("",00,00,00,00) + ::civo::Templates_obj::path) + HX_("/",2f,00,00,00)) + template_id),handler,params);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Templates_obj,update,(void))

void Templates_obj::list(::String token, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_32da995c0715a3f4_25_list)
HXDLIN(  25)		::civo::net::CivoHttp_obj::get(token,::civo::Templates_obj::path,handler,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Templates_obj,list,(void))

void Templates_obj::_hx_delete(::String token,::String template_id, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_32da995c0715a3f4_29_delete)
HXDLIN(  29)		::civo::net::CivoHttp_obj::_hx_delete(token,(((HX_("",00,00,00,00) + ::civo::Templates_obj::path) + HX_("/",2f,00,00,00)) + template_id),handler,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Templates_obj,_hx_delete,(void))


Templates_obj::Templates_obj()
{
}

bool Templates_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { outValue = ( path ); return true; }
		if (HX_FIELD_EQ(inName,"list") ) { outValue = list_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"update") ) { outValue = update_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"delete") ) { outValue = _hx_delete_dyn(); return true; }
	}
	return false;
}

bool Templates_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { path=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Templates_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Templates_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &Templates_obj::path,HX_("path",a5,e5,51,4a)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Templates_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Templates_obj::path,"path");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Templates_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Templates_obj::path,"path");
};

#endif

hx::Class Templates_obj::__mClass;

static ::String Templates_obj_sStaticFields[] = {
	HX_("path",a5,e5,51,4a),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("list",5e,1c,b3,47),
	HX_("delete",2b,c0,d8,6a),
	::String(null())
};

void Templates_obj::__register()
{
	Templates_obj _hx_dummy;
	Templates_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("civo.Templates",0a,75,7f,55);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Templates_obj::__GetStatic;
	__mClass->mSetStaticField = &Templates_obj::__SetStatic;
	__mClass->mMarkFunc = Templates_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Templates_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Templates_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Templates_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Templates_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Templates_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Templates_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_32da995c0715a3f4_14_boot)
HXDLIN(  14)		path = HX_("/templates",ea,4c,4f,60);
            	}
}

} // end namespace civo
