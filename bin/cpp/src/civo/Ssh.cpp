// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_civo_Ssh
#include <civo/Ssh.h>
#endif
#ifndef INCLUDED_civo_net_CivoHttp
#include <civo/net/CivoHttp.h>
#endif
#ifndef INCLUDED_tink_core_LinkObject
#include <tink/core/LinkObject.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_49c0c9b1902c624e_17_list,"civo.Ssh","list",0x31e371d3,"civo.Ssh.list","civo/Ssh.hx",17,0x0aba7006)
HX_LOCAL_STACK_FRAME(_hx_pos_49c0c9b1902c624e_21_get,"civo.Ssh","get",0x1f3450c1,"civo.Ssh.get","civo/Ssh.hx",21,0x0aba7006)
HX_LOCAL_STACK_FRAME(_hx_pos_49c0c9b1902c624e_25_upload,"civo.Ssh","upload",0xa36226b6,"civo.Ssh.upload","civo/Ssh.hx",25,0x0aba7006)
HX_LOCAL_STACK_FRAME(_hx_pos_49c0c9b1902c624e_29_update,"civo.Ssh","update",0x9e0de2be,"civo.Ssh.update","civo/Ssh.hx",29,0x0aba7006)
HX_LOCAL_STACK_FRAME(_hx_pos_49c0c9b1902c624e_33_delete,"civo.Ssh","delete",0x81e11ce0,"civo.Ssh.delete","civo/Ssh.hx",33,0x0aba7006)
HX_LOCAL_STACK_FRAME(_hx_pos_49c0c9b1902c624e_14_boot,"civo.Ssh","boot",0x2b4bd9a7,"civo.Ssh.boot","civo/Ssh.hx",14,0x0aba7006)
namespace civo{

void Ssh_obj::__construct() { }

Dynamic Ssh_obj::__CreateEmpty() { return new Ssh_obj; }

void *Ssh_obj::_hx_vtable = 0;

Dynamic Ssh_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Ssh_obj > _hx_result = new Ssh_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Ssh_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x21619929;
}

::String Ssh_obj::path;

void Ssh_obj::list(::String token, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_49c0c9b1902c624e_17_list)
HXDLIN(  17)		::civo::net::CivoHttp_obj::get(token,::civo::Ssh_obj::path,handler,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Ssh_obj,list,(void))

void Ssh_obj::get(::String token,::String ssh_id, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_49c0c9b1902c624e_21_get)
HXDLIN(  21)		::civo::net::CivoHttp_obj::get(token,(((HX_("",00,00,00,00) + ::civo::Ssh_obj::path) + HX_("/",2f,00,00,00)) + ssh_id),handler,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Ssh_obj,get,(void))

void Ssh_obj::upload(::String token,::String name,::String public_key, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_49c0c9b1902c624e_25_upload)
HXDLIN(  25)		::civo::net::CivoHttp_obj::post(token,::civo::Ssh_obj::path,handler, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("public_key",c9,57,88,34),public_key)
            			->setFixed(1,HX_("name",4b,72,ff,48),name)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Ssh_obj,upload,(void))

void Ssh_obj::update(::String token,::String ssh_id,::String name, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_49c0c9b1902c624e_29_update)
HXDLIN(  29)		::civo::net::CivoHttp_obj::put(token,(((HX_("",00,00,00,00) + ::civo::Ssh_obj::path) + HX_("/",2f,00,00,00)) + ssh_id),handler, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("name",4b,72,ff,48),name)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Ssh_obj,update,(void))

void Ssh_obj::_hx_delete(::String token,::String ssh_id, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_49c0c9b1902c624e_33_delete)
HXDLIN(  33)		::civo::net::CivoHttp_obj::_hx_delete(token,(((HX_("",00,00,00,00) + ::civo::Ssh_obj::path) + HX_("/",2f,00,00,00)) + ssh_id),handler,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Ssh_obj,_hx_delete,(void))


Ssh_obj::Ssh_obj()
{
}

bool Ssh_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { outValue = ( path ); return true; }
		if (HX_FIELD_EQ(inName,"list") ) { outValue = list_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"upload") ) { outValue = upload_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"update") ) { outValue = update_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"delete") ) { outValue = _hx_delete_dyn(); return true; }
	}
	return false;
}

bool Ssh_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { path=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Ssh_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Ssh_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &Ssh_obj::path,HX_("path",a5,e5,51,4a)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Ssh_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Ssh_obj::path,"path");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Ssh_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Ssh_obj::path,"path");
};

#endif

hx::Class Ssh_obj::__mClass;

static ::String Ssh_obj_sStaticFields[] = {
	HX_("path",a5,e5,51,4a),
	HX_("list",5e,1c,b3,47),
	HX_("get",96,80,4e,00),
	HX_("upload",01,ca,59,8c),
	HX_("update",09,86,05,87),
	HX_("delete",2b,c0,d8,6a),
	::String(null())
};

void Ssh_obj::__register()
{
	Ssh_obj _hx_dummy;
	Ssh_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("civo.Ssh",19,ff,0d,63);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Ssh_obj::__GetStatic;
	__mClass->mSetStaticField = &Ssh_obj::__SetStatic;
	__mClass->mMarkFunc = Ssh_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Ssh_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Ssh_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Ssh_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Ssh_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Ssh_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Ssh_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_49c0c9b1902c624e_14_boot)
HXDLIN(  14)		path = HX_("/sshkeys",6d,01,25,52);
            	}
}

} // end namespace civo
