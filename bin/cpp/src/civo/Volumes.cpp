// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_civo_Volumes
#include <civo/Volumes.h>
#endif
#ifndef INCLUDED_civo_net_CivoHttp
#include <civo/net/CivoHttp.h>
#endif
#ifndef INCLUDED_tink_core_LinkObject
#include <tink/core/LinkObject.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_ce75b62e1985d8b5_18_create,"civo.Volumes","create",0x05284dc0,"civo.Volumes.create","civo/Volumes.hx",18,0x02c3fb15)
HX_LOCAL_STACK_FRAME(_hx_pos_ce75b62e1985d8b5_22_list,"civo.Volumes","list",0xf4e20a22,"civo.Volumes.list","civo/Volumes.hx",22,0x02c3fb15)
HX_LOCAL_STACK_FRAME(_hx_pos_ce75b62e1985d8b5_26_resize,"civo.Volumes","resize",0x919440b8,"civo.Volumes.resize","civo/Volumes.hx",26,0x02c3fb15)
HX_LOCAL_STACK_FRAME(_hx_pos_ce75b62e1985d8b5_30_attach,"civo.Volumes","attach",0x6928e289,"civo.Volumes.attach","civo/Volumes.hx",30,0x02c3fb15)
HX_LOCAL_STACK_FRAME(_hx_pos_ce75b62e1985d8b5_34_detach,"civo.Volumes","detach",0xf9384417,"civo.Volumes.detach","civo/Volumes.hx",34,0x02c3fb15)
HX_LOCAL_STACK_FRAME(_hx_pos_ce75b62e1985d8b5_38_delete,"civo.Volumes","delete",0xf3f1a6ef,"civo.Volumes.delete","civo/Volumes.hx",38,0x02c3fb15)
HX_LOCAL_STACK_FRAME(_hx_pos_ce75b62e1985d8b5_15_boot,"civo.Volumes","boot",0xee4a71f6,"civo.Volumes.boot","civo/Volumes.hx",15,0x02c3fb15)
namespace civo{

void Volumes_obj::__construct() { }

Dynamic Volumes_obj::__CreateEmpty() { return new Volumes_obj; }

void *Volumes_obj::_hx_vtable = 0;

Dynamic Volumes_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Volumes_obj > _hx_result = new Volumes_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Volumes_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4ea62b3a;
}

::String Volumes_obj::path;

void Volumes_obj::create(::String token, ::Dynamic params, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_ce75b62e1985d8b5_18_create)
HXDLIN(  18)		::civo::net::CivoHttp_obj::post(token,::civo::Volumes_obj::path,handler,params);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Volumes_obj,create,(void))

void Volumes_obj::list(::String token, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_ce75b62e1985d8b5_22_list)
HXDLIN(  22)		::civo::net::CivoHttp_obj::get(token,::civo::Volumes_obj::path,handler,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Volumes_obj,list,(void))

void Volumes_obj::resize(::String token,::String volume_id,int size_gb, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_ce75b62e1985d8b5_26_resize)
HXDLIN(  26)		::civo::net::CivoHttp_obj::put(token,((((HX_("",00,00,00,00) + ::civo::Volumes_obj::path) + HX_("/",2f,00,00,00)) + volume_id) + HX_("/resize",63,27,ec,aa)),handler, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("size_gb",19,fe,8a,2b),size_gb)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Volumes_obj,resize,(void))

void Volumes_obj::attach(::String token,::String volume_id,::String instance_id, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_ce75b62e1985d8b5_30_attach)
HXDLIN(  30)		::civo::net::CivoHttp_obj::put(token,((((HX_("",00,00,00,00) + ::civo::Volumes_obj::path) + HX_("/",2f,00,00,00)) + volume_id) + HX_("/attach",34,c9,80,82)),handler, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("instance_id",85,7d,21,29),instance_id)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Volumes_obj,attach,(void))

void Volumes_obj::detach(::String token,::String volume_id, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_ce75b62e1985d8b5_34_detach)
HXDLIN(  34)		::civo::net::CivoHttp_obj::put(token,((((HX_("",00,00,00,00) + ::civo::Volumes_obj::path) + HX_("/",2f,00,00,00)) + volume_id) + HX_("/detach",c2,2a,90,12)),handler,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Volumes_obj,detach,(void))

void Volumes_obj::_hx_delete(::String token,::String volume_id, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_ce75b62e1985d8b5_38_delete)
HXDLIN(  38)		::civo::net::CivoHttp_obj::_hx_delete(token,(((HX_("",00,00,00,00) + ::civo::Volumes_obj::path) + HX_("/",2f,00,00,00)) + volume_id),handler,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Volumes_obj,_hx_delete,(void))


Volumes_obj::Volumes_obj()
{
}

bool Volumes_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { outValue = ( path ); return true; }
		if (HX_FIELD_EQ(inName,"list") ) { outValue = list_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resize") ) { outValue = resize_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"attach") ) { outValue = attach_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"detach") ) { outValue = detach_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"delete") ) { outValue = _hx_delete_dyn(); return true; }
	}
	return false;
}

bool Volumes_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { path=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Volumes_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Volumes_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &Volumes_obj::path,HX_("path",a5,e5,51,4a)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Volumes_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Volumes_obj::path,"path");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Volumes_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Volumes_obj::path,"path");
};

#endif

hx::Class Volumes_obj::__mClass;

static ::String Volumes_obj_sStaticFields[] = {
	HX_("path",a5,e5,51,4a),
	HX_("create",fc,66,0f,7c),
	HX_("list",5e,1c,b3,47),
	HX_("resize",f4,59,7b,08),
	HX_("attach",c5,fb,0f,e0),
	HX_("detach",53,5d,1f,70),
	HX_("delete",2b,c0,d8,6a),
	::String(null())
};

void Volumes_obj::__register()
{
	Volumes_obj _hx_dummy;
	Volumes_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("civo.Volumes",2a,49,14,7f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Volumes_obj::__GetStatic;
	__mClass->mSetStaticField = &Volumes_obj::__SetStatic;
	__mClass->mMarkFunc = Volumes_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Volumes_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Volumes_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Volumes_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Volumes_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Volumes_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Volumes_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ce75b62e1985d8b5_15_boot)
HXDLIN(  15)		path = HX_("/volumes",0a,69,b4,89);
            	}
}

} // end namespace civo
