// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_civo_Charges
#include <civo/Charges.h>
#endif
#ifndef INCLUDED_civo_net_CivoHttp
#include <civo/net/CivoHttp.h>
#endif
#ifndef INCLUDED_tink_core_LinkObject
#include <tink/core/LinkObject.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_afc8d218c986d830_17_list,"civo.Charges","list",0x7a61ea3c,"civo.Charges.list","civo/Charges.hx",17,0xa093c0af)
HX_LOCAL_STACK_FRAME(_hx_pos_afc8d218c986d830_14_boot,"civo.Charges","boot",0x73ca5210,"civo.Charges.boot","civo/Charges.hx",14,0xa093c0af)
namespace civo{

void Charges_obj::__construct() { }

Dynamic Charges_obj::__CreateEmpty() { return new Charges_obj; }

void *Charges_obj::_hx_vtable = 0;

Dynamic Charges_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Charges_obj > _hx_result = new Charges_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Charges_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x14a64160;
}

::String Charges_obj::path;

void Charges_obj::list(::String token, ::Dynamic dateRange, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_afc8d218c986d830_17_list)
HXDLIN(  17)		::civo::net::CivoHttp_obj::get(token,::civo::Charges_obj::path,handler,dateRange);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Charges_obj,list,(void))


Charges_obj::Charges_obj()
{
}

bool Charges_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { outValue = ( path ); return true; }
		if (HX_FIELD_EQ(inName,"list") ) { outValue = list_dyn(); return true; }
	}
	return false;
}

bool Charges_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { path=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Charges_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Charges_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &Charges_obj::path,HX_("path",a5,e5,51,4a)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Charges_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Charges_obj::path,"path");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Charges_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Charges_obj::path,"path");
};

#endif

hx::Class Charges_obj::__mClass;

static ::String Charges_obj_sStaticFields[] = {
	HX_("path",a5,e5,51,4a),
	HX_("list",5e,1c,b3,47),
	::String(null())
};

void Charges_obj::__register()
{
	Charges_obj _hx_dummy;
	Charges_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("civo.Charges",50,5f,14,45);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Charges_obj::__GetStatic;
	__mClass->mSetStaticField = &Charges_obj::__SetStatic;
	__mClass->mMarkFunc = Charges_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Charges_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Charges_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Charges_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Charges_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Charges_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Charges_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_afc8d218c986d830_14_boot)
HXDLIN(  14)		path = HX_("/charges",30,7f,b4,4f);
            	}
}

} // end namespace civo
