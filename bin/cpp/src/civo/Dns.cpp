// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_civo_Dns
#include <civo/Dns.h>
#endif
#ifndef INCLUDED_civo_net_CivoHttp
#include <civo/net/CivoHttp.h>
#endif
#ifndef INCLUDED_tink_core_LinkObject
#include <tink/core/LinkObject.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_b228eda4b89b410c_24_list_domains,"civo.Dns","list_domains",0x5ebece82,"civo.Dns.list_domains","civo/Dns.hx",24,0x31a478c5)
HX_LOCAL_STACK_FRAME(_hx_pos_b228eda4b89b410c_28_create_domain,"civo.Dns","create_domain",0x792508f3,"civo.Dns.create_domain","civo/Dns.hx",28,0x31a478c5)
HX_LOCAL_STACK_FRAME(_hx_pos_b228eda4b89b410c_32_update_domain,"civo.Dns","update_domain",0x5c509586,"civo.Dns.update_domain","civo/Dns.hx",32,0x31a478c5)
HX_LOCAL_STACK_FRAME(_hx_pos_b228eda4b89b410c_36_delete_domain,"civo.Dns","delete_domain",0xef6bc3a4,"civo.Dns.delete_domain","civo/Dns.hx",36,0x31a478c5)
HX_LOCAL_STACK_FRAME(_hx_pos_b228eda4b89b410c_40_list_dns,"civo.Dns","list_dns",0x48377ffc,"civo.Dns.list_dns","civo/Dns.hx",40,0x31a478c5)
HX_LOCAL_STACK_FRAME(_hx_pos_b228eda4b89b410c_44_create_dns,"civo.Dns","create_dns",0xc508d69a,"civo.Dns.create_dns","civo/Dns.hx",44,0x31a478c5)
HX_LOCAL_STACK_FRAME(_hx_pos_b228eda4b89b410c_48_update_dns,"civo.Dns","update_dns",0x6b300027,"civo.Dns.update_dns","civo/Dns.hx",48,0x31a478c5)
HX_LOCAL_STACK_FRAME(_hx_pos_b228eda4b89b410c_52_delete_dns,"civo.Dns","delete_dns",0x05c7f349,"civo.Dns.delete_dns","civo/Dns.hx",52,0x31a478c5)
HX_LOCAL_STACK_FRAME(_hx_pos_b228eda4b89b410c_21_boot,"civo.Dns","boot",0x6758d026,"civo.Dns.boot","civo/Dns.hx",21,0x31a478c5)
namespace civo{

void Dns_obj::__construct() { }

Dynamic Dns_obj::__CreateEmpty() { return new Dns_obj; }

void *Dns_obj::_hx_vtable = 0;

Dynamic Dns_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Dns_obj > _hx_result = new Dns_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Dns_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2156330a;
}

::String Dns_obj::path;

void Dns_obj::list_domains(::String token, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_b228eda4b89b410c_24_list_domains)
HXDLIN(  24)		::civo::net::CivoHttp_obj::get(token,::civo::Dns_obj::path,handler,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dns_obj,list_domains,(void))

void Dns_obj::create_domain(::String token,::String name, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_b228eda4b89b410c_28_create_domain)
HXDLIN(  28)		::civo::net::CivoHttp_obj::post(token,::civo::Dns_obj::path,handler, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("name",4b,72,ff,48),name)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Dns_obj,create_domain,(void))

void Dns_obj::update_domain(::String token,::String domain_id,::String domain_name, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_b228eda4b89b410c_32_update_domain)
HXDLIN(  32)		::civo::net::CivoHttp_obj::put(token,(((HX_("",00,00,00,00) + ::civo::Dns_obj::path) + HX_("/",2f,00,00,00)) + domain_id),handler, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("name",4b,72,ff,48),domain_name)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Dns_obj,update_domain,(void))

void Dns_obj::delete_domain(::String token,::String domain_id, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_b228eda4b89b410c_36_delete_domain)
HXDLIN(  36)		::civo::net::CivoHttp_obj::_hx_delete(token,(((HX_("",00,00,00,00) + ::civo::Dns_obj::path) + HX_("/",2f,00,00,00)) + domain_id),handler,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Dns_obj,delete_domain,(void))

void Dns_obj::list_dns(::String token,::String domain_id, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_b228eda4b89b410c_40_list_dns)
HXDLIN(  40)		::civo::net::CivoHttp_obj::get(token,((((HX_("",00,00,00,00) + ::civo::Dns_obj::path) + HX_("/",2f,00,00,00)) + domain_id) + HX_("/records",73,3c,3e,b1)),handler,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Dns_obj,list_dns,(void))

void Dns_obj::create_dns(::String token,::String domain_id, ::Dynamic params, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_b228eda4b89b410c_44_create_dns)
HXDLIN(  44)		::civo::net::CivoHttp_obj::post(token,((((HX_("",00,00,00,00) + ::civo::Dns_obj::path) + HX_("/",2f,00,00,00)) + domain_id) + HX_("/records",73,3c,3e,b1)),handler,params);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Dns_obj,create_dns,(void))

void Dns_obj::update_dns(::String token,::String domain_id,::String dns_id, ::Dynamic params, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_b228eda4b89b410c_48_update_dns)
HXDLIN(  48)		::civo::net::CivoHttp_obj::put(token,(((((HX_("",00,00,00,00) + ::civo::Dns_obj::path) + HX_("/",2f,00,00,00)) + domain_id) + HX_("/records/",5c,a8,36,65)) + dns_id),handler,params);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Dns_obj,update_dns,(void))

void Dns_obj::delete_dns(::String token,::String domain_id,::String dns_id, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_b228eda4b89b410c_52_delete_dns)
HXDLIN(  52)		::civo::net::CivoHttp_obj::_hx_delete(token,(((((HX_("",00,00,00,00) + ::civo::Dns_obj::path) + HX_("/",2f,00,00,00)) + domain_id) + HX_("/records/",5c,a8,36,65)) + dns_id),handler,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Dns_obj,delete_dns,(void))


Dns_obj::Dns_obj()
{
}

bool Dns_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { outValue = ( path ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"list_dns") ) { outValue = list_dns_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"create_dns") ) { outValue = create_dns_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"update_dns") ) { outValue = update_dns_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"delete_dns") ) { outValue = delete_dns_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"list_domains") ) { outValue = list_domains_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"create_domain") ) { outValue = create_domain_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"update_domain") ) { outValue = update_domain_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"delete_domain") ) { outValue = delete_domain_dyn(); return true; }
	}
	return false;
}

bool Dns_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { path=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Dns_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Dns_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &Dns_obj::path,HX_("path",a5,e5,51,4a)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Dns_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Dns_obj::path,"path");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Dns_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Dns_obj::path,"path");
};

#endif

hx::Class Dns_obj::__mClass;

static ::String Dns_obj_sStaticFields[] = {
	HX_("path",a5,e5,51,4a),
	HX_("list_domains",8e,6e,a6,6b),
	HX_("create_domain",67,73,e9,b6),
	HX_("update_domain",fa,ff,14,9a),
	HX_("delete_domain",18,2e,30,2d),
	HX_("list_dns",08,2a,33,34),
	HX_("create_dns",a6,1b,cc,66),
	HX_("update_dns",33,45,f3,0c),
	HX_("delete_dns",55,38,8b,a7),
	::String(null())
};

void Dns_obj::__register()
{
	Dns_obj _hx_dummy;
	Dns_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("civo.Dns",fa,98,02,63);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Dns_obj::__GetStatic;
	__mClass->mSetStaticField = &Dns_obj::__SetStatic;
	__mClass->mMarkFunc = Dns_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Dns_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Dns_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Dns_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Dns_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Dns_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Dns_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_b228eda4b89b410c_21_boot)
HXDLIN(  21)		path = HX_("/dns",da,48,5d,1f);
            	}
}

} // end namespace civo
